[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": {
      "id": 0,
      "db_id": "soccer_3",
      "question": "How many clubs are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many clubs are there?\n\nSELECT Club_ID FROM club\n\n\n"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": {
      "id": 1,
      "db_id": "soccer_3",
      "question": "Count the number of clubs."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of clubs.\n\nSELECT Club_ID FROM club\n\n\n"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": {
      "id": 2,
      "db_id": "soccer_3",
      "question": "List the name of clubs in ascending alphabetical order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the name of clubs in ascending alphabetical order.\n\nSELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player ORDER BY Earnings DESC LIMIT 10) ORDER BY Name ASC;\n\n\n"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": {
      "id": 3,
      "db_id": "soccer_3",
      "question": "What are the names of clubs, ordered alphabetically?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of clubs, ordered alphabetically?\n\nSELECT Name FROM club\n\n\n"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": {
      "id": 4,
      "db_id": "soccer_3",
      "question": "What are the managers and captains of clubs?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the managers and captains of clubs?\n\nSELECT club.Name, manager.Manager, captain.Captain FROM club INNER JOIN (SELECT Club_ID, Manager as Manager FROM player WHERE Name ='manager') AS manager ON club.Club_ID = manager.Club_ID INNER JOIN (SELECT Club_ID, Captain as Captain FROM player WHERE Name = 'captain') AS captain ON club.Club_ID = captain.Club_ID;\n\n\n"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": {
      "id": 5,
      "db_id": "soccer_3",
      "question": "Return the managers and captains of all clubs."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the managers and captains of all clubs.\n\nSELECT club.Name, player.Name FROM club JOIN player ON club.Club_ID = player.Club_ID WHERE player.Country = 'USA' AND player.Earnings > 1000000 ORDER BY club.Name ASC;\n\n\n"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": {
      "id": 6,
      "db_id": "soccer_3",
      "question": "List the name of clubs whose manufacturer is not \"Nike\""
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the name of clubs whose manufacturer is not \"Nike\"\n\nSELECT club.Name FROM club WHERE club.Manufacturer!= 'Nike';\n\n\n"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": {
      "id": 7,
      "db_id": "soccer_3",
      "question": "What are the names of clubs who do not have the manufacturer Nike?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of clubs who do not have the manufacturer Nike?\n\nSELECT Name FROM club WHERE Manufacturer!= 'Nike';\n\n\n"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": {
      "id": 8,
      "db_id": "soccer_3",
      "question": "What are the names of players in ascending order of wins count?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of players in ascending order of wins count?\n\nSELECT Name FROM player WHERE Wins_count IN (SELECT MAX(Wins_count) FROM player GROUP BY Club_ID);\n\n\n"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": {
      "id": 9,
      "db_id": "soccer_3",
      "question": "Return the names of players in order of count of wins, ascending."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the names of players in order of count of wins, ascending.\n\nSELECT Name FROM player WHERE Wins_count IN (SELECT MAX(Wins_count) FROM player GROUP BY Club_ID);\n\n\n"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": {
      "id": 10,
      "db_id": "soccer_3",
      "question": "What is the name of the player with the highest earnings?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the player with the highest earnings?\n\nSELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player);\n\n\n"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": {
      "id": 11,
      "db_id": "soccer_3",
      "question": "Return the name of the player who earns the most money."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the name of the player who earns the most money.\n\nSELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player);\n\n\n"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": {
      "id": 12,
      "db_id": "soccer_3",
      "question": "What are the distinct countries of players with earnings higher than 1200000?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the distinct countries of players with earnings higher than 1200000?\n\nSELECT Country FROM player WHERE Earnings > 1200000 GROUP BY Country;\n\n\n"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": {
      "id": 13,
      "db_id": "soccer_3",
      "question": "From which countries are players who make more than 1200000 from?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: From which countries are players who make more than 1200000 from?\n\nSELECT player.Country FROM club\n"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": {
      "id": 14,
      "db_id": "soccer_3",
      "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the country of the player with the highest earnings among players that have more than 2 win counts?\n\nSELECT Country FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2);\n\n\n"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": {
      "id": 15,
      "db_id": "soccer_3",
      "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Of players who have more than 2 wins, what is the country of the player who makes the most?\n\nSELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1;\n\n"
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": {
      "id": 16,
      "db_id": "soccer_3",
      "question": "Show names of players and names of clubs they are in."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show names of players and names of clubs they are in.\n\nSELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID\n\n\n"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": {
      "id": 17,
      "db_id": "soccer_3",
      "question": "What are the names of players and the corresponding clubs that they are in?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of players and the corresponding clubs that they are in?\n\nSELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID\n\n\n"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": {
      "id": 18,
      "db_id": "soccer_3",
      "question": "Show names of clubs that have players with more than 2 win counts."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show names of clubs that have players with more than 2 win counts.\n\nSELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2);\n\n\n"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": {
      "id": 19,
      "db_id": "soccer_3",
      "question": "What are the names of clubs that have players who have won more than twice?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of clubs that have players who have won more than twice?\n\nSELECT club.Name FROM club WHERE EXISTS (SELECT * FROM player WHERE player.Club_ID = club.Club_ID AND player.Wins_count > 2);\n\n\n"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": {
      "id": 20,
      "db_id": "soccer_3",
      "question": "Show names of players from the club with manager \"Sam Allardyce\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show names of players from the club with manager \"Sam Allardyce\".\n\nSELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce');\n\n\n"
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": {
      "id": 21,
      "db_id": "soccer_3",
      "question": "What are the names of players from the club managed by Sam Allardyce?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of players from the club managed by Sam Allardyce?\n\nSELECT player.Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce');\n\n\n"
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": {
      "id": 22,
      "db_id": "soccer_3",
      "question": "Show names of clubs in descending order of average earnings of players belonging."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show names of clubs in descending order of average earnings of players belonging.\n\nSELECT club.Name FROM club WHERE club.Club_ID IN ( SELECT player.Club_ID FROM player GROUP BY player.Club_ID ORDER BY AVG(player.Earnings) DESC LIMIT 10 ) ORDER BY club.Name ASC;\n\n\n"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": {
      "id": 23,
      "db_id": "soccer_3",
      "question": "What are the names of clubs, ordered descending by the average earnings of players within each?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of clubs, ordered descending by the average earnings of players within each?\n\nSELECT club.Name FROM club WHERE club.Club_ID IN ( SELECT player.Club_ID FROM player GROUP BY player.Club_ID ORDER BY AVG(player.Earnings) DESC )\n\n\n"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": {
      "id": 24,
      "db_id": "soccer_3",
      "question": "Show different manufacturers and the number of clubs they are associated with."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show different manufacturers and the number of clubs they are associated with.\n\nSELECT Club_ID, Manufacturer FROM club GROUP BY Club_ID HAVING COUNT(Manufacturer) > 1;\n\n"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": {
      "id": 25,
      "db_id": "soccer_3",
      "question": "How many clubs use each manufacturer?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many clubs use each manufacturer?\n\nSELECT club.Club_ID, club.Name, club.Manufacturer, COUNT(*) AS ManufacturerCount FROM club GROUP BY club.Club_ID HAVING COUNT(*) > 1 ORDER BY ManufacturerCount DESC;\n\n"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": {
      "id": 26,
      "db_id": "soccer_3",
      "question": "Please show the most common manufacturer of clubs."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Please show the most common manufacturer of clubs.\n\nSELECT club.Club_ID, club.Name, club.Manager, club.Captain, club.Manufacturer, club.Sponsor FROM club WHERE club.Manufacturer IN (SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1);\n\n\n"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": {
      "id": 27,
      "db_id": "soccer_3",
      "question": "Which manufacturer is most common among clubs?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which manufacturer is most common among clubs?\n\nSELECT Name FROM club WHERE Manufacturer IN (SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1);\n\n\n"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": {
      "id": 28,
      "db_id": "soccer_3",
      "question": "List the manufacturers that are associated with more than one club."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the manufacturers that are associated with more than one club.\n\nSELECT Club_ID, Manufacturer FROM club WHERE Club_ID IN (SELECT Club_ID FROM club GROUP BY Club_ID HAVING COUNT(*) > 1) ORDER BY Club_ID ASC;\n\n\n"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": {
      "id": 29,
      "db_id": "soccer_3",
      "question": "Which manufacturers work for more than 1 club?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which manufacturers work for more than 1 club?\n\nSELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING COUNT(Club_ID) > 1);\n\n\n"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": {
      "id": 30,
      "db_id": "soccer_3",
      "question": "List the country that have more than one player."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the country that have more than one player.\n\nSELECT Country FROM player WHERE Player_ID IN (SELECT Player_ID FROM player GROUP BY Club_ID HAVING COUNT(Club_ID) > 1);\n\n\n"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": {
      "id": 31,
      "db_id": "soccer_3",
      "question": "Which countries have produced more than one player?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which countries have produced more than one player?\n\nSELECT Country FROM player WHERE Player_ID IN (SELECT Player_ID FROM player GROUP BY Player_ID HAVING COUNT(Player_ID) > 1);\n\n\n"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": {
      "id": 32,
      "db_id": "soccer_3",
      "question": "List the name of clubs that do not have players."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the name of clubs that do not have players.\n\nSELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player);\n\n\n"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": {
      "id": 33,
      "db_id": "soccer_3",
      "question": "What are the names of clubs that do not have any players?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of clubs that do not have any players?\n\nSELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player);\n\n\n"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": {
      "id": 34,
      "db_id": "soccer_3",
      "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.\n\nSELECT player.Country FROM club\n"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": {
      "id": 35,
      "db_id": "soccer_3",
      "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?\n\nSELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000 GROUP BY Country HAVING COUNT(*) = (SELECT COUNT(DISTINCT Club_ID) FROM club);\n\n\n"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": {
      "id": 36,
      "db_id": "soccer_3",
      "question": "What is the number of distinct countries of all players?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the number of distinct countries of all players?\n\nSELECT Country FROM player\n\n\n"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": {
      "id": 37,
      "db_id": "soccer_3",
      "question": "How many different countries are players from?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many different countries are players from?\n\nSELECT Country FROM player\n\n\n"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": {
      "id": 38,
      "db_id": "soccer_3",
      "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the earnings of players from country \"Australia\" or \"Zimbabwe\".\n\nSELECT player.Earnings FROM club\n"
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": {
      "id": 39,
      "db_id": "soccer_3",
      "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the earnings of players from either of the countries of Australia or Zimbabwe?\n\nSELECT player.Earnings FROM club\n"
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": {
      "id": 40,
      "db_id": "e_commerce",
      "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.\n\nSELECT Customers.order_item_id, Customers.customer_first_name, Customers.customer_last_name FROM Customers WHERE (Customers.order_item_id > 2 AND Customers.order_item_id < 3);\n"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": {
      "id": 41,
      "db_id": "e_commerce",
      "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?\n\nSELECT Customers.order_item_id, Customers.customer_first_name, Customers.customer_last_name FROM Customers INNER JOIN Order_items ON Customers.order_id = Order_items.order_id WHERE Order_items.order_item_id > 2 GROUP BY Customers.customer_first_name, Customers.customer_last_name HAVING COUNT(*)>2;\n\n"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": {
      "id": 42,
      "db_id": "e_commerce",
      "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For the orders with any produts, how many products does each orders contain? List the order id, status and the number.\n\nSELECT Orders.order_item_id, Order_Status_Code, COUNT(Order_Item_Id) AS Number_of_Products FROM Orders JOIN Order_Items ON Orders.Order_ID = Order_Items.Order_ID GROUP BY Orders.Order_ID HAVING COUNT(Order_Item_Id) > 0;\n\n"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": {
      "id": 43,
      "db_id": "e_commerce",
      "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For every order, how many products does it contain, and what are the orders' statuses and ids?\n\nSELECT order_item_id, COUNT(*) AS num_products, ord.order_status_code, ord.order_id FROM Order_items JOIN Orders as ord ON Order_items.order_id = ord.order_id GROUP BY order_item_id;\n\n"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": {
      "id": 44,
      "db_id": "e_commerce",
      "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the dates of the orders which were placed at the earliest time or have more than 1 items.\n\nSELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders ORDER BY date_order_placed ASC LIMIT 1);\n"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": {
      "id": 45,
      "db_id": "e_commerce",
      "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the dates of the earliest order and the dates of all orders with more than 1 item?\n\nSELECT order_item_id, MIN(date_order_placed), MAX(date_order_placed)\n"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": {
      "id": 46,
      "db_id": "e_commerce",
      "question": "Which customers did not make any orders? List the first name, middle initial and last name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which customers did not make any orders? List the first name, middle initial and last name.\n\nSELECT Customers.order_item_id FROM Orders WHERE order_id = 0;\n"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": {
      "id": 47,
      "db_id": "e_commerce",
      "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: WHat are the first and last names, and middle initials of all customers who did not make any orders?\n\nSELECT Customers.order_item_id, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name FROM Customers LEFT JOIN Order_items ON Customers.customer_id = Order_items.customer_id WHERE Order_items.order_item_id IS NULL;\n\n"
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": {
      "id": 48,
      "db_id": "e_commerce",
      "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the id, name, price and color of the products which have not been ordered for at least twice?\n\nSELECT order_item_id, product_id, product_name, product_price, product_color FROM Order_items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_items GROUP BY order_item_id HAVING COUNT(order_item_id)=1);\n"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": {
      "id": 49,
      "db_id": "e_commerce",
      "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids, names, prices, and colors of all products that have been listed in less than two orders?\n\nSELECT order_item_id, product_name, product_price, product_color FROM Order_items JOIN Products ON Order_items.product_id = Products.product_id WHERE Order_items.order_id IN (SELECT order_id FROM Orders GROUP BY order_id HAVING COUNT(order_id) < 2);\n\n"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": {
      "id": 50,
      "db_id": "e_commerce",
      "question": "Which orders have at least 2 products on it? List the order id and date."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which orders have at least 2 products on it? List the order id and date.\n\nSELECT Orders.order_item_id, Orders.date_order_placed FROM Order_items INNER JOIN Shipments ON Order_items.shipment_id = Shipments.shipment_id WHERE Order_items.product_id IN (SELECT product_id FROM Products WHERE parent_product_id IS NOT NULL);\n"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": {
      "id": 51,
      "db_id": "e_commerce",
      "question": "What are the ids and dates of the orders with at least two products?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids and dates of the orders with at least two products?\n\nSELECT order_item_id, date_order_placed FROM Order_items WHERE product_id IN (SELECT product_id FROM Order_items GROUP BY product_id HAVING COUNT(*) > 1);\n"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": {
      "id": 52,
      "db_id": "e_commerce",
      "question": "Which product are listed in orders most frequently? List the id, product name and price."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which product are listed in orders most frequently? List the id, product name and price.\n\nSELECT Products.order_item_id, Products.product_name, Products.product_price FROM Order_items INNER JOIN Products ON Order_items.product_id = Products.product_id ORDER BY Order_items.order_item_id DESC LIMIT 5;\n\n"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": {
      "id": 53,
      "db_id": "e_commerce",
      "question": "What are the ids, names, and prices of all products that are ordered most frequently?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids, names, and prices of all products that are ordered most frequently?\n\nSELECT order_item_id, product_name, product_price FROM Order_items JOIN Products ON Order_items.product_id = Products.product_id WHERE order_item_id IN (SELECT order_item_id FROM Shipment_items GROUP BY order_item_id ORDER BY COUNT(*) DESC LIMIT 5);\n"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": {
      "id": 54,
      "db_id": "e_commerce",
      "question": "Which order have the least sum of the product prices. List the order id and sum."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which order have the least sum of the product prices. List the order id and sum.\n\nSELECT order_item_id, SUM(product_price) FROM Order_items GROUP BY order_item_id ORDER BY SUM(product_price) ASC LIMIT 1;\n\n"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": {
      "id": 55,
      "db_id": "e_commerce",
      "question": "What is the order that total cost the least , and how much is the total cost ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the order that total cost the least, and how much is the total cost?\n\nSELECT order_item_id, product_id, product_name, product_price, order_item_status_code, shipment_id, shipment_date, shipment_tracking_number FROM Order_items JOIN Shipments ON Order_items.order_id = Shipments.order_id WHERE order_item_status_code = 'Delivered' AND shipment_date IS NOT NULL ORDER BY product_price ASC;\n\n"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": {
      "id": 56,
      "db_id": "e_commerce",
      "question": "What is the most popular payment method?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the most popular payment method?\n\nSELECT shipment_id, COUNT(*) AS total_orders FROM Shipment_Items GROUP BY shipment_id ORDER BY total_orders DESC LIMIT 1;\n\n"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": {
      "id": 57,
      "db_id": "e_commerce",
      "question": "What is the payment method that most customers use?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the payment method that most customers use?\n\nSELECT shipment_id, COUNT(*) AS num_shipment_items FROM Shipment_Items GROUP BY shipment_id ORDER BY num_shipment_items DESC LIMIT 1;\n\n"
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": {
      "id": 58,
      "db_id": "e_commerce",
      "question": "How many number of products does each gender of customers buy? List the gender and the number"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many number of products does each gender of customers buy? List the gender and the number\n\nSELECT Customers.order_item_id, COUNT(*) AS num_products FROM Orders JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id JOIN Shipments ON Orders.order_id = Shipments.order_id JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id JOIN Order_items ON Shipment_items.order_item_id = Order_items.order_item_id JOIN Products ON Order_items.product_id = Products.product_id GROUP BY Customers.gender_code;\n\n"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": {
      "id": 59,
      "db_id": "e_commerce",
      "question": "How many products does each gender buy?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many products does each gender buy?\n\nSELECT Customers.order_item_id, Products.product_id, COUNT(*) AS num_products FROM Orders INNER JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code, Products.product_id ORDER BY Customers.gender_code ASC, Products.product_id ASC;\n"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": {
      "id": 60,
      "db_id": "e_commerce",
      "question": "How many orders has each gender of customers placed?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many orders has each gender of customers placed?\n\nSELECT Customers.order_item_id, COUNT(*) AS order_count FROM Orders INNER JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Customers ON Customer_Payment_Methods.customer_id = Customers.customer_id GROUP BY Customers.gender_code ORDER BY order_count DESC;\n\n"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": {
      "id": 61,
      "db_id": "e_commerce",
      "question": "How many orders has each gender placed?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many orders has each gender placed?\n\nSELECT Customers.order_item_id, COUNT(*) AS order_count FROM Orders INNER JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id GROUP BY Customers.gender_code;\n\n"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": {
      "id": 62,
      "db_id": "e_commerce",
      "question": "List the customers' first name, middle initial, last name and payment methods."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the customers' first name, middle initial, last name and payment methods.\n\nSELECT Customers.order_item_id, Customer_Payment_Methods.customer_id, Products.product_id FROM Orders INNER JOIN Order_items ON Orders.order_id = Order_items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id INNER JOIN Products ON Order_items.product_id = Products.product_id WHERE Orders.order_id = 2;\n"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": {
      "id": 63,
      "db_id": "e_commerce",
      "question": "What are the first names, middle initials, last names, and payment methods of all customers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the first names, middle initials, last names, and payment methods of all customers?\n\nSELECT Customers.order_item_id, Products.product_name, Orders.order_id, Shipments.shipment_id FROM Customer_Payment_Methods INNER JOIN Customers ON Customer_Payment_Methods.customer_id = Customers.customer_id INNER JOIN Order_Items ON Customers.customer_id = Order_Items.customer_id INNER JOIN Products ON Order_Items.product_id = Products.product_id INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id WHERE Customers.gender_code = 'M' AND Customers.customer_first_name LIKE '%John%' ORDER BY Customers.customer_first_name ASC;\n"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": {
      "id": 64,
      "db_id": "e_commerce",
      "question": "List the invoices' status, date and the date of shipment."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the invoices' status, date and the date of shipment.\n\nSELECT Invoices.order_item_id, Shipments.shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number;\n"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": {
      "id": 65,
      "db_id": "e_commerce",
      "question": "What are the statuses, dates, and shipment dates for all invoices?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the statuses, dates, and shipment dates for all invoices?\n\nSELECT Invoices.order_item_id, Order_items.invoice_number, Shipments.shipment_date FROM Invoices INNER JOIN Order_items ON Invoices.invoice_number = Order_items.invoice_number INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number;\n"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": {
      "id": 66,
      "db_id": "e_commerce",
      "question": "List the names of the products being shipped and the corresponding shipment date."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of the products being shipped and the corresponding shipment date.\n\nSELECT Products.shipment_id, Shipment_Items.order_item_id, Order_Items.product_id, Products.product_name, Shipments.shipment_date FROM Products INNER JOIN Shipment_Items ON Products.product_id = Shipment_Items.order_item_id INNER JOIN Orders ON Shipment_Items.order_id = Orders.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Order_Items ON Shipments.invoice_number = Order_Items.invoice_number WHERE Shipments.shipment_date IS NOT NULL;\n"
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": {
      "id": 67,
      "db_id": "e_commerce",
      "question": "What are the names of the products tht have been shipped, and on what days were they shipped?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the products tht have been shipped, and on what days were they shipped?\n\nSELECT Products.shipment_id, Shipments.shipment_date FROM Shipment_items INNER JOIN Shipments ON Shipment_items.shipment_id = Shipments.shipment_id INNER JOIN Order_items ON Shipment_items.order_item_id = Order_items.order_item_id INNER JOIN Orders ON Order_items.order_id = Orders.order_id INNER JOIN Customers ON Orders.customer_id = Customers.customer_id INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number INNER JOIN Products ON Order_items.product_id = Products.product_id WHERE (Products.product_name LIKE '%shirt%') AND (Products.product_color LIKE 'blue') AND (Products.product_size LIKE 'large') AND (Products.product_description LIKE '%red%') AND (Customers.gender_code LIKE 'F') AND (Customer_Payment_Methods.payment_method_code LIKE 'credit card') AND (Invoices.invoice_status_code LIKE 'paid') AND (Orders.order_status_code LIKE'shipped"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": {
      "id": 68,
      "db_id": "e_commerce",
      "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?\n\nSELECT order_item_id, product_id, order_id, order_item_status_code, shipment_tracking_number FROM Order_items JOIN Shipment_items ON Order_items.order_item_id = Shipment_items.order_item_id WHERE shipment_id IS NOT NULL;\n\n"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": {
      "id": 69,
      "db_id": "e_commerce",
      "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?\n\nSELECT order_item_id, product_id, order_item_status_code, shipment_tracking_number FROM Order_items JOIN Shipment_items ON Order_items.order_item_id = Shipment_items.order_item_id WHERE order_item_status_code = 'SHIPPED' AND shipment_tracking_number IS NOT NULL;\n"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": {
      "id": 70,
      "db_id": "e_commerce",
      "question": "What is the product name and the color of the ordered items which have been shipped?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the product name and the color of the ordered items which have been shipped?\n\nSELECT order_item_id, product_name, product_color FROM Order_items JOIN Shipment_items ON Order_items.order_item_id = Shipment_items.order_item_id JOIN Shipments ON Shipment_items.shipment_id = Shipments.shipment_id WHERE shipment_date IS NOT NULL;\n\n"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": {
      "id": 71,
      "db_id": "e_commerce",
      "question": "What are the names and colors of all products that have been shipped?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and colors of all products that have been shipped?\n\nSELECT Products.order_item_id, Products.product_name, Products.product_color FROM Shipments INNER JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id INNER JOIN Order_items ON Shipment_items.order_item_id = Order_items.order_item_id INNER JOIN Products ON Order_items.product_id = Products.product_id;\n"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": {
      "id": 72,
      "db_id": "e_commerce",
      "question": "List all the distinct product names, price and descriptions which are bought by female customers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all the distinct product names, price and descriptions which are bought by female customers.\n\nSELECT Products.order_item_id, Products.product_name, Products.product_price, Products.product_description FROM Customers INNER JOIN Order_items ON Customers.customer_id = Order_items.order_id WHERE Customers.gender_code = 'F' AND Order_items.order_item_id = Products.product_id;\n\n"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": {
      "id": 73,
      "db_id": "e_commerce",
      "question": "What are the different names, prices, and descriptions for all products bought by female customers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different names, prices, and descriptions for all products bought by female customers?\n\nSELECT Products.order_item_id, Products.product_name, Products.product_price, Products.product_description FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id INNER JOIN Products ON Order_Items.product_id = Products.product_id WHERE Customers.gender_code = 'F' GROUP BY Products.product_name, Products.product_price, Products.product_description;\n"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": {
      "id": 74,
      "db_id": "e_commerce",
      "question": "What are invoices status of all the orders which have not been shipped?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are invoices status of all the orders which have not been shipped?\n\nSELECT Invoices.order_item_id FROM Invoices WHERE InvoiceStatus ='shipped' AND ShipmentDate IS NULL;\n"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": {
      "id": 75,
      "db_id": "e_commerce",
      "question": "What are the invoice statuses for all orderes that have not been shipped out yet?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the invoice statuses for all orderes that have not been shipped out yet?\n\nSELECT Invoices.order_item_id, Invoices.invoice_status_code FROM Shipments INNER JOIN Order_items ON Shipments.order_item_id = Order_items.order_item_id WHERE Shipment_items.shipment_id IS NULL;\n"
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": {
      "id": 76,
      "db_id": "e_commerce",
      "question": "What are the total cost of all the orders ? List the order id , date , and total cost ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the total cost of all the orders? List the order id, date, and total cost.\n\nSELECT order_item_id, order_id, sum(product_price) as total_cost FROM Order_items GROUP BY order_id ORDER BY order_id ASC;\n\n"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": {
      "id": 77,
      "db_id": "e_commerce",
      "question": "For each order, what is its id, date, and total amount paid?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each order, what is its id, date, and total amount paid?\n\nSELECT order_item_id, date_order_placed, sum(product_price) as total_amount_paid FROM Order_items JOIN Orders ON Order_items.order_id = Orders.order_id GROUP BY order_id;\n\n"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": {
      "id": 78,
      "db_id": "e_commerce",
      "question": "How many customers have placed any order?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customers have placed any order?\n\nSELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE customer_id = 2;\n"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": {
      "id": 79,
      "db_id": "e_commerce",
      "question": "How many different customers have ordered things?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many different customers have ordered things?\n\nSELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE Customer_Payment_Methods.customer_id = Orders.customer_id AND Order_Items.order_id = Shipments.invoice_number AND Shipment_items.shipment_id = Shipments.shipment_id\n\n"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": {
      "id": 80,
      "db_id": "e_commerce",
      "question": "How many item states are there in the orders?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many item states are there in the orders?\n\nSELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'New' OR order_item_status_code = 'Cancelled' OR order_item_status_code = 'Returned';\n\n"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": {
      "id": 81,
      "db_id": "e_commerce",
      "question": "How many different item status codes are there listed in ordered items?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many different item status codes are there listed in ordered items?\n\nSELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'Ordered' AND product_id IN (SELECT product_id FROM Products WHERE parent_product_id IS NULL);\n"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": {
      "id": 82,
      "db_id": "e_commerce",
      "question": "How many different payment methods are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many different payment methods are there?\n\nSELECT shipment_id, COUNT(DISTINCT payment_method_code) AS num_payment_methods FROM Shipments GROUP BY shipment_id HAVING COUNT(DISTINCT payment_method_code) > 1;\n"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": {
      "id": 83,
      "db_id": "e_commerce",
      "question": "How many different payment methods can customers choose from?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many different payment methods can customers choose from?\n\nSELECT shipment_id, COUNT(DISTINCT payment_method_code) AS num_payment_methods FROM Shipments JOIN Customer_Payment_Methods ON Shipments.customer_id = Customer_Payment_Methods.customer_id GROUP BY shipment_id HAVING COUNT(DISTINCT payment_method_code) > 1;\n"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": {
      "id": 84,
      "db_id": "e_commerce",
      "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the login names and passwords of the customers whose phone number have the prefix '+12'?\n\nSELECT Customers.order_item_id FROM Customer_Payment_Methods WHERE customer_id = 'customer_id' AND payment_method_code = 'payment_method_code'\n"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": {
      "id": 85,
      "db_id": "e_commerce",
      "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the usernames and passwords of all customers whose phone number starts with '+12'?\n\nSELECT Customers.order_item_id, Customer_Payment_Methods.login_name, Customer_Payment_Methods.login_password FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.phone_number LIKE '%+12%';\n"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": {
      "id": 86,
      "db_id": "e_commerce",
      "question": "What are the product sizes of the products whose name has the substring 'Dell'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the product sizes of the products whose name has the substring 'Dell'?\n\nSELECT Products.order_item_id FROM Products WHERE Products.product_name LIKE '%Dell%';\n\n"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": {
      "id": 87,
      "db_id": "e_commerce",
      "question": "What are the sizes of all products whose name includes the word 'Dell'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the sizes of all products whose name includes the word 'Dell'?\n\nSELECT Products.order_item_id FROM Products WHERE Products.product_name LIKE '%Dell%';\n"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": {
      "id": 88,
      "db_id": "e_commerce",
      "question": "What are the product price and the product size of the products whose price is above average?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the product price and the product size of the products whose price is above average?\n\nSELECT Products.order_item_id, Products.product_price, Products.product_size FROM Order_items INNER JOIN Shipments ON Order_items.order_item_id = Shipment_items.order_item_id WHERE Order_items.product_id = Products.product_id AND Order_items.order_item_status_code = 'SHIPPED' AND Shipment_items.shipment_id = Shipments.shipment_id AND Shipments.invoice_number = Invoices.invoice_number AND Invoices.invoice_status_code = 'PAID' AND Orders.customer_id = Customers.customer_id AND Customers.gender_code = 'F' AND Orders.date_order_placed BETWEEN '2019-01-01' AND '2020-12-31' GROUP BY Products.product_id HAVING AVG(Products.product_price) > (SELECT AVG(Products.product_price) FROM Products);\n"
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": {
      "id": 89,
      "db_id": "e_commerce",
      "question": "What are the prices and sizes of all products whose price is above the mean?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the prices and sizes of all products whose price is above the mean?\n\nSELECT Products.order_item_id, Products.product_price, Products.product_size FROM Order_items INNER JOIN Products ON Order_items.order_item_id = Products.product_id WHERE Product.price > (SELECT AVG(Product.price) FROM Products);\n"
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": {
      "id": 90,
      "db_id": "e_commerce",
      "question": "How many kinds of products have not been sold?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many kinds of products have not been sold?\n\nSELECT Products.order_item_id FROM Products WHERE order_item_id IS NULL;\n\n"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": {
      "id": 91,
      "db_id": "e_commerce",
      "question": "What is the number of products that have not been ordered yet?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the number of products that have not been ordered yet?\n\nSELECT Products.order_item_id FROM Products WHERE order_item_id IS NULL;\n"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": {
      "id": 92,
      "db_id": "e_commerce",
      "question": "How many customers do not have any payment method?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customers do not have any payment method?\n\nSELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE customer_id = 2;\n"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": {
      "id": 93,
      "db_id": "e_commerce",
      "question": "How many customers do not have a listed payment method?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customers do not have a listed payment method?\n\nSELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE customer_id = 'Customer_Payment_Methods.customer_id' AND Customer_Payment_Methods.payment_method_code IS NULL;\n"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": {
      "id": 94,
      "db_id": "e_commerce",
      "question": "What are all the order status and all the dates of orders?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are all the order status and all the dates of orders?\n\nSELECT order_item_id, product_id, order_id, order_item_status_code, date_order_placed FROM Order_items ORDER BY order_item_id ASC;\n"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": {
      "id": 95,
      "db_id": "e_commerce",
      "question": "What are the status codes and dates placed for all of the orders?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the status codes and dates placed for all of the orders?\n\nSELECT order_item_id, product_id, order_id, order_item_status_code, date_order_placed FROM Order_items INNER JOIN Orders ON Order_items.order_id = Orders.order_id;\n\n"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": {
      "id": 96,
      "db_id": "e_commerce",
      "question": "List the address, town and county information of the customers who live in the USA."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the address, town and county information of the customers who live in the USA.\n\nSELECT Customers.order_item_id, Products.product_name, Orders.order_id, Shipments.shipment_id, Shipment_items.shipment_tracking_number FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_items ON Orders.order_id = Order_items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id WHERE Customers.country = 'USA' ORDER BY Customers.customer_id ASC;\n"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": {
      "id": 97,
      "db_id": "e_commerce",
      "question": "What are the addresses, towns, and county information for all customers who live in the United States?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the addresses, towns, and county information for all customers who live in the United States?\n\nSELECT Customers.order_item_id, Products.product_name, Shipments.shipment_date, Shipment_items.order_item_id FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_items ON Orders.order_id = Order_items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id INNER JOIN Products ON Order_items.product_id = Products.product_id WHERE Customers.country = 'United States' ORDER BY Customers.customer_id ASC;\n"
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": {
      "id": 98,
      "db_id": "e_commerce",
      "question": "List all the pairs of buyer first names and product names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all the pairs of buyer first names and product names.\n\nSELECT Customers.order_item_id, Products.product_name FROM Customer_Payment_Methods INNER JOIN Orders ON Customer_Payment_Methods.customer_id = Orders.customer_id INNER JOIN Order_items ON Orders.order_id = Order_items.order_id INNER JOIN Products ON Order_items.product_id = Products.product_id;\n\n"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": {
      "id": 99,
      "db_id": "e_commerce",
      "question": "What are the first names of all buyers and what products did they buy? List them in pairs."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the first names of all buyers and what products did they buy? List them in pairs.\n\nSELECT Customers.order_item_id, Products.product_name FROM Orders INNER JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Order_items ON Orders.order_id = Order_items.order_id INNER JOIN Products ON Order_items.product_id = Products.product_id WHERE Orders.order_status_code = 'Completed' AND Customer_Payment_Methods.payment_method_code = 'Credit Card';\n\n"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": {
      "id": 100,
      "db_id": "e_commerce",
      "question": "How many items are shipped?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many items are shipped?\n\nSELECT shipment_id, COUNT(*) AS num_items_shipped FROM Shipment_Items GROUP BY shipment_id;\n\n"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": {
      "id": 101,
      "db_id": "e_commerce",
      "question": "How many products have been shipped?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many products have been shipped?\n\nSELECT Products.order_item_id FROM Products WHERE Products.product_id = Shipment_items.shipment_id;\n\n"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": {
      "id": 102,
      "db_id": "e_commerce",
      "question": "What is the product average price?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the product average price?\n\nSELECT Products.order_item_id, AVG(Product.price) FROM Products INNER JOIN Order_items ON Products.product_id = Order_items.product_id GROUP BY Products.order_item_id;\n\n"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": {
      "id": 103,
      "db_id": "e_commerce",
      "question": "How much do the products cost on average?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How much do the products cost on average?\n\nSELECT Products.order_item_id, AVG(Product.price) FROM Products INNER JOIN Order_items ON Products.product_id = Order_items.product_id GROUP BY Order_items.order_item_id;\n\n"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": {
      "id": 104,
      "db_id": "e_commerce",
      "question": "What is the average price of the products being ordered?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average price of the products being ordered?\n\nSELECT order_item_id, AVG(product_price) AS avg_price FROM Order_items GROUP BY order_item_id;\n"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": {
      "id": 105,
      "db_id": "e_commerce",
      "question": "What is the price of all products being ordered on average?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the price of all products being ordered on average?\n\nSELECT order_item_id, product_id, AVG(product_price) AS avg_price FROM Order_items GROUP BY order_item_id, product_id;\n\n"
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": {
      "id": 106,
      "db_id": "e_commerce",
      "question": "What are the email address, town and county of the customers who are of the least common gender?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the email address, town and county of the customers who are of the least common gender?\n\nSELECT Customers.order_item_id, Customers.email_address, Customers.town_city, Customers.county FROM Customers INNER JOIN Order_items ON Customers.customer_id = Order_items.order_id WHERE Customers.gender_code IN (SELECT MIN(Customers.gender_code) FROM Customers GROUP BY Customers.gender_code);\n"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": {
      "id": 107,
      "db_id": "e_commerce",
      "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?\n\nSELECT Customers.order_item_id, Customer_Payment_Methods.email_address, Shipments.town_city, Shipment_Items.county FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id WHERE (Orders.order_status_code = 'Cancelled') AND (Orders.date_order_placed > '2019-01-01' OR Orders.date_order_placed < '2020-12-31');\n"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": {
      "id": 108,
      "db_id": "e_commerce",
      "question": "List the order date of the orders who are placed by customers with at least 2 payment methods."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the order date of the orders who are placed by customers with at least 2 payment methods.\n\nSELECT Orders.order_item_id FROM Order_Items WHERE Customer_Payment_Methods.customer_id = Customers.customer_id AND Customer_Payment_Methods.payment_method_code IN (SELECT Customer_Payment_Methods.payment_method_code FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.customer_id HAVING COUNT(Customer_Payment_Methods.payment_method_code)>1);\n"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": {
      "id": 109,
      "db_id": "e_commerce",
      "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the date of all orders that have been placed by customers with at least 2 payment methods?\n\nSELECT order_item_id FROM Order_Items WHERE product_id = 100 AND order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2));\n"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": {
      "id": 110,
      "db_id": "e_commerce",
      "question": "What is the most uncommon order status?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the most uncommon order status?\n\nSELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE order_status_code = 'Cancelled') ORDER BY order_item_id ASC;\n"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": {
      "id": 111,
      "db_id": "e_commerce",
      "question": "What is the least common order status?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the least common order status?\n\nSELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE order_status_code = 'Cancelled') ORDER BY order_item_id ASC LIMIT 1;\n\n"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": {
      "id": 112,
      "db_id": "e_commerce",
      "question": "For all the products sold for more than 3 times, list their id and description."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For all the products sold for more than 3 times, list their id and description.\n\nSELECT order_item_id, product_description FROM Order_items JOIN Shipment_items ON Order_items.order_item_id = Shipment_items.order_item_id WHERE shipment_id IN (SELECT shipment_id FROM Shipments JOIN Orders ON Shipments.order_id = Orders.order_id WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods JOIN Customers ON Customer_Payment_Methods.customer_id = Customers.customer_id WHERE payment_method_code = 'credit card')) AND product_id IN (SELECT product_id FROM Products JOIN Order_items ON Products.product_id = Order_items.product_id WHERE parent_product_id IS NULL) GROUP BY order_item_id HAVING COUNT(order_item_id) > 3;\n"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": {
      "id": 113,
      "db_id": "e_commerce",
      "question": "For all products sold more than 3 times, what are their ids and descriptions?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For all products sold more than 3 times, what are their ids and descriptions?\n\nSELECT order_item_id, product_description FROM Order_items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_items GROUP BY order_item_id HAVING COUNT(*) > 3);\n"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": {
      "id": 114,
      "db_id": "e_commerce",
      "question": "List the invoice dates and ids of the invoices causing at least 2 shipments."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the invoice dates and ids of the invoices causing at least 2 shipments.\n\nSELECT Invoices.shipment_id, Invoices.invoice_date FROM Shipments INNER JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number WHERE (Shipments.shipment_id IN (SELECT Shipment_items.shipment_id FROM Shipment_items GROUP BY Shipment_items.shipment_id HAVING COUNT(*) >= 2));\n"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": {
      "id": 115,
      "db_id": "e_commerce",
      "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the dates and ids of the invoices that are related to at least 2 shipments?\n\nSELECT Invoices.shipment_id, Shipments.invoice_number, Shipments.shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number WHERE (SELECT COUNT(*) FROM Shipment_items GROUP BY shipment_id HAVING COUNT(*) > 1);\n"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": {
      "id": 116,
      "db_id": "e_commerce",
      "question": "what are all shipment tracking numbers and shipment dates?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: what are all shipment tracking numbers and shipment dates?\n\nSELECT shipment_id, shipment_tracking_number, shipment_date FROM Shipments;\n\n"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": {
      "id": 117,
      "db_id": "e_commerce",
      "question": "What are the tracking numbers and dates for all shipments listed?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the tracking numbers and dates for all shipments listed?\n\nSELECT shipment_id, shipment_tracking_number, shipment_date FROM Shipments;\n\n"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": {
      "id": 118,
      "db_id": "e_commerce",
      "question": "What are the color, description and size of the products priced below the maximum price."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the color, description and size of the products priced below the maximum price.\n\nSELECT Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Order_items INNER JOIN Products ON Order_items.order_item_id = Products.product_id WHERE Order_items.order_item_id IN (SELECT Order_items.order_item_id FROM Order_items INNER JOIN Orders ON Order_items.order_id = Orders.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id INNER JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number INNER JOIN Customer_payment_methods ON Invoices.customer_id = Customer_payment_methods.customer_id INNER JOIN Customers ON Customer_payment_methods.customer_id = Customers.customer_id WHERE Customers.gender_code = 'F' AND Customers.email_address LIKE '%@gmail.com') AND Order_items.order_item_id IN (SELECT Order_items.order_item_id FROM Order_items INNER JOIN Products ON Order_items.product_id = Products.product_id WHERE Products.product_price < (SELECT MAX(Product.price) FROM"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": {
      "id": 119,
      "db_id": "e_commerce",
      "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the colors, descriptions, and sizes for all products that are not at the maximum price?\n\nSELECT Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Order_items INNER JOIN Products ON Order_items.order_item_id = Products.product_id WHERE Order_items.order_item_status_code!= 'MAX' ORDER BY Product_color ASC, Product_description ASC, Product_size ASC;\n\n"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": {
      "id": 120,
      "db_id": "bbc_channels",
      "question": "Return the names of directors who are older than the average age."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the names of directors who are older than the average age.\n\nSELECT director.Director_ID, director.Name FROM director WHERE director.Age > (SELECT AVG(director.Age) FROM director);\n\n\n"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": {
      "id": 121,
      "db_id": "bbc_channels",
      "question": "Find the the name of the oldest director."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the the name of the oldest director.\n\nSELECT director.Director_ID, director.Name, director.Age FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE program.Start_Year < 2000 ORDER BY director.Age DESC LIMIT 1;\n\n"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": {
      "id": 122,
      "db_id": "bbc_channels",
      "question": "How many channels have the word 'bbc' in their internet link?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many channels have the word 'bbc' in their internet link?\n\nSELECT Channel_ID FROM channel WHERE Internet LIKE '%bbc%'\n\n\n"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": {
      "id": 123,
      "db_id": "bbc_channels",
      "question": "How many different digital terrestrial channels are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many different digital terrestrial channels are there?\n\nSELECT channel.Channel_ID FROM program WHERE program.Start_Year > 2000 AND program.Director_ID IN (SELECT director.Director_ID FROM director WHERE director.Age < 50) GROUP BY channel.Channel_ID HAVING COUNT(DISTINCT program.Program_ID) = 1;\n\n"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": {
      "id": 124,
      "db_id": "bbc_channels",
      "question": "List all program titles in the order of starting year. List the most recent one first."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all program titles in the order of starting year. List the most recent one first.\n\nSELECT program.Channel_ID, program.Title FROM program ORDER BY Start_Year DESC;\n\n"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": {
      "id": 125,
      "db_id": "bbc_channels",
      "question": "Which director is in charge of the most programs?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which director is in charge of the most programs?\n\nSELECT director.Director_ID, Name, Age FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE Channel_ID IN ( SELECT channel.Channel_ID FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE Is_first_director = 1 ) GROUP BY Director_ID ORDER BY COUNT(Director_ID) DESC LIMIT 1;\n\n"
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": {
      "id": 126,
      "db_id": "bbc_channels",
      "question": "Find the name and age of the director who is in charge of the most programs?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and age of the director who is in charge of the most programs?\n\nSELECT director.Director_ID, director.Name, director.Age FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE program.Channel_ID IN ( SELECT channel.Channel_ID FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE director_admin.Is_first_director = 1 ) GROUP BY director.Director_ID ORDER BY COUNT(director.Director_ID) DESC LIMIT 1;\n\n"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": {
      "id": 127,
      "db_id": "bbc_channels",
      "question": "Return the title of the program that began most recently."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the title of the program that began most recently.\n\nSELECT program.Channel_ID, channel.Name, director.Administered_Channel_ID, director.Age, director.Name, program.Start_Year, program.Title FROM program INNER JOIN channel ON program.Channel_ID = channel.Channel_ID INNER JOIN director_admin ON director_admin.Director_ID = program.Director_ID WHERE director_admin.Is_first_director = 1 ORDER BY Start_Year DESC LIMIT 1;\n\n"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": {
      "id": 128,
      "db_id": "bbc_channels",
      "question": "Find the name and website link of the channels that have more than one program."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and website link of the channels that have more than one program.\n\nSELECT channel.Channel_ID, channel.Name, channel.Internet FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE director_admin.Is_first_director = 1 AND (SELECT COUNT(*) FROM program WHERE program.Channel_ID = channel.Channel_ID) > 1;\n\n"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": {
      "id": 129,
      "db_id": "bbc_channels",
      "question": "Find the number of programs for each channel. Return the name of each channel as well."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of programs for each channel. Return the name of each channel as well.\n\nSELECT channel.Channel_ID, channel.Name, COUNT(program.Program_ID) AS num_programs FROM program JOIN director_admin ON program.Director_ID = director_admin.Director_ID AND program.Channel_ID = director_admin.Channel_ID JOIN channel ON program.Channel_ID = channel.Channel_ID GROUP BY channel.Channel_ID ORDER BY channel.Channel_ID ASC;\n"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": {
      "id": 130,
      "db_id": "bbc_channels",
      "question": "Find the number of channels that do not run any program."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of channels that do not run any program.\n\nSELECT Channel_ID FROM channel WHERE NOT EXISTS ( SELECT * FROM program WHERE program.Channel_ID = channel.Channel_ID );\n\n\n"
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": {
      "id": 131,
      "db_id": "bbc_channels",
      "question": "What is the name of the director who is in the \"Dracula\" program?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the director who is in the \"Dracula\" program?\n\nSELECT director.Director_ID, Name FROM director INNER JOIN program ON director.Director_ID = program.Director_ID WHERE Title = 'Dracula'\n\n\n"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": {
      "id": 132,
      "db_id": "bbc_channels",
      "question": "Find the name and internet web of the channel that is directed by the most directors."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and internet web of the channel that is directed by the most directors.\n\nSELECT channel.Channel_ID, channel.Name, channel.Internet FROM director_admin JOIN channel ON director_admin.Channel_ID = channel.Channel_ID WHERE director_admin.Is_first_director = 1 GROUP BY channel.Channel_ID ORDER BY COUNT(director_admin.Director_ID) DESC LIMIT 1;\n\n"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": {
      "id": 133,
      "db_id": "bbc_channels",
      "question": "Find the name of the directors whose age is between 30 and 60."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name of the directors whose age is between 30 and 60.\n\nSELECT director.Director_ID, director.Name FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE Start_Year > 2000 AND Start_Year < 2015 ORDER BY Director_ID ASC;\n\n"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": {
      "id": 134,
      "db_id": "bbc_channels",
      "question": "give me the name of channels that have both a director younger than 40 and a director older than 60."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: give me the name of channels that have both a director younger than 40 and a director older than 60.\n\nSELECT channel.Channel_ID, channel.Name FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE (director_admin.Is_first_director = true) AND ((director_admin.Director_ID IN (SELECT Director_ID FROM director WHERE Age < 40)) OR (director_admin.Director_ID IN (SELECT Director_ID FROM director WHERE Age > 60)))\n\n\n"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": {
      "id": 135,
      "db_id": "bbc_channels",
      "question": "Find the id and name of the channel that is not directed by Hank Baskett."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the id and name of the channel that is not directed by Hank Baskett.\n\nSELECT Channel_ID, Name FROM channel WHERE NOT EXISTS (SELECT * FROM director_admin WHERE Director_ID = 1 AND Channel_ID = channel.Channel_ID);\n\n\n"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": {
      "id": 136,
      "db_id": "tv_shows",
      "question": "How many radios are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many radios are there?\n\nSELECT radio.City_channel_ID, COUNT(*) AS num_radios FROM city_channel_radio JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID GROUP BY radio.City_channel_ID;\n\n"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": {
      "id": 137,
      "db_id": "tv_shows",
      "question": "List the transmitters of radios in ascending order of erp kw ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the transmitters of radios in ascending order of erp kw.\n\nSELECT radio.tv_show_ID FROM city_channel_radio WHERE City_channel_ID = 1 AND Is_online = true;\n"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": {
      "id": 138,
      "db_id": "tv_shows",
      "question": "What are the names and original air dates of tv shows?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and original air dates of tv shows?\n\nSELECT tv_show.tv_show_ID, tv_show.tv_show_name, tv_show.Original_Airdate FROM city_channel_tv_show INNER JOIN tv_show ON city_channel_tv_show.tv_show_ID = tv_show.tv_show_ID WHERE Is_online = 1 AND Is_free = 0;\n"
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": {
      "id": 139,
      "db_id": "tv_shows",
      "question": "List the station names of city channels whose affiliation is not \"ABC\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the station names of city channels whose affiliation is not \"ABC\".\n\nSELECT City_channel_ID, Station_name FROM city_channel WHERE Affiliation!= 'ABC';\n\n"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": {
      "id": 140,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.\n\nSELECT radio.tv_show_ID FROM city_channel_radio WHERE radio.ERP_kW > 150 OR radio.ERP_kW < 30;\n"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": {
      "id": 141,
      "db_id": "tv_shows",
      "question": "What is the transmitter of the radio with the largest ERP_kW?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the transmitter of the radio with the largest ERP_kW?\n\nSELECT radio.tv_show_ID FROM city_channel_radio WHERE City_channel_ID = 1 AND Radio_ID = 3;\n"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": {
      "id": 142,
      "db_id": "tv_shows",
      "question": "What is the average ERP across all radios?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average ERP across all radios?\n\nSELECT radio.City_channel_ID, AVG(radio.ERP_kW) AS avg_ERP FROM city_channel_radio JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID GROUP BY radio.City_channel_ID;\n\n"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": {
      "id": 143,
      "db_id": "tv_shows",
      "question": "Show the different affiliations of city channels and the number of city channels with each affiliation."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the different affiliations of city channels and the number of city channels with each affiliation.\n\nSELECT City_channel_ID, Affiliation, COUNT(*) AS Count FROM city_channel GROUP BY Affiliation ORDER BY Count DESC;\n\n"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": {
      "id": 144,
      "db_id": "tv_shows",
      "question": "Please show the most common affiliation for city channels."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Please show the most common affiliation for city channels.\n\nSELECT City_channel_ID, COUNT(*) AS count FROM city_channel GROUP BY City_channel_ID ORDER BY count DESC LIMIT 1;\n\n"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": {
      "id": 145,
      "db_id": "tv_shows",
      "question": "List the affiliations shared by more than three city channels."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the affiliations shared by more than three city channels.\n\nSELECT city_channel.City_channel_ID, Affiliation FROM city_channel JOIN city_channel_radio ON city_channel.ID = city_channel_radio.City_channel_ID GROUP BY Affiliation HAVING COUNT(*) > 3;\n\n"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": {
      "id": 146,
      "db_id": "tv_shows",
      "question": "Show the cities and station names of city channels in ascending alphabetical order of station name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the cities and station names of city channels in ascending alphabetical order of station name.\n\nSELECT City_channel_ID, Station_name FROM city_channel ORDER BY Station_name ASC;\n\n"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": {
      "id": 147,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios and the cities of the channels they are associated with."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the transmitters of radios and the cities of the channels they are associated with.\n\nSELECT radio.City_channel_ID, city_channel.City, radio.Transmitter FROM city_channel JOIN city_channel_radio ON city_channel.ID = City_channel_radio.City_channel_ID JOIN radio ON City_channel_radio.Radio_ID = Radio.Radio_ID;\n\n"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": {
      "id": 148,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.\n\nSELECT radio.tv_show_ID, city_channel.tv_show_ID FROM city_channel JOIN tv_show ON city_channel.tv_show_ID = tv_show.tv_show_ID WHERE city_channel.ID = 1;\n"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": {
      "id": 149,
      "db_id": "tv_shows",
      "question": "Show the transmitters of the radios and the number of city channels they are associated with."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the transmitters of the radios and the number of city channels they are associated with.\n\nSELECT radio.City_channel_ID, radio.Transmitter, COUNT(city_channel.ID) AS num_city_channels\n"
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": {
      "id": 150,
      "db_id": "tv_shows",
      "question": "Show the distinct transmitters of radios that are not associated with any city channel."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the distinct transmitters of radios that are not associated with any city channel.\n\nSELECT radio.tv_show_ID FROM tv_show WHERE tv_show.tv_show_ID NOT IN (SELECT DISTINCT city_channel.ID FROM city_channel JOIN city_channel_radio ON city_channel.ID = city_channel_radio.City_channel_ID JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID);\n"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": {
      "id": 151,
      "db_id": "vehicle_driver",
      "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the model of the vehicle with maximum top speed whose power is higher than 6000?\n\nSELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Top_Speed > (SELECT MAX(vehicle_top_speed) FROM (SELECT vehicle.Top_Speed FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID GROUP BY vehicle.Vehicle_ID)) AND vehicle.Power > 6000;\n\n\n"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": {
      "id": 152,
      "db_id": "vehicle_driver",
      "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.\n\nSELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Top_Speed FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Power > 6000 ORDER BY vehicle.Top_Speed DESC LIMIT 1;\n\n"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": {
      "id": 153,
      "db_id": "vehicle_driver",
      "question": "What are the names of the drivers who are citizens of the 'United States'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the drivers who are citizens of the 'United States'?\n\nSELECT driver.Driver_ID, driver.Name FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Citizenship = 'United States';\n\n\n"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": {
      "id": 154,
      "db_id": "vehicle_driver",
      "question": "Return the names of drivers with citizenship from the United States."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the names of drivers with citizenship from the United States.\n\nSELECT driver.Driver_ID, driver.Name FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Citizenship = 'United States'\n\n\n"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": {
      "id": 155,
      "db_id": "vehicle_driver",
      "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?\n\nSELECT Driver_ID, COUNT(Vehicle_ID) AS num_driven FROM vehicle_driver GROUP BY Driver_ID ORDER BY num_driven DESC LIMIT 1;\n\n\n"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": {
      "id": 156,
      "db_id": "vehicle_driver",
      "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the id of the driver who has driven the most vehicles, and how many vehicles is this?\n\nSELECT Driver_ID, COUNT(Vehicle_ID) AS num_driven FROM vehicle_driver GROUP BY Driver_ID ORDER BY num_driven DESC LIMIT 1;\n\n"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": {
      "id": 157,
      "db_id": "vehicle_driver",
      "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?\n\nSELECT Vehicle_ID, MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'\n"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": {
      "id": 158,
      "db_id": "vehicle_driver",
      "question": "Return the maximum and average power for the vehicles built by Zhuzhou."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the maximum and average power for the vehicles built by Zhuzhou.\n\nSELECT vehicle.Driver_ID, MAX(vehicle.Power), AVG(vehicle.Power) FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Builder = 'Zhuzhou' GROUP BY vehicle.Driver_ID;\n\n"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": {
      "id": 159,
      "db_id": "vehicle_driver",
      "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the id of the vehicle driven for the least times for the vehicles ever used?\n\nSELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Racing_Series = 'F1') GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Racing_Series = 'F1'));\n\n\n"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": {
      "id": 160,
      "db_id": "vehicle_driver",
      "question": "Return the id of the vehicle that has been driven the fewest times."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the id of the vehicle that has been driven the fewest times.\n\nSELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver GROUP BY Driver_ID HAVING COUNT(*) = 1) ORDER BY Total_Production DESC LIMIT 1;\n"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": {
      "id": 161,
      "db_id": "vehicle_driver",
      "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the top speed and power of the vehicle manufactured in the year of 1996?\n\nSELECT vehicle.Vehicle_ID, vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = '1996'\n\n\n"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": {
      "id": 162,
      "db_id": "vehicle_driver",
      "question": "Return the top speed and power of the vehicle that was built in the year 1996."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the top speed and power of the vehicle that was built in the year 1996.\n\nSELECT vehicle.Vehicle_ID, vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = '1996'\n\n\n"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": {
      "id": 163,
      "db_id": "vehicle_driver",
      "question": "What are the build year, model name and builder of the vehicles?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the build year, model name and builder of the vehicles?\n\nSELECT vehicle.Vehicle_ID, vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle INNER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Driver_ID IN ( SELECT driver.Driver_ID FROM driver WHERE driver.Racing_Series = 'F1' ) ORDER BY vehicle.Vehicle_ID ASC;\n\n\n"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": {
      "id": 164,
      "db_id": "vehicle_driver",
      "question": "Give the build year, model, and builder of each vehicle."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the build year, model, and builder of each vehicle.\n\nSELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Build_Year, vehicle.Builder FROM vehicle INNER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Driver_ID = 1;\n\n"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": {
      "id": 165,
      "db_id": "vehicle_driver",
      "question": "How many drivers have driven vehicles built in 2012?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many drivers have driven vehicles built in 2012?\n\nSELECT driver.Driver_ID FROM vehicle_driver\n"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": {
      "id": 166,
      "db_id": "vehicle_driver",
      "question": "Count the number of different drivers who have driven vehicles built in 2012."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of different drivers who have driven vehicles built in 2012.\n\nSELECT driver.Driver_ID FROM vehicle_driver\n"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": {
      "id": 167,
      "db_id": "vehicle_driver",
      "question": "How many drivers have raced in 'NASCAR'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many drivers have raced in 'NASCAR'?\n\nSELECT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR';\n\n\n"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": {
      "id": 168,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers who have raced in NASCAR."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of drivers who have raced in NASCAR.\n\nSELECT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR';\n\n\n"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": {
      "id": 169,
      "db_id": "vehicle_driver",
      "question": "What is the average top speed of vehicles?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average top speed of vehicles?\n\nSELECT Vehicle_ID, AVG(Top_Speed) AS Average_Top_Speed FROM vehicle GROUP BY Vehicle_ID;\n\n"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": {
      "id": 170,
      "db_id": "vehicle_driver",
      "question": "Return the average top speed across all vehicles."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the average top speed across all vehicles.\n\nSELECT vehicle.Driver_ID, vehicle.Model, AVG(vehicle.Top_Speed) AS Average_Top_Speed FROM vehicle GROUP BY vehicle.Driver_ID, vehicle.Model;\n\n"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": {
      "id": 171,
      "db_id": "vehicle_driver",
      "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the distinct driver names who have driven vehicles with power more than 5000?\n\nSELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000) GROUP BY Driver_ID HAVING COUNT(Driver_ID)=1;\n\n"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": {
      "id": 172,
      "db_id": "vehicle_driver",
      "question": "Return the names of drivers who have driven vehicles with power over 5000."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the names of drivers who have driven vehicles with power over 5000.\n\nSELECT driver.Driver_ID, driver.Name FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE vehicle.Power > 5000;\n\n"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": {
      "id": 173,
      "db_id": "vehicle_driver",
      "question": "Which car models have total production larger than 100 or top speed higher than 150?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which car models have total production larger than 100 or top speed higher than 150?\n\nSELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE (vehicle.Total_Production > 100 OR vehicle.Top_Speed > 150);\n\n\n"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": {
      "id": 174,
      "db_id": "vehicle_driver",
      "question": "Give the models of cars that have a total production of over 100 or a top speed over 150."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the models of cars that have a total production of over 100 or a top speed over 150.\n\nSELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE (vehicle.Total_Production > 100) OR (vehicle.Top_Speed > 150);\n\n\n"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": {
      "id": 175,
      "db_id": "vehicle_driver",
      "question": "What are the model names and build year of the cars with 'DJ' in its model name?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the model names and build year of the cars with 'DJ' in its model name?\n\nSELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Build_Year FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Model LIKE '%DJ%';\n\n\n"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": {
      "id": 176,
      "db_id": "vehicle_driver",
      "question": "Return the model and build year of cars that include \"DJ\" in their model names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the model and build year of cars that include \"DJ\" in their model names.\n\nSELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Build_Year FROM vehicle WHERE vehicle.Model LIKE '%DJ%';\n\n\n"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": {
      "id": 177,
      "db_id": "vehicle_driver",
      "question": "What are the models which have not been driven by any drivers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the models which have not been driven by any drivers?\n\nSELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Driver_ID IS NULL;\n\n"
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": {
      "id": 178,
      "db_id": "vehicle_driver",
      "question": "Return the models of vehicles that have never been driven."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the models of vehicles that have never been driven.\n\nSELECT vehicle.Driver_ID FROM vehicle WHERE NOT EXISTS (SELECT * FROM driver WHERE driver.Driver_ID = vehicle.Driver_ID);\n\n\n"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": {
      "id": 179,
      "db_id": "vehicle_driver",
      "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.\n\nSELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) >= 2 OR Builder = 'Ziyang');\n\n\n"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": {
      "id": 180,
      "db_id": "vehicle_driver",
      "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.\n\nSELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE (SELECT COUNT(*) FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) = 2)) > 0 OR (SELECT COUNT(*) FROM builder WHERE builder.Builder_ID IN (SELECT builder.Builder_ID FROM builder JOIN vehicle ON builder.Builder_ID = vehicle.Builder_ID GROUP BY builder.Builder_ID HAVING COUNT(builder.Builder_ID) = 1 AND builder.Builder_ID = 'Ziyang')) > 0;\n\n\n"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": {
      "id": 181,
      "db_id": "vehicle_driver",
      "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?\n\nSELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2 OR Driver_ID = (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon'));\n\n"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": {
      "id": 182,
      "db_id": "vehicle_driver",
      "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.\n\nSELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE (SELECT COUNT(*) FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) > 2)) OR (SELECT COUNT(*) FROM driver WHERE driver.Name = 'Jeff Gordon') > 0;\n\n\n"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": {
      "id": 183,
      "db_id": "vehicle_driver",
      "question": "How many vehicles have maximum top speed?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many vehicles have maximum top speed?\n\nSELECT Vehicle_ID FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);\n\n\n"
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": {
      "id": 184,
      "db_id": "vehicle_driver",
      "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of vehicles that have a top speed equal to the maximum across all vehicles.\n\nSELECT Vehicle_ID FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);\n\n\n"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": {
      "id": 185,
      "db_id": "vehicle_driver",
      "question": "Show all driver names in the alphabetical order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all driver names in the alphabetical order.\n\nSELECT driver.Driver_ID, driver.Name FROM driver ORDER BY Name ASC;\n\n\n"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": {
      "id": 186,
      "db_id": "vehicle_driver",
      "question": "What are the names of drivers, returned in alphbetical order?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of drivers, returned in alphbetical order?\n\nSELECT driver.Driver_ID, driver.Name FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE vehicle_driver.Vehicle_ID = 1 ORDER BY Name ASC;\n\n\n"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": {
      "id": 187,
      "db_id": "vehicle_driver",
      "question": "How many drivers have been racing in each racing series?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many drivers have been racing in each racing series?\n\nSELECT driver.Driver_ID, COUNT(driver.Racing_Series) AS Count_of_drivers FROM driver GROUP BY driver.Racing_Series;\n\n\n"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": {
      "id": 188,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers that have raced in each series."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of drivers that have raced in each series.\n\nSELECT driver.Driver_ID, COUNT(driver.Racing_Series) AS num_drivers FROM driver GROUP BY driver.Racing_Series;\n\n"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": {
      "id": 189,
      "db_id": "vehicle_driver",
      "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?\n\nSELECT driver.Driver_ID, driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID WHERE vehicle.Model = 'DJ1'\n\n\n"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": {
      "id": 190,
      "db_id": "vehicle_driver",
      "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.\n\nSELECT driver.Driver_ID, driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID WHERE vehicle.Model = 'DJ1';\n\n\n"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": {
      "id": 191,
      "db_id": "vehicle_driver",
      "question": "How many drivers have not driven any cars?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many drivers have not driven any cars?\n\nSELECT Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver);\n\n\n"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": {
      "id": 192,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers who have not driven any vehicles."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of drivers who have not driven any vehicles.\n\nSELECT Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver);\n\n\n"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": {
      "id": 193,
      "db_id": "online_exams",
      "question": "How many exams are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many exams are there?\n\nSELECT Exams.Student_Answer_ID FROM Student_Answers WHERE Student_Answer_ID = 'A00001' AND Satisfactory_YN = 'Y'\n"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": {
      "id": 194,
      "db_id": "online_exams",
      "question": "Count the number of exams."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of exams.\n\nSELECT Exams.Student_Answer_ID, COUNT(*) AS Total_Students FROM Student_Answers GROUP BY Exam_ID HAVING COUNT(*) > 0;\n\n"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": {
      "id": 195,
      "db_id": "online_exams",
      "question": "List the distinct subject code of exams in ascending alphabetical order ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the distinct subject code of exams in ascending alphabetical order.\n\nSELECT Exams.Student_Answer_ID, Valid_Answers.Valid_Answer_Text FROM Student_Answers INNER JOIN Student_Assessments ON Student_Answers.Student_Answer_ID = Student_Assessments.Student_Answer_ID INNER JOIN Valid_Answers ON Student_Assessments.Valid_Answer_ID = Valid_Answers.Valid_Answer_ID WHERE Student_Answers.Question_ID = 2 AND Student_Answers.Exam_ID = 3 ORDER BY Student_Answers.Student_Answer_ID ASC\n\n"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": {
      "id": 196,
      "db_id": "online_exams",
      "question": "Give me an alphabetically ordered list of the distinct subject code for exams."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give me an alphabetically ordered list of the distinct subject code for exams.\n\nSELECT Exams.Student_Answer_ID FROM Student_Answers WHERE Student_Answer_ID = 'A00001' AND Satisfactory_YN = 'Y'\n"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": {
      "id": 197,
      "db_id": "online_exams",
      "question": "What are the names and dates of the exams with subject code that is not \"Database\"?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and dates of the exams with subject code that is not \"Database\"?\n\nSELECT Exams.Student_Answer_ID, Exam_Date FROM Student_Answers INNER JOIN Questions_in_Exams ON Student_Answers.Question_ID = Questions_in_Exams.Question_ID INNER JOIN Exams ON Questions_in_Exams.Exam_ID = Exams.Exam_ID WHERE Subject_Code!= 'Database' ORDER BY Exam_Date DESC;\n\n\n"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": {
      "id": 198,
      "db_id": "online_exams",
      "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?\n\nSELECT Exams.Student_Answer_ID, Exam_Date, Exam_Name FROM Student_Answers INNER JOIN Questions_in_Exams ON Student_Answers.Student_Answer_ID = Questions_in_Exams.Question_ID INNER JOIN Exams ON Questions_in_Exams.Exam_ID = Exams.Exam_ID WHERE Subject_Code!= 'Database' ORDER BY Exam_Date ASC;\n\n"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": {
      "id": 199,
      "db_id": "online_exams",
      "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the dates of the exams with subject code containing the word \"data\", in descending order of dates.\n\nSELECT Exams.Student_Answer_ID, Student_Answers.Student_Answer_Text, Student_Answers.Satisfactory_YN, Student_Answers.Assessment FROM Student_Answers INNER JOIN Student_Assessments ON Student_Answers.Student_Answer_ID = Student_Assessments.Student_Answer_ID WHERE Student_Answers.Question_ID IN (SELECT Questions_in_Exams.Question_ID FROM Questions_in_Exams INNER JOIN Questions ON Questions_in_Exams.Question_ID = Questions.Question_ID WHERE Questions.Type_of_Question_Code = 'MC') AND Student_Answers.Exam_ID IN (SELECT Questions_in_Exams.Exam_ID FROM Questions_in_Exams INNER JOIN Questions ON Questions_in_Exams.Question_ID = Questions.Question_ID WHERE Questions.Type_of_Question_Code = 'MC') ORDER BY Student_Answers.Date_of_Answer DESC;\n\n"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": {
      "id": 200,
      "db_id": "online_exams",
      "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.\n\nSELECT Exams.Student_Answer_ID, Student_Answers.Student_Answer_Text, Student_Answers.Satisfactory_YN, Student_Answers.Assessment FROM Student_Answers INNER JOIN Student_Assessments ON Student_Answers.Student_Answer_ID = Student_Assessments.Student_Answer_ID WHERE Student_Answers.Question_ID IN (SELECT Questions_in_Exams.Question_ID FROM Questions_in_Exams INNER JOIN Questions ON Questions_in_Exams.Question_ID = Questions.Question_ID WHERE Questions.Type_of_Question_Code = 'MCQ') AND Student_Answers.Exam_ID IN (SELECT Questions_in_Exams.Exam_ID FROM Questions_in_Exams INNER JOIN Questions ON Questions_in_Exams.Question_ID = Questions.Question_ID WHERE Questions.Type_of_Question_Code = 'MCQ') ORDER BY Student_Answers.Date_of_Answer DESC;\n\n"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": {
      "id": 201,
      "db_id": "online_exams",
      "question": "What are the type of questions and their counts?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the type of questions and their counts?\n\nSELECT Questions_in_Exams.Student_Answer_ID, Questions.Type_of_Question_Code, COUNT(*) AS Count FROM Questions_in_Exams JOIN Questions ON Questions.Question_ID = Questions_in_Exams.Question_ID GROUP BY Type_of_Question_Code ORDER BY Count DESC;\n\n"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": {
      "id": 202,
      "db_id": "online_exams",
      "question": "For each question type, return its type code and its count of occurrence."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each question type, return its type code and its count of occurrence.\n\nSELECT Questions_in_Exams.Student_Answer_ID, Questions.Type_of_Question_Code, COUNT(Questions_in_Exams.Question_ID) AS Count\n"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": {
      "id": 203,
      "db_id": "online_exams",
      "question": "What are the distinct student answer texts that received comments \"Normal\"?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the distinct student answer texts that received comments \"Normal\"?\n\nSELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text HAVING COUNT(*) > 1;\n\n"
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": {
      "id": 204,
      "db_id": "online_exams",
      "question": "List all the distinct student answer texts to which comments \"Normal\" were given?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all the distinct student answer texts to which comments \"Normal\" were given?\n\nSELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text HAVING COUNT(*) > 1;\n\n"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": {
      "id": 205,
      "db_id": "online_exams",
      "question": "How many different comments are there for student answers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many different comments are there for student answers?\n\nSELECT Student_Answer_ID, COUNT(DISTINCT Comments) AS Comment_Count FROM Student_Answers GROUP BY Student_Answer_ID HAVING COUNT(DISTINCT Comments)>1 ORDER BY Comment_Count DESC;\n\n"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": {
      "id": 206,
      "db_id": "online_exams",
      "question": "Count the number of different comments for student answers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of different comments for student answers.\n\nSELECT Student_Answer_ID, COUNT(DISTINCT Comments) AS Comment_Count FROM Student_Answers GROUP BY Student_Answer_ID ORDER BY Comment_Count DESC;\n\n"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": {
      "id": 207,
      "db_id": "online_exams",
      "question": "List all the student answer texts in descending order of count."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all the student answer texts in descending order of count.\n\nSELECT Student_Answer_Text FROM Student_Answers WHERE Satisfactory_YN = 'Y' GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC;\n\n"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": {
      "id": 208,
      "db_id": "online_exams",
      "question": "Sort the student answer texts in descending order of their frequency of occurrence."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Sort the student answer texts in descending order of their frequency of occurrence.\n\nSELECT Student_Answer_Text FROM Student_Answers WHERE Satisfactory_YN = 'Y' ORDER BY COUNT(*) DESC;\n\n"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": {
      "id": 209,
      "db_id": "online_exams",
      "question": "Please show the first names of students and the dates of their answers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Please show the first names of students and the dates of their answers.\n\nSELECT Students.Student_Answer_ID, Students.First_Name, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Students.Student_Answer_ID ASC;\n\n"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": {
      "id": 210,
      "db_id": "online_exams",
      "question": "For each student answer, find the first name of the student and the date of the answer."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each student answer, find the first name of the student and the date of the answer.\n\nSELECT Students.Student_Answer_ID, Students.First_Name, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Students.Student_Answer_ID ASC;\n\n"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": {
      "id": 211,
      "db_id": "online_exams",
      "question": "Please show the email addresses of students and the dates of their answers in descending order of dates."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Please show the email addresses of students and the dates of their answers in descending order of dates.\n\nSELECT Students.Student_Answer_ID, Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC;\n\n"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": {
      "id": 212,
      "db_id": "online_exams",
      "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.\n\nSELECT Students.Student_Answer_ID, Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC;\n\n"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": {
      "id": 213,
      "db_id": "online_exams",
      "question": "Please show the least common assessment for students."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Please show the least common assessment for students.\n\nSELECT Assessment FROM Student_Assessments WHERE Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers GROUP BY Student_Answer_ID HAVING COUNT(*) = 1)\n\n"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": {
      "id": 214,
      "db_id": "online_exams",
      "question": "Which assessment has the smallest frequency count?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which assessment has the smallest frequency count?\n\nSELECT Assessment, COUNT(*) AS Frequency_Count FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency_Count ASC LIMIT 1;\n\n"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": {
      "id": 215,
      "db_id": "online_exams",
      "question": "Please show the first names of the students that have at least two answer records."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Please show the first names of the students that have at least two answer records.\n\nSELECT Students.Student_Answer_ID, Students.First_Name FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID WHERE Student_Answers.Student_Answer_ID IN (SELECT Student_Answers.Student_Answer_ID FROM Student_Answers GROUP BY Student_Answers.Student_Answer_ID HAVING COUNT(Student_Answers.Student_Answer_ID)>1);\n\n\n"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": {
      "id": 216,
      "db_id": "online_exams",
      "question": "Which students have 2 or more answer records? Give me their first names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which students have 2 or more answer records? Give me their first names.\n\nSELECT Students.Student_Answer_ID, First_Name FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID WHERE Student_Answers.Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers GROUP BY Student_Answer_ID HAVING COUNT(Student_Answer_ID) >= 2);\n\n\n"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": {
      "id": 217,
      "db_id": "online_exams",
      "question": "What is the most common valid answer text?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the most common valid answer text?\n\nSELECT Valid_Answer_ID, COUNT(*) AS Count FROM Student_Assessments GROUP BY Valid_Answer_ID ORDER BY Count DESC LIMIT 1;\n\n"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": {
      "id": 218,
      "db_id": "online_exams",
      "question": "Find the valid answer text that appeared most frequently."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the valid answer text that appeared most frequently.\n\nSELECT Valid_Answer_ID, COUNT(*) AS Count FROM Student_Assessments GROUP BY Valid_Answer_ID ORDER BY Count DESC LIMIT 1;\n\n"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": {
      "id": 219,
      "db_id": "online_exams",
      "question": "List the last names of the students whose gender is not \"M\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the last names of the students whose gender is not \"M\".\n\nSELECT Students.Student_Answer_ID, Students.Last_Name FROM Students WHERE Students.Gender_MFU!= 'M';\n\n"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": {
      "id": 220,
      "db_id": "online_exams",
      "question": "What are the last names of the students with gender other than \"M\"?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the last names of the students with gender other than \"M\"?\n\nSELECT Students.Student_Answer_ID, Students.Last_Name FROM Students WHERE Students.Gender_MFU!= 'M' ORDER BY Students.Student_Answer_ID DESC;\n\n"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": {
      "id": 221,
      "db_id": "online_exams",
      "question": "List each gender and the corresponding number of students."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List each gender and the corresponding number of students.\n\nSELECT Students.Student_Answer_ID, Students.First_Name, Students.Last_Name, Students.Gender_MFU, COUNT(*) AS Number_Of_Students\n"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": {
      "id": 222,
      "db_id": "online_exams",
      "question": "For each gender, return the gender code and the number of students who identify as that gender."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each gender, return the gender code and the number of students who identify as that gender.\n\nSELECT Students.Student_Answer_ID, Students.Gender_MFU, COUNT(*) AS Number_Of_Students\n"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": {
      "id": 223,
      "db_id": "online_exams",
      "question": "List the last names of the students whose gender is \"F\" or \"M\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the last names of the students whose gender is \"F\" or \"M\".\n\nSELECT Students.Student_Answer_ID, Students.Last_Name FROM Students WHERE Students.Gender_MFU = 'F' OR Students.Gender_MFU = 'M';\n\n"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": {
      "id": 224,
      "db_id": "online_exams",
      "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which students identify their gender as \"F\" or \"M\"? Give me their last names.\n\nSELECT Students.Student_Answer_ID, Students.Last_Name FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID WHERE Students.Gender_MFU IN ('F', 'M') ORDER BY Students.Last_Name ASC;\n\n"
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": {
      "id": 225,
      "db_id": "online_exams",
      "question": "List the first names of the students who do not have any answers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the first names of the students who do not have any answers.\n\nSELECT Students.Student_Answer_ID FROM Students WHERE Students.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers);\n\n"
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": {
      "id": 226,
      "db_id": "online_exams",
      "question": "Which students do not have any answers? Find their first names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which students do not have any answers? Find their first names.\n\nSELECT Students.Student_Answer_ID FROM Students WHERE Students.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers);\n\n"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": {
      "id": 227,
      "db_id": "online_exams",
      "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.\n\nSELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Comments = 'Absent'\n\n"
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": {
      "id": 228,
      "db_id": "online_exams",
      "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which student answer texts were given both \"Normal\" and \"Absent\" as comments?\n\nSELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent') GROUP BY Student_Answer_Text HAVING COUNT(*) > 1;\n\n"
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": {
      "id": 229,
      "db_id": "online_exams",
      "question": "Show the types of questions that have at least three questions."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the types of questions that have at least three questions.\n\nSELECT Questions_in_Exams.Student_Answer_ID, Questions.Type_of_Question_Code FROM Questions_in_Exams JOIN Questions ON Questions.Question_ID = Questions_in_Exams.Question_ID WHERE Questions_in_Exams.Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers GROUP BY Student_Answer_ID HAVING COUNT(*) >= 3);\n\n\n"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": {
      "id": 230,
      "db_id": "online_exams",
      "question": "Which types of questions have 3 or more questions? Return the questions type code."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which types of questions have 3 or more questions? Return the questions type code.\n\nSELECT Questions_in_Exams.Student_Answer_ID, Questions.Type_of_Question_Code FROM Questions_in_Exams JOIN Questions ON Questions.Question_ID = Questions_in_Exams.Question_ID WHERE Questions_in_Exams.Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers GROUP BY Student_Answer_ID HAVING COUNT(*) >= 3);\n\n\n"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": {
      "id": 231,
      "db_id": "online_exams",
      "question": "Show all information on students."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all information on students.\n\nSELECT Students.Student_Answer_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Students.Gender_MFU, Students.Student_Address, Students.Email_Adress, Students.Cell_Mobile_Phone, Students.Home_Phone FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Students.Student_ID ASC;\n\n"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": {
      "id": 232,
      "db_id": "online_exams",
      "question": "What is al the available information of each student?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is al the available information of each student?\n\nSELECT Students.Student_Answer_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Students.Gender_MFU, Students.Student_Address, Students.Email_Adress, Students.Cell_Mobile_Phone, Students.Home_Phone FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID\n\n"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": {
      "id": 233,
      "db_id": "customers_and_orders",
      "question": "How many addresses do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many addresses do we have?\n\nSELECT Addresses.order_id FROM Addresses WHERE Addresses.address_id = Customers.address_id;\n"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": {
      "id": 234,
      "db_id": "customers_and_orders",
      "question": "Count the number of addresses."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of addresses.\n\nSELECT Addresses.order_id FROM Addresses WHERE Addresses.address_id = Customers.address_id;\n"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": {
      "id": 235,
      "db_id": "customers_and_orders",
      "question": "List all address ids and address details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all address ids and address details.\n\nSELECT Addresses.order_id, Addresses.address_details FROM Customer_Orders INNER JOIN Addresses ON Customer_Orders.customer_id = Addresses.customer_id;\n"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": {
      "id": 236,
      "db_id": "customers_and_orders",
      "question": "What are all the address ids and address details?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are all the address ids and address details?\n\nSELECT Addresses.order_id, Addresses.address_details FROM Customer_Orders INNER JOIN Addresses ON Customer_Orders.customer_id = Addresses.customer_id;\n"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": {
      "id": 237,
      "db_id": "customers_and_orders",
      "question": "How many products do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many products do we have?\n\nSELECT product_id FROM Products\n\n"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": {
      "id": 238,
      "db_id": "customers_and_orders",
      "question": "Count the number of products."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of products.\n\nSELECT product_id FROM Products\n\n"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": {
      "id": 239,
      "db_id": "customers_and_orders",
      "question": "Show all product ids, product type codes, and product name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all product ids, product type codes, and product name.\n\nSELECT product_id, product_type_code, product_name FROM Products;\n\n"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": {
      "id": 240,
      "db_id": "customers_and_orders",
      "question": "What are the ids, type codes, and names for all products?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids, type codes, and names for all products?\n\nSELECT product_id, product_type_code, product_name FROM Products;\n\n"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": {
      "id": 241,
      "db_id": "customers_and_orders",
      "question": "What is the price for the product with name Monitor?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the price for the product with name Monitor?\n\nSELECT product_id FROM Products WHERE product_name = 'Monitor';\n\n"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": {
      "id": 242,
      "db_id": "customers_and_orders",
      "question": "Give the price of the Monitor product."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the price of the Monitor product.\n\nSELECT product_id FROM Products WHERE product_name = 'Monitor';\n\n"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": {
      "id": 243,
      "db_id": "customers_and_orders",
      "question": "Show the minimum, average, maximum price for all products."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the minimum, average, maximum price for all products.\n\nSELECT product_id, MIN(product_price), AVG(product_price), MAX(product_price) FROM Products GROUP BY product_id;\n"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": {
      "id": 244,
      "db_id": "customers_and_orders",
      "question": "What are the minimum, average, and maximum prices across all products?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the minimum, average, and maximum prices across all products?\n\nSELECT product_id, MIN(product_price), AVG(product_price), MAX(product_price) FROM Products GROUP BY product_id;\n\n"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": {
      "id": 245,
      "db_id": "customers_and_orders",
      "question": "What is the average price for products with type Clothes?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average price for products with type Clothes?\n\nSELECT product_id, AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_id;\n\n"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": {
      "id": 246,
      "db_id": "customers_and_orders",
      "question": "Return the average price of Clothes."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the average price of Clothes.\n\nSELECT product_id, AVG(product_price) AS avg_price FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_id;\n"
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": {
      "id": 247,
      "db_id": "customers_and_orders",
      "question": "How many hardware type products do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many hardware type products do we have?\n\nSELECT product_id FROM Products WHERE product_type_code = 'hardware';\n\n"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": {
      "id": 248,
      "db_id": "customers_and_orders",
      "question": "Count the number of products of the type Hardware."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of products of the type Hardware.\n\nSELECT product_id FROM Products WHERE product_type_code = 'Hardware';\n\n"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": {
      "id": 249,
      "db_id": "customers_and_orders",
      "question": "Show all product names with price higher than the average."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all product names with price higher than the average.\n\nSELECT product_id, product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);\n"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": {
      "id": 250,
      "db_id": "customers_and_orders",
      "question": "What are the names of products that have a price above the average for all products."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of products that have a price above the average for all products.\n\nSELECT product_id, product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);\n"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": {
      "id": 251,
      "db_id": "customers_and_orders",
      "question": "Show all hardware product names with price higher than the average price of hardware type products."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all hardware product names with price higher than the average price of hardware type products.\n\nSELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware');\n\n"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": {
      "id": 252,
      "db_id": "customers_and_orders",
      "question": "What are the names of Hardware product with prices above the average price of Hardware products."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of Hardware product with prices above the average price of Hardware products.\n\nSELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware');\n\n"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": {
      "id": 253,
      "db_id": "customers_and_orders",
      "question": "What is the name of the most expensive product with type Clothes?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the most expensive product with type Clothes?\n\nSELECT product_id, product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;\n\n"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": {
      "id": 254,
      "db_id": "customers_and_orders",
      "question": "Give the name of the most expensive Clothes product."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the name of the most expensive Clothes product.\n\nSELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;\n\n"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": {
      "id": 255,
      "db_id": "customers_and_orders",
      "question": "What is the product id and product name for the cheapest Hardware type product?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the product id and product name for the cheapest Hardware type product?\n\nSELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware');\n\n"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": {
      "id": 256,
      "db_id": "customers_and_orders",
      "question": "Give the id and name of the cheapest Hardware product."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the id and name of the cheapest Hardware product.\n\nSELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;\n\n"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": {
      "id": 257,
      "db_id": "customers_and_orders",
      "question": "List all product names in descending order of price."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all product names in descending order of price.\n\nSELECT product_id, product_name FROM Products ORDER BY product_price DESC;\n\n"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": {
      "id": 258,
      "db_id": "customers_and_orders",
      "question": "What are the names of the products, sorted by descending price?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the products, sorted by descending price?\n\nSELECT product_id, product_name FROM Products ORDER BY product_price DESC;\n\n"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": {
      "id": 259,
      "db_id": "customers_and_orders",
      "question": "Show all hardware type products in ascending order of price."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all hardware type products in ascending order of price.\n\nSELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;\n\n"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": {
      "id": 260,
      "db_id": "customers_and_orders",
      "question": "What are the names of all Hardware products, sorted by price ascending?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all Hardware products, sorted by price ascending?\n\nSELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;\n\n"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": {
      "id": 261,
      "db_id": "customers_and_orders",
      "question": "List all product type codes and the number of products in each type."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all product type codes and the number of products in each type.\n\nSELECT product_id, product_type_code FROM Products;\n\n"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": {
      "id": 262,
      "db_id": "customers_and_orders",
      "question": "How many products are there for each product type?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many products are there for each product type?\n\nSELECT product_id, COUNT(*) AS num_products FROM Products GROUP BY product_type_code;\n\n"
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": {
      "id": 263,
      "db_id": "customers_and_orders",
      "question": "Show all product type codes and the average price for each type."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all product type codes and the average price for each type.\n\nSELECT product_id, AVG(product_price) FROM Products GROUP BY product_type_code;\n\n"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": {
      "id": 264,
      "db_id": "customers_and_orders",
      "question": "What is the average price of products for each product type?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average price of products for each product type?\n\nSELECT product_id, AVG(product_price) AS avg_product_price FROM Products GROUP BY product_type_code;\n\n"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": {
      "id": 265,
      "db_id": "customers_and_orders",
      "question": "What are the product type code with at least two products?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the product type code with at least two products?\n\nSELECT product_id FROM Products WHERE product_type_code IN (SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_type_code) > 1);\n"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": {
      "id": 266,
      "db_id": "customers_and_orders",
      "question": "Give the product type codes of product types that have two or more products."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the product type codes of product types that have two or more products.\n\nSELECT product_id FROM Products WHERE product_type_code IN (SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_type_code) > 1);\n"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": {
      "id": 267,
      "db_id": "customers_and_orders",
      "question": "What is the product type code with most number of products?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the product type code with most number of products?\n\nSELECT product_id FROM Products WHERE product_type_code = 'P1' ORDER BY product_id ASC;\n"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": {
      "id": 268,
      "db_id": "customers_and_orders",
      "question": "What is the most frequent product type code?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the most frequent product type code?\n\nSELECT product_id, product_type_code FROM Products ORDER BY product_id ASC;\n"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": {
      "id": 269,
      "db_id": "customers_and_orders",
      "question": "How many customers do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customers do we have?\n\nSELECT Customers.order_id FROM Customers WHERE order_id = '1' AND customer_id = '2';\n"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": {
      "id": 270,
      "db_id": "customers_and_orders",
      "question": "Count the number of customers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of customers.\n\nSELECT Customers.order_id FROM Customers WHERE order_id = (SELECT COUNT(*) FROM Customer_Orders);\n"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": {
      "id": 271,
      "db_id": "customers_and_orders",
      "question": "Show all customer ids and customer names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all customer ids and customer names.\n\nSELECT Customer_Orders.order_id, Customers.customer_id, Customers.customer_name FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id;\n\n"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": {
      "id": 272,
      "db_id": "customers_and_orders",
      "question": "What are the ids and names of all customers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids and names of all customers?\n\nSELECT Customer_Orders.order_id, Customers.customer_name FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id;\n\n"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": {
      "id": 273,
      "db_id": "customers_and_orders",
      "question": "What is the customer address, customer phone, and customer email for Jeromy?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the customer address, customer phone, and customer email for Jeromy?\n\nSELECT Addresses.order_id, Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeromy' AND Customer_Orders.order_id = 1;\n"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": {
      "id": 274,
      "db_id": "customers_and_orders",
      "question": "Give the address, phone, and email for customers with the name Jeromy."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the address, phone, and email for customers with the name Jeromy.\n\nSELECT Addresses.order_id, Customer_Orders.customer_id, Customers.address_id, Customers.payment_method_code, Customers.customer_number, Customers.customer_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id INNER JOIN Addresses ON Customers.address_id = Addresses.address_id WHERE Customers.customer_name = 'Jeromy';\n\n"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": {
      "id": 275,
      "db_id": "customers_and_orders",
      "question": "Show all payment method codes and the number of customers in each code."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all payment method codes and the number of customers in each code.\n\nSELECT product_id, product_name FROM Products WHERE product_price IS NULL;\n"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": {
      "id": 276,
      "db_id": "customers_and_orders",
      "question": "How many customers use each payment method?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customers use each payment method?\n\nSELECT Customers.order_id, COUNT(*) AS num_customers FROM Customer_Orders GROUP BY order_id;\n"
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": {
      "id": 277,
      "db_id": "customers_and_orders",
      "question": "What is the payment method code used by most number of customers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the payment method code used by most number of customers?\n\nSELECT Customers.order_id, Customers.payment_method_code FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customers.payment_method_code ORDER BY COUNT(Customers.payment_method_code) DESC LIMIT 1;\n"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": {
      "id": 278,
      "db_id": "customers_and_orders",
      "question": "Give the code of the payment method that is most commonly used."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the code of the payment method that is most commonly used.\n\nSELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'P' ORDER BY product_price DESC LIMIT 1;\n\n"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": {
      "id": 279,
      "db_id": "customers_and_orders",
      "question": "Show all customer names with the  payment method code used by least number of customers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all customer names with the  payment method code used by least number of customers.\n\nSELECT Customers.order_id, Customer_Orders.customer_id, Customer_Orders.order_date, Customer_Orders.order_status_code, Products.product_id, Order_items.order_quantity, Addresses.address_id, Addresses.address_details, Customers.payment_method_code, Customers.customer_number, Customers.customer_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id INNER JOIN Order_items ON Customer_Orders.order_id = Order_items.order_id INNER JOIN Products ON Order_items.product_id = Products.product_id INNER JOIN Addresses ON Customers.address_id = Addresses.address_id WHERE (Customers.payment_method_code) IN (SELECT MIN(Customers.payment_method_code) FROM Customers GROUP BY Customers.payment_method_code);\n"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": {
      "id": 280,
      "db_id": "customers_and_orders",
      "question": "What are the names of customers who use the least common payment method?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of customers who use the least common payment method?\n\nSELECT Customers.order_id, Customers.customer_name FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customer_Orders.order_status_code = 'Shipped' AND Customers.payment_method_code IN (SELECT DISTINCT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) < 2) ORDER BY Customers.customer_name ASC;\n\n"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": {
      "id": 281,
      "db_id": "customers_and_orders",
      "question": "What is the payment method and customer number for customer named Jeromy?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the payment method and customer number for customer named Jeromy?\n\nSELECT product_id, product_name, order_quantity FROM Order_items WHERE order_id = 1;\n"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": {
      "id": 282,
      "db_id": "customers_and_orders",
      "question": "Give the payment method code and customer number corresponding to the customer named Jeromy."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the payment method code and customer number corresponding to the customer named Jeromy.\n\nSELECT product_id FROM Products WHERE product_name = 'Jeromy';\n\n"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": {
      "id": 283,
      "db_id": "customers_and_orders",
      "question": "What are the distinct payment methods used by customers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the distinct payment methods used by customers?\n\nSELECT Customers.order_id, Customers.payment_method_code FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customers.payment_method_code HAVING COUNT(*) > 1;\n\n"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": {
      "id": 284,
      "db_id": "customers_and_orders",
      "question": "Give the different payment method codes that customers use."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the different payment method codes that customers use.\n\nSELECT Customers.order_id, Customers.payment_method_code FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id;\n"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": {
      "id": 285,
      "db_id": "customers_and_orders",
      "question": "Show the id and the product type for all products, order by product name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the id and the product type for all products, order by product name.\n\nSELECT Products.product_id, Products.product_type_code FROM Products ORDER BY Products.product_name;\n\n"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": {
      "id": 286,
      "db_id": "customers_and_orders",
      "question": "What are the ids and product types for all products, sorted alphabetically by product name?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids and product types for all products, sorted alphabetically by product name?\n\nSELECT product_id, product_type_code FROM Products ORDER BY product_name ASC;\n\n"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": {
      "id": 287,
      "db_id": "customers_and_orders",
      "question": "What is the product type with least number of products?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the product type with least number of products?\n\nSELECT product_id FROM Products WHERE product_type_code = 'P1' AND product_name = 'Product 1';\n"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": {
      "id": 288,
      "db_id": "customers_and_orders",
      "question": "What is the code of the product type that is least common?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the code of the product type that is least common?\n\nSELECT product_id FROM Products WHERE product_type_code = 'A' UNION SELECT product_id FROM Products WHERE product_type_code = 'B' UNION SELECT product_id FROM Products WHERE product_type_code = 'C' UNION SELECT product_id FROM Products WHERE product_type_code = 'D' UNION SELECT product_id FROM Products WHERE product_type_code = 'E' UNION SELECT product_id FROM Products WHERE product_type_code = 'F' UNION SELECT product_id FROM Products WHERE product_type_code = 'G' UNION SELECT product_id FROM Products WHERE product_type_code = 'H' UNION SELECT product_id FROM Products WHERE product_type_code = 'I' UNION SELECT product_id FROM Products WHERE product_type_code = 'J' UNION SELECT product_id FROM Products WHERE product_type_code = 'K' UNION SELECT product_id FROM Products WHERE product_type_code = 'L' UNION SELECT product_id FROM Products WHERE product_type_code = 'M' UNION SELECT product_id FROM Products WHERE product_type_code = 'N' UNION SELECT product_id FROM"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": {
      "id": 289,
      "db_id": "customers_and_orders",
      "question": "How many customer orders do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customer orders do we have?\n\nSELECT Customers.order_id FROM Customers WHERE Customers.customer_id = Customer_Orders.customer_id;\n"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": {
      "id": 290,
      "db_id": "customers_and_orders",
      "question": "Count the number of customer orders."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of customer orders.\n\nSELECT Customers.order_id FROM Customers WHERE Customers.customer_id = Customer_Orders.customer_id;\n"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": {
      "id": 291,
      "db_id": "customers_and_orders",
      "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the order ids, order dates, and order status codes for all orders by customer Jeromy.\n\nSELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy');\n\n"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": {
      "id": 292,
      "db_id": "customers_and_orders",
      "question": "What were the ids, dates, and status codes for orders made by Jeromy?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What were the ids, dates, and status codes for orders made by Jeromy?\n\nSELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy');\n\n"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": {
      "id": 293,
      "db_id": "customers_and_orders",
      "question": "Show all customer names, ids and the number of orders by each customer."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all customer names, ids and the number of orders by each customer.\n\nSELECT Customers.order_id, Customers.customer_id, COUNT(Customer_Orders.order_id) AS order_count FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customers.customer_id ORDER BY order_count DESC;\n\n"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": {
      "id": 294,
      "db_id": "customers_and_orders",
      "question": "What are the names, ids, and number of orders made for each customer?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names, ids, and number of orders made for each customer?\n\nSELECT Customers.order_id, Customers.customer_name, COUNT(Order_Items.order_id) AS order_count FROM Customer_Orders INNER JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customers.customer_name ORDER BY order_count DESC;\n"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": {
      "id": 295,
      "db_id": "customers_and_orders",
      "question": "What is the customer id, name, phone, and email for the customer with most orders?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the customer id, name, phone, and email for the customer with most orders?\n\nSELECT Customers.order_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id ORDER BY COUNT(Customer_Orders.order_id) DESC LIMIT 1;\n"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": {
      "id": 296,
      "db_id": "customers_and_orders",
      "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the id, name, phone, and email corresponding to the customer who made the most orders.\n\nSELECT Customers.order_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id ORDER BY COUNT(Customer_Orders.order_id) DESC LIMIT 1;\n"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": {
      "id": 297,
      "db_id": "customers_and_orders",
      "question": "Show all order status and the number of orders in each status."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all order status and the number of orders in each status.\n\nSELECT Order_Items.order_id, Customer_Orders.order_status_code, COUNT(Customer_Orders.order_status_code) AS 'Number of Orders'\n"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": {
      "id": 298,
      "db_id": "customers_and_orders",
      "question": "How many orders have each order status code?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many orders have each order status code?\n\nSELECT order_id, COUNT(*) AS num_orders FROM Customer_Orders GROUP BY order_status_code;\n\n"
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": {
      "id": 299,
      "db_id": "customers_and_orders",
      "question": "What is the order status code that is most common?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the order status code that is most common?\n\nSELECT Order_Items.order_id, Customer_Orders.order_status_code FROM Order_Items JOIN Customer_Orders ON Order_Items.order_id = Customer_Orders.order_id GROUP BY Order_Items.order_id ORDER BY COUNT(Order_Items.order_id) DESC LIMIT 1;\n\n"
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": {
      "id": 300,
      "db_id": "customers_and_orders",
      "question": "Give the order status code that is most frequent across customer orders."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the order status code that is most frequent across customer orders.\n\nSELECT Order_Items.order_id, Customer_Orders.order_status_code FROM Order_Items JOIN Customer_Orders ON Order_Items.order_id = Customer_Orders.order_id GROUP BY Order_Items.order_id ORDER BY COUNT(Customer_Orders.order_status_code) DESC LIMIT 1;\n\n"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": {
      "id": 301,
      "db_id": "customers_and_orders",
      "question": "How many customers do not have an order?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customers do not have an order?\n\nSELECT Customers.order_id FROM Customers WHERE Customer_orders.customer_id IS NULL;\n"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": {
      "id": 302,
      "db_id": "customers_and_orders",
      "question": "Count the number of customers who have not made an order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of customers who have not made an order.\n\nSELECT Customers.order_id FROM Customers WHERE Customer_Orders.order_id IS NULL;\n"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": {
      "id": 303,
      "db_id": "customers_and_orders",
      "question": "Show all product names without an order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all product names without an order.\n\nSELECT product_id, product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_items);\n"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": {
      "id": 304,
      "db_id": "customers_and_orders",
      "question": "What are the names of products that have not been ordered?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of products that have not been ordered?\n\nSELECT product_id FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_items);\n"
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": {
      "id": 305,
      "db_id": "customers_and_orders",
      "question": "How many products named Monitor have been ordered?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many products named Monitor have been ordered?\n\nSELECT product_id FROM Products WHERE product_name = 'Monitor';\n"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": {
      "id": 306,
      "db_id": "customers_and_orders",
      "question": "What is the total number of Monitor products that have been ordered?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the total number of Monitor products that have been ordered?\n\nSELECT product_id FROM Products WHERE product_type_code = 'Monitor';\n"
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": {
      "id": 307,
      "db_id": "customers_and_orders",
      "question": "How many customers have ordered the product named Monitor?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customers have ordered the product named Monitor?\n\nSELECT Customers.order_id FROM Customers WHERE Customers.customer_id = Order_items.order_id AND Order_items.product_id = Products.product_id AND Products.product_name = 'Monitor' GROUP BY Customers.customer_id HAVING COUNT(*) > 1;\n\n"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": {
      "id": 308,
      "db_id": "customers_and_orders",
      "question": "Count the number of different customers who have bought a Monitor Product."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of different customers who have bought a Monitor Product.\n\nSELECT Customers.order_id FROM Customers WHERE Customers.customer_id = Customer_Orders.customer_id AND Products.product_id = Order_items.product_id AND Products.product_name = 'Monitor' GROUP BY Customers.customer_id HAVING COUNT(*) > 1;\n"
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": {
      "id": 309,
      "db_id": "customers_and_orders",
      "question": "How many customers have an order?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customers have an order?\n\nSELECT Customers.order_id FROM Customers WHERE Customer_orders.order_id = '1' AND Customer_orders.customer_id = '2';\n"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": {
      "id": 310,
      "db_id": "customers_and_orders",
      "question": "Count the number of differnt customers who have made an order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of differnt customers who have made an order.\n\nSELECT Customers.order_id FROM Customers WHERE Customer_orders.order_id = '1' AND Customer_orders.customer_id = '2'\n"
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": {
      "id": 311,
      "db_id": "customers_and_orders",
      "question": "Show all customer ids without an order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all customer ids without an order.\n\nSELECT Customer_Orders.order_id FROM Customers WHERE Customer_Orders.customer_id = 1;\n"
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": {
      "id": 312,
      "db_id": "customers_and_orders",
      "question": "What are the ids of customers who have not made an order?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids of customers who have not made an order?\n\nSELECT Customer_Orders.order_id FROM Customers WHERE Customers.customer_id = Customer_Orders.customer_id AND Customer_Orders.order_id IS NULL;\n\n"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": {
      "id": 313,
      "db_id": "customers_and_orders",
      "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.\n\nSELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_items WHERE order_quantity > 6 OR order_quantity > 3);\n"
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": {
      "id": 314,
      "db_id": "customers_and_orders",
      "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?\n\nSELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_items WHERE order_quantity > '6' OR order_quantity > '3') ORDER BY order_id ASC;\n\n"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": {
      "id": 315,
      "db_id": "region_building",
      "question": "How many buildings are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many buildings are there?\n\nSELECT building.Name FROM building WHERE building.Number_of_Stories > 10;\n\n\n"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": {
      "id": 316,
      "db_id": "region_building",
      "question": "Count the number of buildings."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of buildings.\n\nSELECT building.Name FROM building WHERE building.Number_of_Stories > 10;\n\n\n"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": {
      "id": 317,
      "db_id": "region_building",
      "question": "List the names of buildings in ascending order of number of stories."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of buildings in ascending order of number of stories.\n\nSELECT Name FROM building WHERE Number_of_Stories = (SELECT MIN(Number_of_Stories) FROM building);\n\n\n"
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": {
      "id": 318,
      "db_id": "region_building",
      "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the list of building names, sorted by the number of stories of each building in ascending order?\n\nSELECT Name FROM building WHERE Number_of_Stories IN (SELECT MIN(Number_of_Stories) FROM building GROUP BY Region_ID ORDER BY MIN(Number_of_Stories)) ORDER BY Number_of_Stories ASC;\n\n\n"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": {
      "id": 319,
      "db_id": "region_building",
      "question": "List the addresses of buildings in descending order of building completion year."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the addresses of buildings in descending order of building completion year.\n\nSELECT building.Name, building.Address FROM building ORDER BY Completed_Year DESC;\n\n\n"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": {
      "id": 320,
      "db_id": "region_building",
      "question": "Sort the buildings in descending order of building completion year, and return the building addresses."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Sort the buildings in descending order of building completion year, and return the building addresses.\n\nSELECT building.Name FROM building WHERE building.Completed_Year = (SELECT MAX(building2.Completed_Year) FROM building AS building2);\n\n\n"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": {
      "id": 321,
      "db_id": "region_building",
      "question": "What is the maximum number of stories of buildings not completed in 1980?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the maximum number of stories of buildings not completed in 1980?\n\nSELECT Name FROM building WHERE Completed_Year!= 1980 ORDER BY Number_of_Stories DESC LIMIT 1;\n\n"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": {
      "id": 322,
      "db_id": "region_building",
      "question": "Among the buildings not completed in 1980, what is the maximum number of stories?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Among the buildings not completed in 1980, what is the maximum number of stories?\n\nSELECT Name FROM building WHERE Completed_Year!= 1980 ORDER BY Number_of_Stories DESC LIMIT 1;\n\n\n"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": {
      "id": 323,
      "db_id": "region_building",
      "question": "What is the average population for all regions?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average population for all regions?\n\nSELECT Region_ID, AVG(Population) AS Average_Population FROM region GROUP BY Region_ID;\n\n\n"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": {
      "id": 324,
      "db_id": "region_building",
      "question": "Compute the average population of a region."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Compute the average population of a region.\n\nSELECT Region_ID, AVG(Population) AS Average_Population FROM region GROUP BY Region_ID;\n\n"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": {
      "id": 325,
      "db_id": "region_building",
      "question": "What are the names of regions in ascending alphabetical order?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of regions in ascending alphabetical order?\n\nSELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building ORDER BY Building_ID ASC);\n\n\n"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": {
      "id": 326,
      "db_id": "region_building",
      "question": "List the names of regions in alphabetical order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of regions in alphabetical order.\n\nSELECT Name FROM region\n\n\n"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": {
      "id": 327,
      "db_id": "region_building",
      "question": "What are the capitals of the regions with area bigger than 10000?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the capitals of the regions with area bigger than 10000?\n\nSELECT region.Capital FROM building\n"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": {
      "id": 328,
      "db_id": "region_building",
      "question": "Give me the capitals of the regions whose area is larger than 10000."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give me the capitals of the regions whose area is larger than 10000.\n\nSELECT region.Capital FROM building\n"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": {
      "id": 329,
      "db_id": "region_building",
      "question": "List the capital of the region with the largest population."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the capital of the region with the largest population.\n\nSELECT Capital FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1);\n\n\n"
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": {
      "id": 330,
      "db_id": "region_building",
      "question": "Which region has the largest population? Give me the capital of the region."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which region has the largest population? Give me the capital of the region.\n\nSELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM region ORDER BY Population DESC LIMIT 1);\n\n\n"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": {
      "id": 331,
      "db_id": "region_building",
      "question": "List the names of the regions with the top 5 largest areas."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of the regions with the top 5 largest areas.\n\nSELECT Name FROM region WHERE Area IN (SELECT MAX(Area) FROM region GROUP BY Region_ID LIMIT 5);\n\n\n"
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": {
      "id": 332,
      "db_id": "region_building",
      "question": "What are the names of the 5 largest regions in terms of area?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the 5 largest regions in terms of area?\n\nSELECT Name FROM region WHERE Area IN (SELECT MAX(Area) FROM region GROUP BY Region_ID LIMIT 5);\n\n\n"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": {
      "id": 333,
      "db_id": "region_building",
      "question": "Show the names of buildings and the names of regions they are in."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the names of buildings and the names of regions they are in.\n\nSELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;\n\n\n"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": {
      "id": 334,
      "db_id": "region_building",
      "question": "For each building, return the name of the building and the name of the region it belongs to."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each building, return the name of the building and the name of the region it belongs to.\n\nSELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;\n\n\n"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": {
      "id": 335,
      "db_id": "region_building",
      "question": "Show the names of regions that have more than one building."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the names of regions that have more than one building.\n\nSELECT Name FROM region WHERE Region_ID IN (SELECT DISTINCT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1);\n\n\n"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": {
      "id": 336,
      "db_id": "region_building",
      "question": "Which regions have more than one building? Give me the names of the regions."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which regions have more than one building? Give me the names of the regions.\n\nSELECT Name FROM region WHERE Region_ID IN (SELECT DISTINCT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1);\n\n\n"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": {
      "id": 337,
      "db_id": "region_building",
      "question": "Show the capital of the region that has the most buildings."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the capital of the region that has the most buildings.\n\nSELECT region.Capital FROM building\n"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": {
      "id": 338,
      "db_id": "region_building",
      "question": "Which region has the largest number of buildings? Show me the capital of the region."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which region has the largest number of buildings? Show me the capital of the region.\n\nSELECT region.Capital FROM building\n"
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": {
      "id": 339,
      "db_id": "region_building",
      "question": "Show addresses of buildings and the capitals of regions they are in."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show addresses of buildings and the capitals of regions they are in.\n\nSELECT building.Name, region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID;\n\n\n"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": {
      "id": 340,
      "db_id": "region_building",
      "question": "For each building, return the address of the building and the name of the region it belongs to."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each building, return the address of the building and the name of the region it belongs to.\n\nSELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;\n\n\n"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": {
      "id": 341,
      "db_id": "region_building",
      "question": "Show the number of stories of buildings in the region with name \"Abruzzo\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the number of stories of buildings in the region with name \"Abruzzo\".\n\nSELECT building.Name, building.Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo';\n\n\n"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": {
      "id": 342,
      "db_id": "region_building",
      "question": "Return the number of stories for each building in the region named \"Abruzzo\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the number of stories for each building in the region named \"Abruzzo\".\n\nSELECT building.Name, building.Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo';\n\n\n"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": {
      "id": 343,
      "db_id": "region_building",
      "question": "Please show each completion year and the number of buildings completed in that year."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Please show each completion year and the number of buildings completed in that year.\n\nSELECT building.Region_ID, building.Completed_Year, COUNT(*) AS num_buildings\n"
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": {
      "id": 344,
      "db_id": "region_building",
      "question": "For completion year, return the year and the number of buildings completed."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For completion year, return the year and the number of buildings completed.\n\nSELECT building.Region_ID, building.Completed_Year, COUNT(*) AS num_buildings\n"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": {
      "id": 345,
      "db_id": "region_building",
      "question": "List the year in which the most buildings are completed."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the year in which the most buildings are completed.\n\nSELECT building.Region_ID, building.Completed_Year, COUNT(*) AS num_buildings\n"
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": {
      "id": 346,
      "db_id": "region_building",
      "question": "In which year did the most building constructions complete?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: In which year did the most building constructions complete?\n\nSELECT building.Region_ID, region.Name, COUNT(*) AS num_buildings, MAX(Completed_Year) AS max_year\n"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": {
      "id": 347,
      "db_id": "region_building",
      "question": "List the names of regions that do not have any buildings."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of regions that do not have any buildings.\n\nSELECT Name FROM region WHERE Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building);\n\n\n"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": {
      "id": 348,
      "db_id": "region_building",
      "question": "What are the names of regions in which there are no buildings?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of regions in which there are no buildings?\n\nSELECT Name FROM region WHERE Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building);\n\n\n"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": {
      "id": 349,
      "db_id": "region_building",
      "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.\n\nSELECT building.Region_ID, building.Name, building.Address, building.Number_of_Stories, building.Completed_Year FROM building WHERE (building.Number_of_Stories > 20) OR (building.Number_of_Stories < 15);\n\n\n"
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": {
      "id": 350,
      "db_id": "region_building",
      "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?\n\nSELECT building.Region_ID, region.Name, building.Completed_Year FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE (building.Number_of_Stories > 20) AND (building.Number_of_Stories < 15);\n\n\n"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": {
      "id": 351,
      "db_id": "region_building",
      "question": "Show the distinct addresses of buildings."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the distinct addresses of buildings.\n\nSELECT building.Name, building.Address FROM building GROUP BY building.Address HAVING COUNT(*) = 1;\n\n\n"
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": {
      "id": 352,
      "db_id": "region_building",
      "question": "Give me a list of distinct building addresses."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give me a list of distinct building addresses.\n\nSELECT building.Name, building.Address FROM building GROUP BY building.Address HAVING COUNT(*) = 1;\n\n\n"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": {
      "id": 353,
      "db_id": "region_building",
      "question": "Show the completed years of buildings in descending order of the number of stories."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the completed years of buildings in descending order of the number of stories.\n\nSELECT building.Region_ID, building.Name, building.Number_of_Stories, building.Completed_Year FROM building ORDER BY Number_of_Stories DESC;\n\n\n"
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": {
      "id": 354,
      "db_id": "region_building",
      "question": "Sort buildings in descending order of the number of stories, and return their completion years."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"building\" (\n\"Building_ID\" int,\n\"Region_ID\" int,\n\"Name\" text,\n\"Address\" text,\n\"Number_of_Stories\" int,\n\"Completed_Year\" int,\nPRIMARY KEY (\"Building_ID\"),\nFOREIGN KEY (\"Region_ID\") REFERENCES \"region\"(\"Region_ID\")\n)\nCREATE TABLE \"region\" (\n\"Region_ID\" int,\n\"Name\" text,\n\"Capital\" text,\n\"Area\" int,\n\"Population\" int,\nPRIMARY KEY (\"Region_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Sort buildings in descending order of the number of stories, and return their completion years.\n\nSELECT building.Region_ID, building.Name, building.Completed_Year FROM building ORDER BY Number_of_Stories DESC;\n\n\n"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": {
      "id": 355,
      "db_id": "government_shift",
      "question": "List details of all the channel in alphabetical order ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List details of all the channel in alphabetical order.\n\nSELECT Channels.Customers_and_Services_ID, Channel_Details FROM Channels INNER JOIN Customer_Interactions ON Channels.Channel_ID = Customer_Interactions.Channel_ID ORDER BY Channel_Details ASC;\n\n"
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": {
      "id": 356,
      "db_id": "government_shift",
      "question": "What is the list of channel details ordered alphabetically ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the list of channel details ordered alphabetically?\n\nSELECT Channels.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID = 1 ORDER BY Channel_Details ASC;\n\n"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": {
      "id": 357,
      "db_id": "government_shift",
      "question": "How many services are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many services are there?\n\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID = 1;\n\n"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": {
      "id": 358,
      "db_id": "government_shift",
      "question": "Count the number of services."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of services.\n\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID = 1;\n\n"
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": {
      "id": 359,
      "db_id": "government_shift",
      "question": "What is the most common analytical layer type code?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the most common analytical layer type code?\n\nSELECT Analytical_Layer_Type_Code FROM Analytical_Layer WHERE Pattern_Recognition = 'Most Common' GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;\n"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": {
      "id": 360,
      "db_id": "government_shift",
      "question": "Find the analytical layer type code that appears most often."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the analytical layer type code that appears most often.\n\nSELECT Analytical_Layer_Type_Code FROM Analytical_Layer WHERE Pattern_Recognition = 'Most Common' ORDER BY COUNT(*) DESC LIMIT 1;\n\n"
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": {
      "id": 361,
      "db_id": "government_shift",
      "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find all the services that has been used by the customer with details \"Hardy Kutch\".\n\nSELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Service_ID IN (SELECT Service_ID FROM Services);\n\n\n"
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": {
      "id": 362,
      "db_id": "government_shift",
      "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.\n\nSELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') ORDER BY Service_ID ASC;\n\n"
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": {
      "id": 363,
      "db_id": "government_shift",
      "question": "Find the details of the services that have been used by more than 3 times ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the details of the services that have been used by more than 3 times.\n\nSELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_ID IN (SELECT Customers_and_Services.Customers_and_Services_ID FROM Customers_and_Services GROUP BY Customers_and_Services.Customers_and_Services_ID HAVING COUNT(*) > 3);\n\n\n"
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": {
      "id": 364,
      "db_id": "government_shift",
      "question": "Which services were used by customers by more than 3 times? Give me the service details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which services were used by customers by more than 3 times? Give me the service details.\n\nSELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_ID IN (SELECT Customers_and_Services.Customers_and_Services_ID FROM Customers_and_Services GROUP BY Customers_and_Services.Customers_and_Services_ID HAVING COUNT(*) > 3);\n\n\n"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": {
      "id": 365,
      "db_id": "government_shift",
      "question": "Find the details of the customer who has used services the most times."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the details of the customer who has used services the most times.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, COUNT(*) AS Count FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customer_Interaction.Customer_ID ORDER BY Count DESC LIMIT 1;\n\n"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": {
      "id": 366,
      "db_id": "government_shift",
      "question": "return the details of the customer with largest count of used services."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: return the details of the customer with largest count of used services.\n\nSELECT Customers_and_Services.Customers_and_Services_ID, Customers_and_Services.Customers_and_Services_Details, COUNT(*) AS Count_of_used_services FROM Customers_and_Services INNER JOIN Customer_Interactions ON Customers_and_Services.Customer_ID = Customer_Interactions.Customer_ID GROUP BY Customers_and_Services.Customer_ID ORDER BY Count_of_used_services DESC LIMIT 1;\n\n"
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": {
      "id": 367,
      "db_id": "government_shift",
      "question": "Find the name of the customer who has used the most types of services ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name of the customer who has used the most types of services.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, COUNT(*) AS Count FROM Customer_Interactions JOIN Customers ON Customer_Interactions.Customer_ID = Customers.Customer_ID GROUP BY Customer_Interaction.Customer_ID ORDER BY Count DESC LIMIT 1;\n\n"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": {
      "id": 368,
      "db_id": "government_shift",
      "question": "Which customer has used the most types of services ? Give me the customer details ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which customer has used the most types of services? Give me the customer details.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, COUNT(*) AS Count FROM Customer_Interactions JOIN Customers ON Customer_Interactions.Customer_ID = Customers.Customer_ID GROUP BY Customer_Interaction.Customer_ID ORDER BY Count DESC LIMIT 1;\n\n"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": {
      "id": 369,
      "db_id": "government_shift",
      "question": "Find the details of the customer who has never used any services ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the details of the customer who has never used any services.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_Details FROM Customer_Interaction INNER JOIN Customers_and_Services ON Customer_Interaction.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID WHERE Customer_Interaction.Status_Code!= 'Used' AND Customers_and_Services.Customer_ID = 1;\n\n"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": {
      "id": 370,
      "db_id": "government_shift",
      "question": "Which customers never used any services ? Give me the customer details ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which customers never used any services? Give me the customer details.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, Customers.Customer_Details FROM Customers INNER JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID LEFT OUTER JOIN Customer_Interactions ON Customers_and_Services.Customers_and_Services_ID = Customer_Interactions.Services_and_Channels_Details WHERE Customer_Interactions.Status_Code IS NULL;\n"
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": {
      "id": 371,
      "db_id": "government_shift",
      "question": "Find the details of the customers who have used the least-used service ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the details of the customers who have used the least-used service.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, Customers.Customer_Details, Services.Service_Details FROM Customers_and_Services INNER JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID INNER JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID INNER JOIN Customer_Interactions ON Customers_and_Services.Customers_and_Services_ID = Customer_Interactions.Services_and_Channels_Details WHERE Customer_Interactions.Status_Code = 'Completed' ORDER BY COUNT(Customer_Interactions.Services_and_Channels_Details) ASC LIMIT 1;\n\n"
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": {
      "id": 372,
      "db_id": "government_shift",
      "question": "Which customers used the least commonly-used service ? Give me the distinct customer details ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which customers used the least commonly-used service? Give me the distinct customer details.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID WHERE Service_ID IN (SELECT Service_ID FROM Services GROUP BY Service_ID HAVING COUNT(*)=1);\n\n\n"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": {
      "id": 373,
      "db_id": "government_shift",
      "question": "How many distinct customer and services details are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many distinct customer and services details are there?\n\nSELECT Customers_and_Services.Customers_and_Services_ID, COUNT(DISTINCT Customers_and_Services.Customers_and_Services_Details), COUNT(DISTINCT Customers_and_Services.Service_ID) FROM Customers_and_Services GROUP BY Customers_and_Services.Customer_ID HAVING COUNT(*) > 1;\n"
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": {
      "id": 374,
      "db_id": "government_shift",
      "question": "Count the total number of available customers and services details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the total number of available customers and services details.\n\nSELECT Services.Customers_and_Services_ID, COUNT(*) AS Total_Number_of_Available_Customers_and_Services_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Customers_and_Services.Customers_and_Services_ID HAVING COUNT(*) > 1;\n"
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": {
      "id": 375,
      "db_id": "government_shift",
      "question": "Find all the customers whose name contains \"Kutch\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find all the customers whose name contains \"Kutch\".\n\nSELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Channel_ID = 1 AND Status_Code = 'Completed' AND Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Details LIKE '%Kutch%'));\n\n\n"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": {
      "id": 376,
      "db_id": "government_shift",
      "question": "What are the details of the customers who have \"Kutch\" in part of their details?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the details of the customers who have \"Kutch\" in part of their details?\n\nSELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID WHERE Customer_Interactions.Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details LIKE '%Kutch%') AND Customer_Interactions.Status_Code='Success' ORDER BY Customer_Interaction.Customer_ID ASC;\n\n"
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": {
      "id": 377,
      "db_id": "government_shift",
      "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.\n\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'Good'));\n\n\n"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": {
      "id": 378,
      "db_id": "government_shift",
      "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.\n\nSELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details LIKE 'Hardy%') OR Status_Code = 'Good' ORDER BY Service_Details ASC;\n\n"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": {
      "id": 379,
      "db_id": "government_shift",
      "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.\n\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Pattern_Recognition LIKE '%bad%'));\n\n\n"
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": {
      "id": 380,
      "db_id": "government_shift",
      "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.\n\nSELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details LIKE 'Hardy%') AND Customers_and_Services.Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Pattern_Recognition LIKE '%bad%' AND Analytical_Layer_Type_Code='Rating');\n\n\n"
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": {
      "id": 381,
      "db_id": "government_shift",
      "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find details of all the services that have interacted with `` 15 ij '' for the the channel details.\n\nSELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details LIKE '%15%ij%') AND Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Customer_Interactions WHERE Status_Code='Active' AND Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details LIKE '%15%ij%')) ORDER BY Service_Details ASC;\n\n"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": {
      "id": 382,
      "db_id": "government_shift",
      "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give me the details of all the services that have interacted with the channel with detail \"15 ij\".\n\nSELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij') AND Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Customer_Interactions INNER JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Status_Code = 'Completed' AND Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Google%')) ORDER BY Service_ID ASC;\n\n\n"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": {
      "id": 383,
      "db_id": "government_shift",
      "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad ''.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, Customer_Interactions.Services_and_Channels_Details, Customer_Interactions.Status_Code FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customer_ID = Customers_and_Services.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details LIKE '%bad%';\n\n\n"
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": {
      "id": 384,
      "db_id": "government_shift",
      "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, Customers.Customer_Details FROM Customer_Interactions INNER JOIN Customers_and_Services ON Customer_Interactions.Customer_ID = Customers_and_Services.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details LIKE '%bad%';\n"
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": {
      "id": 385,
      "db_id": "government_shift",
      "question": "How many integration platforms are successful?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many integration platforms are successful?\n\nSELECT Integration_Platform.Customers_and_Services_ID FROM Integration_Platform WHERE Integration_Platform.Status_Code = 'Successful' GROUP BY Integration_Platform.Customeer_ID HAVING COUNT(*) > 1;\n\n"
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": {
      "id": 386,
      "db_id": "government_shift",
      "question": "Count the number of integration platforms that have \"Success\" in the details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of integration platforms that have \"Success\" in the details.\n\nSELECT Integration_Platform.Analytical_Layer_Type_Code FROM Integration_Platform WHERE Integration_Platform.Integration_Platform_Details LIKE '%Success%';\n"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": {
      "id": 387,
      "db_id": "government_shift",
      "question": "List the details of all the customers who are associated with a failed integration platform ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the details of all the customers who are associated with a failed integration platform.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, Customers.Customer_Details, Services.Service_Details, Integration_Platform.Integration_Platform_Details FROM Customers_and_Services INNER JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID INNER JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID INNER JOIN Customer_Interaction ON Customers_and_Services.Customers_and_Services_ID = Customer_Interaction.Services_and_Channels_Details INNER JOIN Integration_Platform ON Customer_Interaction.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform_Integration_Platform_Details LIKE '%failed%' ORDER BY Customers_and_Services_Customers_and_Services_ID ASC;\n\n"
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": {
      "id": 388,
      "db_id": "government_shift",
      "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.\n\nSELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID WHERE Integration_Platform.Integration_Platform_Details = 'Fail' AND Customer_Interactions.Status_Code = 'Success';\n\n\n"
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": {
      "id": 389,
      "db_id": "government_shift",
      "question": "Which service ( s ) has never been used by any customer ? List their details ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which service ( s ) has never been used by any customer? List their details.\n\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID IN ( SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) = 0 )\n\n\n"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": {
      "id": 390,
      "db_id": "government_shift",
      "question": "Find details of the services that no customer has ever used . Return the service details ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find details of the services that no customer has ever used. Return the service details.\n\nSELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IS NULL);\n\n"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": {
      "id": 391,
      "db_id": "government_shift",
      "question": "Find all the layer type codes with their corresponding usage count."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find all the layer type codes with their corresponding usage count.\n\nSELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Usage_Count DESC;\n\n"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": {
      "id": 392,
      "db_id": "government_shift",
      "question": "For each analytical layer, return the analytical layer type code and the number of times it was used."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each analytical layer, return the analytical layer type code and the number of times it was used.\n\nSELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Count DESC;\n"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": {
      "id": 393,
      "db_id": "government_shift",
      "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find details of all the services that have been marked as `` unsatisfied '' in customers and services details.\n\nSELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%unsatisfied%';\n\n\n"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": {
      "id": 394,
      "db_id": "government_shift",
      "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n)\nCREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n)\nCREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n)\nCREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n)\nCREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n)\nCREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.\n\nSELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%unsatisfied%';\n\n\n"
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": {
      "id": 395,
      "db_id": "vehicle_rent",
      "question": "How many vehicles do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many vehicles do we have?\n\nSELECT vehicles_id FROM Renting_history\n\n"
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": {
      "id": 396,
      "db_id": "vehicle_rent",
      "question": "Count the number of vehicles."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of vehicles.\n\nSELECT id FROM Vehicles\n\n"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": {
      "id": 397,
      "db_id": "vehicle_rent",
      "question": "Show names for all vehicles in descending order of model year."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show names for all vehicles in descending order of model year.\n\nSELECT Vehicles.id, Vehicles.name FROM Vehicles ORDER BY Model_year DESC;\n\n\n"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": {
      "id": 398,
      "db_id": "vehicle_rent",
      "question": "What are the names of all vehicles, ordered by model year descending?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all vehicles, ordered by model year descending?\n\nSELECT Vehicles.id, Vehicles.name FROM Vehicles ORDER BY Model_year DESC;\n\n\n"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": {
      "id": 399,
      "db_id": "vehicle_rent",
      "question": "List all distinct types of powertrain of vehicles."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all distinct types of powertrain of vehicles.\n\nSELECT vehicles_id, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain;\n\n\n"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": {
      "id": 400,
      "db_id": "vehicle_rent",
      "question": "What are the different types of powertrains?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different types of powertrains?\n\nSELECT vehicles_id, Type_of_powertrain FROM Vehicles GROUP BY vehicles_id HAVING COUNT(*) > 1 ORDER BY vehicles_id ASC;\n\n"
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": {
      "id": 401,
      "db_id": "vehicle_rent",
      "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.\n\nSELECT Vehicles.id, Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE (Vehicles.Model_year = 2013 OR Vehicles.Model_year = 2014);\n\n\n"
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": {
      "id": 402,
      "db_id": "vehicle_rent",
      "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?\n\nSELECT Vehicles.id, Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year = 2013 OR Vehicles.Model_year = 2014;\n\n"
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": {
      "id": 403,
      "db_id": "vehicle_rent",
      "question": "Show types of powertrain with vehicles both from 2014 and 2013."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show types of powertrain with vehicles both from 2014 and 2013.\n\nSELECT Vehicles.id, Vehicles.name, Type_of_powertrain FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Model_year IN (2014, 2013) GROUP BY Type_of_powertrain HAVING COUNT(*) > 1\n\n\n"
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": {
      "id": 404,
      "db_id": "vehicle_rent",
      "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the types of powertrains that have vehicles that were made in both 2013 and 2014?\n\nSELECT total_hours FROM Renting_history WHERE customer_id = 1 AND discount_id = 2 AND vehicles_id = 5;\n\n"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": {
      "id": 405,
      "db_id": "vehicle_rent",
      "question": "Show all types of powertrain and the number of vehicles in each type."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all types of powertrain and the number of vehicles in each type.\n\nSELECT Vehicles.id, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain;\n\n\n"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": {
      "id": 406,
      "db_id": "vehicle_rent",
      "question": "How many vehicles have each type of powertrain?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many vehicles have each type of powertrain?\n\nSELECT Vehicles.id, Type_of_powertrain, COUNT(*) AS num_vehicles\n"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": {
      "id": 407,
      "db_id": "vehicle_rent",
      "question": "What is the type of powertrain with most number of vehicles."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the type of powertrain with most number of vehicles.\n\nSELECT vehicles_id FROM Vehicles WHERE Type_of_powertrain = 'Gasoline' ORDER BY id DESC LIMIT 1;\n"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": {
      "id": 408,
      "db_id": "vehicle_rent",
      "question": "Which type of powertrain is most common?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which type of powertrain is most common?\n\nSELECT vehicles_id FROM Renting_history WHERE customer_id = 1 GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1;\n\n"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": {
      "id": 409,
      "db_id": "vehicle_rent",
      "question": "Show minimum, maximum, and average annual fuel cost for all vehicles."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show minimum, maximum, and average annual fuel cost for all vehicles.\n\nSELECT Vehicles.id, MIN(Vehicles.Annual_fuel_cost), MAX(Vehicles.Annual_fuel_cost), AVG(Vehicles.Annual_fuel_cost) FROM Vehicles GROUP BY Vehicles.id;\n\n\n"
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": {
      "id": 410,
      "db_id": "vehicle_rent",
      "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the minimum, maximum, and average annual fuel costs across all vehicles?\n\nSELECT vehicles_id, MIN(annual_fuel_cost) AS min_annual_fuel_cost, MAX(annual_fuel_cost) AS max_annual_fuel_cost, AVG(annual_fuel_cost) AS avg_annual_fuel_cost FROM Renting_history GROUP BY vehicles_id;\n\n\n"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": {
      "id": 411,
      "db_id": "vehicle_rent",
      "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.\n\nSELECT Vehicles.id, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate;\n\n\n"
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": {
      "id": 412,
      "db_id": "vehicle_rent",
      "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?\n\nSELECT Vehicles.id, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate;\n\n\n"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": {
      "id": 413,
      "db_id": "vehicle_rent",
      "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.\n\nSELECT Vehicles.id, Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2 ORDER BY Average_Annual_Fuel_Cost DESC;\n\n\n"
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": {
      "id": 414,
      "db_id": "vehicle_rent",
      "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?\n\nSELECT total_hours, Type_of_powertrain, AVG(Annual_fuel_cost) FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2 ORDER BY Type_of_powertrain ASC;\n\n"
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": {
      "id": 415,
      "db_id": "vehicle_rent",
      "question": "Show the name, age, membership credit for all customers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the name, age, membership credit for all customers?\n\nSELECT Customers.id, Customers.name, Customers.age, Discount.membership_credit FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id JOIN Discount ON Renting_history.discount_id = Discount.id\n\n\n"
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": {
      "id": 416,
      "db_id": "vehicle_rent",
      "question": "What are the names, ages, and membership credits for all customers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names, ages, and membership credits for all customers?\n\nSELECT Customers.id, name, age, membership_credit FROM Customers;\n\n\n"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": {
      "id": 417,
      "db_id": "vehicle_rent",
      "question": "Show the name and age of the customer with maximum membership credit."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the name and age of the customer with maximum membership credit.\n\nSELECT Customers.id, Customers.name, Customers.age FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id WHERE Renting_history.discount_id IN (SELECT Discount.id FROM Discount WHERE Discount.membership_credit > 0) GROUP BY Customers.id ORDER BY MAX(Customers.membership_credit);\n\n\n"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": {
      "id": 418,
      "db_id": "vehicle_rent",
      "question": "What is the name and age of the customer with the most membership credit?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name and age of the customer with the most membership credit?\n\nSELECT Customers.id, Customers.name, Customers.age FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id WHERE Renting_history.discount_id IS NULL ORDER BY Customers.membership_credit DESC LIMIT 1;\n\n"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": {
      "id": 419,
      "db_id": "vehicle_rent",
      "question": "What is the average age for customers with a membership credit above the average?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average age for customers with a membership credit above the average?\n\nSELECT Customers.id, Customers.name, Customers.age, Discount.membership_credit FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id JOIN Discount ON Renting_history.discount_id = Discount.id WHERE Discount.membership_credit > (SELECT AVG(Discount.membership_credit) FROM Discount);\n\n\n"
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": {
      "id": 420,
      "db_id": "vehicle_rent",
      "question": "Return the average age for customers who have membership above the average across all customers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the average age for customers who have membership above the average across all customers.\n\nSELECT Customers.id, AVG(Customers.age) AS avg_age FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.id HAVING AVG(Customers.membership_credit) > (SELECT AVG(Customers.membership_credit) FROM Customers);\n\n\n"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": {
      "id": 421,
      "db_id": "vehicle_rent",
      "question": "Show all information for all discounts."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all information for all discounts.\n\nSELECT Discount.id, Discount.name, Discount.membership_credit FROM Discount;\n\n\n"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": {
      "id": 422,
      "db_id": "vehicle_rent",
      "question": "Return all information about discounts."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return all information about discounts.\n\nSELECT discount_id, name, membership_credit FROM Discount;\n\n\n"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": {
      "id": 423,
      "db_id": "vehicle_rent",
      "question": "Show the name and total hours of renting for each vehicle."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the name and total hours of renting for each vehicle.\n\nSELECT Vehicles.id, Vehicles.name, SUM(Renting_history.total_hours) AS Total_Hours FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.id ORDER BY Total_Hours DESC;\n\n"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": {
      "id": 424,
      "db_id": "vehicle_rent",
      "question": "What are the names and total rental hours for each vehicle?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and total rental hours for each vehicle?\n\nSELECT Vehicles.id, Vehicles.name, SUM(Renting_history.total_hours) AS Total_rental_hours FROM Renting_history JOIN Customers ON Renting_history.customer_id = Customers.id JOIN Discount ON Renting_history.discount_id = Discount.id JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.id ORDER BY Vehicles.id ASC;\n\n"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": {
      "id": 425,
      "db_id": "vehicle_rent",
      "question": "Show the name of vehicles with no renting history."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the name of vehicles with no renting history.\n\nSELECT Vehicles.id, Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL;\n\n"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": {
      "id": 426,
      "db_id": "vehicle_rent",
      "question": "What are the names of vehicles that have never been rented?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of vehicles that have never been rented?\n\nSELECT Vehicles.id, Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL;\n\n"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": {
      "id": 427,
      "db_id": "vehicle_rent",
      "question": "Show the name of customer with at least two renting history records."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the name of customer with at least two renting history records.\n\nSELECT Customers.id, Customers.name FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.id HAVING COUNT(*) >= 2;\n\n\n"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": {
      "id": 428,
      "db_id": "vehicle_rent",
      "question": "What are the names of customers who have two or more records of rental history?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of customers who have two or more records of rental history?\n\nSELECT Customers.id, Customers.name FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.id HAVING COUNT(*) >= 2;\n\n"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": {
      "id": 429,
      "db_id": "vehicle_rent",
      "question": "Show the name and model year of the vehicle with most number of renting history records."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the name and model year of the vehicle with most number of renting history records.\n\nSELECT Vehicles.id, Vehicles.Model_year FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.id ORDER BY COUNT(*) DESC LIMIT 1;\n\n"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": {
      "id": 430,
      "db_id": "vehicle_rent",
      "question": "What is the name and model year of the vehicle which has been rented the most times?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name and model year of the vehicle which has been rented the most times?\n\nSELECT Vehicles.id, Vehicles.Model_year FROM Renting_history INNER JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.id ORDER BY COUNT(*) DESC LIMIT 1;\n\n"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": {
      "id": 431,
      "db_id": "vehicle_rent",
      "question": "Show the vehicle name with a descending order of total hours of renting."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the vehicle name with a descending order of total hours of renting.\n\nSELECT Vehicles.id, Vehicles.name FROM Renting_history INNER JOIN Customers ON Renting_history.customer_id = Customers.id INNER JOIN Discount ON Renting_history.discount_id = Discount.id INNER JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id ORDER BY total_hours DESC;\n\n\n"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": {
      "id": 432,
      "db_id": "vehicle_rent",
      "question": "What are the names of vehicles, sorted descending by total hours of renting?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of vehicles, sorted descending by total hours of renting?\n\nSELECT Vehicles.id, Vehicles.name FROM Renting_history INNER JOIN Customers ON Renting_history.customer_id = Customers.id INNER JOIN Discount ON Renting_history.discount_id = Discount.id INNER JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id WHERE Customers.age > 30 AND Discount.membership_credit >= 1000 ORDER BY total_hours DESC;\n\n\n"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": {
      "id": 433,
      "db_id": "vehicle_rent",
      "question": "What is the discount name with most number of renting history records?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the discount name with most number of renting history records?\n\nSELECT Discount.id, Discount.name FROM Renting_history JOIN Customers ON Renting_history.customer_id = Customers.id JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id JOIN Discount ON Renting_history.discount_id = Discount.id GROUP BY Discount.id ORDER BY COUNT(*) DESC LIMIT 1;\n\n"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": {
      "id": 434,
      "db_id": "vehicle_rent",
      "question": "Return the name of the discount that corresponds to the most rental history records."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the name of the discount that corresponds to the most rental history records.\n\nSELECT Discount.id, Discount.name FROM Renting_history JOIN Discount ON Renting_history.discount_id = Discount.id GROUP BY Discount.id ORDER BY COUNT(*) DESC LIMIT 1;\n\n"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": {
      "id": 435,
      "db_id": "vehicle_rent",
      "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and powertrain type of the cars that rented for more than 30 total hours.\n\nSELECT Vehicles.id, Vehicles.name, Vehicles.Type_of_powertrain FROM Renting_history JOIN Customers ON Renting_history.customer_id = Customers.id JOIN Discount ON Renting_history.discount_id = Discount.id JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id WHERE Renting_history.total_hours > 30 AND Discount.membership_credit >= 1000\n\n\n"
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": {
      "id": 436,
      "db_id": "vehicle_rent",
      "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and powertrain types of cars that have more than 30 total rental hours?\n\nSELECT Vehicles.id, Vehicles.name, Vehicles.Type_of_powertrain FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id WHERE Renting_history.total_hours > 30;\n\n"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": {
      "id": 437,
      "db_id": "vehicle_rent",
      "question": "Find the average city and highway fuel rates for cars with different powertrain types."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the average city and highway fuel rates for cars with different powertrain types.\n\nSELECT vehicles_id, AVG(City_fuel_economy_rate) AS avg_city_fuel_rate, AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_rate FROM Vehicles GROUP BY Type_of_powertrain;\n\n"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": {
      "id": 438,
      "db_id": "vehicle_rent",
      "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"Customers\" (\n\"id\" int,\n\"name\" text,\n\"age\" int,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Discount\" (\n\"id\" int,\n\"name\" text,\n\"membership_credit\" int,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Vehicles\" (\n\"id\" int,\n\"name\" text,\n\"Model_year\" int,\n\"Type_of_powertrain\" text,\n\"Combined_fuel_economy_rate\" int,\n\"City_fuel_economy_rate\" int,\n\"Highway_fuel_economy_rate\" int,\n\"Cost_per_25_miles\" real,\n\"Annual_fuel_cost\" real,\n\"Notes\" text,\nPRIMARY KEY (\"id\")\n)\nCREATE TABLE \"Renting_history\" (\n\"id\" int,\n\"customer_id\" int,\n\"discount_id\" int,\n\"vehicles_id\" int,\n\"total_hours\" int,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (\"customer_id\") REFERENCES \"Customers\"(\"id\"),\nFOREIGN KEY (\"vehicles_id\") REFERENCES \"Vehicles\"(\"id\"),\nFOREIGN KEY (\"discount_id\") REFERENCES \"Discount\"(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?\n\nSELECT vehicles_id, AVG(City_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM Vehicles GROUP BY Type_of_powertrain;\n\n\n"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 439,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the average amount of a student loan?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average amount of a student loan?\n\nSELECT Students.student_id, AVG(Student_Loans.amount_of_loan) AS avg_amount_of_student_loan\n"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 440,
      "db_id": "cre_Students_Information_Systems",
      "question": "Compute the average amount of student loans."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Compute the average amount of student loans.\n\nSELECT Student_Loans.student_id, AVG(Student_Loans.amount_of_loan) AS avg_amount_of_student_loans FROM Student_Loans GROUP BY Student_Loans.student_id;\n"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 441,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.\n\nSELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2);\n"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 442,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?\n\nSELECT Students.student_id, Students.bio_data FROM Students WHERE Students.student_id IN (SELECT DISTINCT Students.student_id FROM Students INNER JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id HAVING COUNT(*) >= 2) OR Students.student_id IN (SELECT DISTINCT Students.student_id FROM Students INNER JOIN Detention ON Students.student_id = Detention.student_id GROUP BY Students.student_id HAVING COUNT(*) < 2);\n"
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 443,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'\n\nSELECT Teachers.achievement_details FROM Teachers WHERE Teachers.class_details LIKE '%data%' AND Teachers.class_details NOT LIKE 'net%';\n\n"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 444,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.\n\nSELECT Teachers.achievement_details FROM Teachers WHERE Teachers.teacher_id IN (SELECT Classes.teacher_id FROM Classes WHERE Classes.class_details LIKE '%data%' AND Classes.class_details NOT LIKE 'net%') ORDER BY TeacherDetails ASC;\n\n"
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 445,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the biographical data of the students who never had a detention or student loan ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the biographical data of the students who never had a detention or student loan.\n\nSELECT Students.student_id, Students.bio_data FROM Students LEFT JOIN Detention ON Students.student_id = Detention.student_id WHERE Detention.student_id IS NULL OR Detention.detention_id IS NULL LEFT JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.student_id IS NULL OR Student_Loans.student_loan_id IS NULL;\n"
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 446,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students never had a detention or student loan ? Find their biographical data ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which students never had a detention or student loan? Find their biographical data.\n\nSELECT Students.student_id, Students.bio_data FROM Students LEFT JOIN Detention ON Students.student_id = Detention.student_id WHERE Detention.student_id IS NULL AND Students.student_id IN (SELECT Student_Loans.student_id FROM Student_Loans WHERE Student_Loans.student_id IS NULL);\n"
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 447,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the loan amounts and loan dates of the students who have at least 2 achievements?\n\nSELECT student_id, amount_of_loan, date_of_loan FROM Student_Loans JOIN Students ON Student_Loans.student_id = Students.student_id WHERE Students.student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2);\n"
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 448,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the amount and date of loan for the students who have two or more achievements."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the amount and date of loan for the students who have two or more achievements.\n\nSELECT student_id, SUM(amount_of_loan), MAX(date_of_loan) FROM Student_Loans GROUP BY student_id HAVING COUNT(*) >= 2;\n"
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 449,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the detail and id of the teacher who teaches the most courses."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the detail and id of the teacher who teaches the most courses.\n\nSELECT Teachers.achievement_type_code, Teacher.id FROM Teacher INNER JOIN Courses ON Teacher.id = Courses.teacher_id GROUP BY Teacher.id ORDER BY COUNT(*) DESC LIMIT 1;\n\n"
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 450,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the detail and id of the teacher who teaches the largest number of courses?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the detail and id of the teacher who teaches the largest number of courses?\n\nSELECT Teachers.achievement_type_code, Teacher.id FROM Teacher INNER JOIN Courses ON Teacher.id = Courses.teacher_id GROUP BY Teacher.id ORDER BY COUNT(Courses.id) DESC LIMIT 1;\n\n"
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 451,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the distinct descriptions of all the detentions which have ever happened?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the distinct descriptions of all the detentions which have ever happened?\n\nSELECT achievement_details FROM Achievements WHERE achievement_type_code = 'A1' AND date_achievement > '2019-01-01';\n"
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 452,
      "db_id": "cre_Students_Information_Systems",
      "question": "Return the distinct descriptions of all the detentions that have happened."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the distinct descriptions of all the detentions that have happened.\n\nSELECT achievement_details FROM Achievements WHERE achievement_type_code = 'A1' AND date_achievement > '2019-01-01';\n"
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 453,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the personal details and the address type descriptions of all the students."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the personal details and the address type descriptions of all the students.\n\nSELECT student_id, bio_data, student_details, address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id INNER JOIN Ref_Address_Types ON Addresses.address_type_code = Ref_Address_Types.address_type_code;\n\n"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 454,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the personal details and the address type descriptions of each student?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the personal details and the address type descriptions of each student?\n\nSELECT Students.student_id, Students.bio_data, Students.student_details, Ref_Address_Types.address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code;\n"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 455,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the the address details and the biographical information of the students."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the the address details and the biographical information of the students.\n\nSELECT student_id, bio_data, address_details FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id;\n\n"
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 456,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the address details and biographical information of each student?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the address details and biographical information of each student?\n\nSELECT student_id, bio_data, address_details FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id;\n\n"
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 457,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the biographical data and the date of the transcript of all the students."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the biographical data and the date of the transcript of all the students.\n\nSELECT Students.student_id, Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id;\n\n"
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 458,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the biographical data and the date of transcript issuance of each student?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the biographical data and the date of transcript issuance of each student?\n\nSELECT Students.student_id, Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id;\n\n"
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 459,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many students got the most common result in the behavioral monitoring details? Also list the result details.\n\nSELECT student_id, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY student_id ORDER BY count DESC LIMIT 1;\n\n"
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 460,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the most common result in the behavioral monitoring details. What are the count and the details of this result?\n\nSELECT Behaviour_Monitoring.achievement_details, COUNT(*) AS Count FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.achievement_details ORDER BY Count DESC LIMIT 1;\n"
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 461,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.\n\nSELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)) AND student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 2));\n"
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 462,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.\n\nSELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1));\n\n"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 463,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.\n\nSELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1));\n\n"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 464,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the biographical information of the students who got the most common result for their behaviour monitoring details?\n\nSELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Behaviour_Monitoring GROUP BY student_id));\n\n"
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 465,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students have gone through any event? List the students' biographical data and event date."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which students have gone through any event? List the students' biographical data and event date.\n\nSELECT student_id, bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id;\n\n"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 466,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical data and event date for students who participated in any events."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the biographical data and event date for students who participated in any events.\n\nSELECT Students.student_id, Students.bio_data, Student_Events.event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id;\n\n"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 467,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many students have joined in the most common type of event? List the number, the event type and description."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many students have joined in the most common type of event? List the number, the event type and description.\n\nSELECT Students.student_id, COUNT(*) AS num_students, Ref_Event_Types.event_type_description FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id INNER JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY Students.student_id ORDER BY num_students DESC LIMIT 1;\n\n"
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 468,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the type of event the most students joined? Give me the number of students, and the event type code and description.\n\nSELECT Students.student_id, COUNT(*) AS num_students, Ref_Event_Types.event_type_code, Ref_Event_Types.event_type_description FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id INNER JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY Students.student_id ORDER BY num_students DESC LIMIT 1;\n"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 469,
      "db_id": "cre_Students_Information_Systems",
      "question": "How are all the achievements described? List the achievement detail and the type description."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How are all the achievements described? List the achievement detail and the type description.\n\nSELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code;\n\n"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 470,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the achievement detail and the type description of each achievements?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the achievement detail and the type description of each achievements?\n\nSELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code;\n\n"
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 471,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many teachers have taught a student who has not won any achievements?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many teachers have taught a student who has not won any achievements?\n\nSELECT Teachers.achievement_type_code FROM Teachers WHERE EXISTS(SELECT * FROM Achievements WHERE Achievements.student_id = Teachers.student_id AND Achievements.achievement_type_code IS NULL);\n"
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 472,
      "db_id": "cre_Students_Information_Systems",
      "question": "Count the number of teachers who have taught students who have never won an achievement."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of teachers who have taught students who have never won an achievement.\n\nSELECT Teachers.achievement_type_code FROM Teachers WHERE Teachers.teacher_id IN (SELECT Classes.teacher_id FROM Classes INNER JOIN Students ON Classes.student_id = Students.student_id WHERE Students.student_id NOT IN (SELECT Achievements.student_id FROM Achievements));\n"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 473,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the date of the transcripts and the transcript details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the date of the transcripts and the transcript details.\n\nSELECT date_achievement, achievement_details FROM Achievements;\n"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 474,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the date and detail of each transcript?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the date and detail of each transcript?\n\nSELECT date_achievement, achievement_details FROM Achievements;\n\n"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 475,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the achievement type code, achievement details and the date of the achievements."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the achievement type code, achievement details and the date of the achievements.\n\nSELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;\n"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 476,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the type code, details, and date of each achievement?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the type code, details, and date of each achievement?\n\nSELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;\n"
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 477,
      "db_id": "cre_Students_Information_Systems",
      "question": "Show the detention start time and end time of the detentions."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the detention start time and end time of the detentions.\n\nSELECT date_achievement FROM Detention\n\n"
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 478,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the starting time and ending time of each detention record?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the starting time and ending time of each detention record?\n\nSELECT Students.student_id, \n"
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 479,
      "db_id": "cre_Students_Information_Systems",
      "question": "Show the biographical information of the students whose details include the substring 'Suite'."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the biographical information of the students whose details include the substring 'Suite'.\n\nSELECT student_id, bio_data FROM Students WHERE student_details LIKE '%Suite%';\n\n"
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 480,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which students have 'Suite' as a substring in their details? Give me their biographical information.\n\nSELECT student_id, bio_data FROM Students WHERE bio_data LIKE '%Suite%';\n\n"
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 481,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the details for all the pairs of teachers and students who are in the same class."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the details for all the pairs of teachers and students who are in the same class.\n\nSELECT Teachers.achievement_type_code, Students.student_id FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id\n\n"
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 482,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.\n\nSELECT Teachers.achievement_type_code, Students.achievement_type_code FROM Teachers INNER JOIN Students ON Teachers.student_id = Students.student_id WHERE Teachers.class_id = Students.class_id;\n\n"
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 483,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.\n\nSELECT Teachers.achievement_type_code, COUNT(*) AS num_courses FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id GROUP BY Teacher.achievement_type_code ORDER BY num_courses DESC LIMIT 1;\n\n"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 484,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.\n\nSELECT Teachers.achievement_id, COUNT(*) AS num_courses FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id GROUP BY achieve_id ORDER BY num_courses DESC LIMIT 1;\n\n"
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 485,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many courses do students take at most? Also find the id of the student who takes the most courses."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many courses do students take at most? Also find the id of the student who takes the most courses.\n\nSELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1;\n\n"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 486,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.\n\nSELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1;\n\n"
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 487,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students take 2 courses? List student id and details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which students take 2 courses? List student id and details.\n\nSELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2);\n\n"
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 488,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the ids and details of the students who take 2 courses?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids and details of the students who take 2 courses?\n\nSELECT student_id, class_details FROM Classes WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2);\n\n"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 489,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the least common detention type? Show the type code and the description."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the least common detention type? Show the type code and the description.\n\nSELECT date_achievement, achievement_details FROM Achievements WHERE student_id = 1 ORDER BY date_achievement DESC;\n"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 490,
      "db_id": "cre_Students_Information_Systems",
      "question": "Give me the type code and description of the least common detention type."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give me the type code and description of the least common detention type.\n\nSELECT date_achievement, achievement_type_code, achievement_type_description FROM Achievements WHERE student_id = 1 ORDER BY date_achievement ASC;\n"
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 491,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which students have a student loan more than the average amount? List the students' biographical data and the details.\n\nSELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans GROUP BY student_id HAVING SUM(amount_of_loan) > (SELECT AVG(amount_of_loan) FROM Student_Loans));\n\n"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 492,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical data and details for students whose student loan is above the average amount."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the biographical data and details for students whose student loan is above the average amount.\n\nSELECT Students.student_id, Students.bio_data, Students.student_details FROM Students INNER JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan > (SELECT AVG(Student_Loans.amount_of_loan) FROM Student_Loans);\n"
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 493,
      "db_id": "cre_Students_Information_Systems",
      "question": "When was the earliest date of loan?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: When was the earliest date of loan?\n\nSELECT student_id, MIN(date_of_loan) AS min_date FROM Student_Loans GROUP BY student_id;\n"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 494,
      "db_id": "cre_Students_Information_Systems",
      "question": "Return the earliest date of loan in the record."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the earliest date of loan in the record.\n\nSELECT student_id, MIN(date_of_loan) AS min_date FROM Student_Loans GROUP BY student_id;\n\n"
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 495,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which student has the loan with the minimum value? List the student's biographical information."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which student has the loan with the minimum value? List the student's biographical information.\n\nSELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1);\n\n"
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 496,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the biographical information of the student with the smallest student loan."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the biographical information of the student with the smallest student loan.\n\nSELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1);\n"
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 497,
      "db_id": "cre_Students_Information_Systems",
      "question": "When was the transcript issued for the student with loan of maximum value?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: When was the transcript issued for the student with loan of maximum value?\n\nSELECT date_achievement FROM Achievements WHERE achievement_type_code = 'MAX_LOAN' AND student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1);\n"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 498,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the transcript issuance date for the student with the largest amount of loan?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the transcript issuance date for the student with the largest amount of loan?\n\nSELECT date_achievement FROM Achievements WHERE achievement_type_code = 'A1' ORDER BY date_achievement DESC LIMIT 1;\n"
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 499,
      "db_id": "cre_Students_Information_Systems",
      "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which teachers have taught the student with the earliest transcript issuance? List the teacher details.\n\nSELECT Teachers.achievement_type_code FROM Teachers WHERE Teachers.teacher_id = (SELECT Students.student_id FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id ORDER BY Transcripts.date_of_transcript ASC LIMIT 1);\n"
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 500,
      "db_id": "cre_Students_Information_Systems",
      "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the details of the teachers who have taught the student with the earliest transcript issuance.\n\nSELECT Teachers.achievement_details FROM Teachers WHERE Teachers.teacher_id IN (SELECT Classes.teacher_id FROM Classes WHERE Classes.student_id = (SELECT Transcripts.student_id FROM Transcripts ORDER BY Transcripts.date_of_transcript ASC LIMIT 1));\n"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 501,
      "db_id": "cre_Students_Information_Systems",
      "question": "How much total loan does each student have ? List the student ids and the amounts ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How much total loan does each student have? List the student ids and the amounts.\n\nSELECT student_id, SUM(amount_of_loan) AS TotalLoan FROM Student_Loans GROUP BY student_id;\n\n"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 502,
      "db_id": "cre_Students_Information_Systems",
      "question": "For each student, find the student id and the total amount of loan he or she has."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each student, find the student id and the total amount of loan he or she has.\n\nSELECT student_id, SUM(amount_of_loan) AS TotalLoan FROM Student_Loans GROUP BY student_id;\n\n"
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 503,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many courses does each student take? List the student id, the student biographical data and the course count."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many courses does each student take? List the student id, the student biographical data and the course count.\n\nSELECT student_id, bio_data, COUNT(*) AS course_count FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id;\n\n"
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 504,
      "db_id": "cre_Students_Information_Systems",
      "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each student, find the student id, student biographical data, and the number of courses he or she takes.\n\nSELECT student_id, bio_data, COUNT(class_id) AS num_courses FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id;\n\n"
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 505,
      "db_id": "cre_Students_Information_Systems",
      "question": "How many students have gone through a detention?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many students have gone through a detention?\n\nSELECT student_id FROM Detention\n\n"
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 506,
      "db_id": "cre_Students_Information_Systems",
      "question": "Count the number of students who have a detention record."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of students who have a detention record.\n\nSELECT student_id FROM Detention\n\n"
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 507,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the code and description of the most common student address type?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the code and description of the most common student address type?\n\nSELECT Ref_Address_Types.achievement_type_code, Ref_Address_Types.address_type_description \n"
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 508,
      "db_id": "cre_Students_Information_Systems",
      "question": "What is the most common student address type? Give me the code and description of the address type."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the most common student address type? Give me the code and description of the address type.\n\nSELECT Ref_Address_Types.achievement_type_code, Ref_Address_Types.address_type_description FROM Students_Addresses INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code GROUP BY Ref_Address_Types.address_type_code ORDER BY COUNT(*) DESC LIMIT 1;\n"
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 509,
      "db_id": "cre_Students_Information_Systems",
      "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For those students who have gone through an event, who do not have a student loan? List the students' biographical data\n\nSELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events WHERE event_id NOT IN (SELECT student_id FROM Student_Loans)) ORDER BY student_id ASC;\n\n"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 510,
      "db_id": "cre_Students_Information_Systems",
      "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Among the students who have an event record, who do not have a student loan? Return the students' biographical data.\n\nSELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events WHERE student_id NOT IN (SELECT student_id FROM Student_Loans));\n\n"
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 511,
      "db_id": "cre_Students_Information_Systems",
      "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the start time and the end time of the students' addresses for the students who have 2 transcripts.\n\nSELECT student_id, address_id, date_from AS'start_time', date_to AS 'end_time'\n"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 512,
      "db_id": "cre_Students_Information_Systems",
      "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the start time and end time of addresses for the students who receive 2 transcripts?\n\nSELECT student_id, address_id, date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2);\n"
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 513,
      "db_id": "cre_Students_Information_Systems",
      "question": "When did all the detentions start?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: When did all the detentions start?\n\nSELECT date_achievement FROM Detention WHERE datetime_detention_start = '2022-01-01 00:00:00'\n"
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": {
      "id": 514,
      "db_id": "cre_Students_Information_Systems",
      "question": "Give me the detention start date for all the detention records."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n)\nCREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n)\nCREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n)\nCREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n)\nCREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n)\nCREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n)\nCREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n)\nCREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n)\nCREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n)\nCREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n)\nCREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n)\nCREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n)\nCREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give me the detention start date for all the detention records.\n\nSELECT date_achievement FROM Detention\n\n"
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": {
      "id": 515,
      "db_id": "book_1",
      "question": "List all the author names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all the author names.\n\nSELECT Author.IdOrder FROM Author WHERE Author.Name = 'John Doe'\n\n"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": {
      "id": 516,
      "db_id": "book_1",
      "question": "What are the names of all the authors?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all the authors?\n\nSELECT Author.IdOrder FROM Author WHERE Author.Name = 'John Doe'\n\n"
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": {
      "id": 517,
      "db_id": "book_1",
      "question": "Show all Client names and their addresses."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all Client names and their addresses.\n\nSELECT Client.IdOrder, Client.Name, Client.Address FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient\n\n"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": {
      "id": 518,
      "db_id": "book_1",
      "question": "What are the names and addressed of all clients?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and addressed of all clients?\n\nSELECT Client.IdOrder, Client.Name, Client.Address FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient\n\n"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": {
      "id": 519,
      "db_id": "book_1",
      "question": "List all Book titles, ISBNs, and sale prices."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all Book titles, ISBNs, and sale prices.\n\nSELECT Book.ISBN, Title, SalePrice FROM Book WHERE SalePrice IS NOT NULL;\n"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": {
      "id": 520,
      "db_id": "book_1",
      "question": "What are the titles, ISBNs, and sale prices for all books?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles, ISBNs, and sale prices for all books?\n\nSELECT Book.ISBN, Title, SalePrice FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'J.K. Rowling' AND SalePrice IS NOT NULL ORDER BY SalePrice DESC;\n"
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": {
      "id": 521,
      "db_id": "book_1",
      "question": "How many books do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many books do we have?\n\nSELECT ISBN FROM Book\n\n"
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": {
      "id": 522,
      "db_id": "book_1",
      "question": "Count the number of books."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of books.\n\nSELECT ISBN FROM Book WHERE SalePrice = 0;\n"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": {
      "id": 523,
      "db_id": "book_1",
      "question": "How many authors are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many authors are there?\n\nSELECT Author.IdOrder FROM Author WHERE Author.Name = 'John Doe'\n\n"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": {
      "id": 524,
      "db_id": "book_1",
      "question": "Count the number of authors."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of authors.\n\nSELECT Author.IdOrder FROM Author WHERE Author.Name = 'John Doe' AND Author.IdOrder IN (SELECT Orders.IdOrder FROM Orders WHERE Orders.DateOrder BETWEEN '2019-01-01' AND '2020-12-31') ORDER BY Author.IdOrder ASC;\n"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": {
      "id": 525,
      "db_id": "book_1",
      "question": "How many clients are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many clients are there?\n\nSELECT IdOrder FROM Orders WHERE DateExped IS NULL;\n"
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": {
      "id": 526,
      "db_id": "book_1",
      "question": "Return the number of clients."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the number of clients.\n\nSELECT IdOrder FROM Orders WHERE IdClient = 'C0001' AND DateOrder < '2019-01-01';\n"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": {
      "id": 527,
      "db_id": "book_1",
      "question": "List names and addresses of all clients in alphabetical order by their names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List names and addresses of all clients in alphabetical order by their names.\n\nSELECT Client.IdOrder, Client.Name, Client.Address FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient ORDER BY Client.Name ASC;\n\n"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": {
      "id": 528,
      "db_id": "book_1",
      "question": "What are the names and addressed of all clients, ordered alphabetically by name?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and addressed of all clients, ordered alphabetically by name?\n\nSELECT Client.IdOrder, Client.Name, Client.Address FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient ORDER BY Client.Name ASC;\n\n"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": {
      "id": 529,
      "db_id": "book_1",
      "question": "Show all book titles and corresponding author names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all book titles and corresponding author names.\n\nSELECT Book.ISBN, Title, Author.Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Book.ISBN = '978-84-376-0487-8' AND Author.idAuthor = 1;\n"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": {
      "id": 530,
      "db_id": "book_1",
      "question": "What are the names of all books and their corresponding authors?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all books and their corresponding authors?\n\nSELECT Book.ISBN, Title, Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author;\n"
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": {
      "id": 531,
      "db_id": "book_1",
      "question": "Show all order ids and their client names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all order ids and their client names.\n\nSELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient;\n\n"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": {
      "id": 532,
      "db_id": "book_1",
      "question": "What are the ids of all orders and the corresponding client names?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids of all orders and the corresponding client names?\n\nSELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient;\n\n"
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": {
      "id": 533,
      "db_id": "book_1",
      "question": "Show all author names and the numbers of books each has written."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all author names and the numbers of books each has written.\n\nSELECT Author.IdOrder, Author.Name, COUNT(*) AS numBooks FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.IdOrder ORDER BY numBooks DESC;\n\n"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": {
      "id": 534,
      "db_id": "book_1",
      "question": "What are the names of all the authors, and how many books has each written?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all the authors, and how many books has each written?\n\nSELECT Author.IdOrder, Author.Name, COUNT(*) AS numBooks FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.IdOrder, Author.Name ORDER BY Author.IdOrder ASC;\n\n"
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": {
      "id": 535,
      "db_id": "book_1",
      "question": "Show all book isbns and the numbers of orders for each."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all book isbns and the numbers of orders for each.\n\nSELECT ISBN, COUNT(*) FROM Books_Order GROUP BY ISBN;\n"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": {
      "id": 536,
      "db_id": "book_1",
      "question": "What are all isbns for each book, and how many times has each been ordered?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are all isbns for each book, and how many times has each been ordered?\n\nSELECT ISBN, COUNT(*) AS num_orders FROM Books_Order GROUP BY ISBN;\n"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": {
      "id": 537,
      "db_id": "book_1",
      "question": "Show all book isbns and the total amount ordered for each."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all book isbns and the total amount ordered for each.\n\nSELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN;\n"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": {
      "id": 538,
      "db_id": "book_1",
      "question": "What are the isbns for all books, and what is the total amount ordered for each?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the isbns for all books, and what is the total amount ordered for each?\n\nSELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN;\n"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": {
      "id": 539,
      "db_id": "book_1",
      "question": "Show the book title corresponding to the book with the most number of orders."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the book title corresponding to the book with the most number of orders.\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1;\n"
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": {
      "id": 540,
      "db_id": "book_1",
      "question": "What is the title of the book that has been ordered the greatest number of times?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the title of the book that has been ordered the greatest number of times?\n\nSELECT Book.ISBN, Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder WHERE amount = (SELECT MAX(amount) FROM Books_Order);\n"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": {
      "id": 541,
      "db_id": "book_1",
      "question": "Show the book title and purchase price of the book that has had the greatest amount in orders."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the book title and purchase price of the book that has had the greatest amount in orders.\n\nSELECT Book.ISBN, Title, PurchasePrice FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.amount = (SELECT MAX(amount) FROM Books_Order);\n"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": {
      "id": 542,
      "db_id": "book_1",
      "question": "What is the title and purchase price of the book that has the highest total order amount?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the title and purchase price of the book that has the highest total order amount?\n\nSELECT Book.ISBN, Title, PurchasePrice FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.amount = (SELECT MAX(amount) FROM Books_Order);\n"
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": {
      "id": 543,
      "db_id": "book_1",
      "question": "Show the titles of books that have been ordered."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the titles of books that have been ordered.\n\nSELECT Book.ISBN, Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder\n\n"
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": {
      "id": 544,
      "db_id": "book_1",
      "question": "What are the different titles of books that have been ordered in the past?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different titles of books that have been ordered in the past?\n\nSELECT Book.ISBN, Book.Title FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.IdOrder IN (SELECT IdOrder FROM Orders WHERE DateExped < '2019-01-01')\n"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": {
      "id": 545,
      "db_id": "book_1",
      "question": "Show the names of clients who have ordered at least once."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the names of clients who have ordered at least once.\n\nSELECT Client.IdOrder, Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdOrder IS NOT NULL;\n"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": {
      "id": 546,
      "db_id": "book_1",
      "question": "What are the names of the different clients who have made an order?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the different clients who have made an order?\n\nSELECT Client.IdOrder FROM Client WHERE EXISTS(SELECT * FROM Orders WHERE Client.IdOrder = Orders.IdOrder);\n"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": {
      "id": 547,
      "db_id": "book_1",
      "question": "Show all client names and the number of orders each has made."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all client names and the number of orders each has made.\n\nSELECT Client.IdOrder, COUNT(*) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdOrder;\n"
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": {
      "id": 548,
      "db_id": "book_1",
      "question": "What are the names of all the clients, and how many times has each of them ordered?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all the clients, and how many times has each of them ordered?\n\nSELECT Client.IdOrder, COUNT(*) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient;\n"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": {
      "id": 549,
      "db_id": "book_1",
      "question": "What is the name of the client with the most number of orders?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the client with the most number of orders?\n\nSELECT Client.IdOrder FROM Client WHERE Client.Name = 'John Doe' AND Client.Address = '123 Main St.' AND Client.NumCC = '1234567890123456'\n\n"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": {
      "id": 550,
      "db_id": "book_1",
      "question": "Give the name of the client who has made the most orders."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the name of the client who has made the most orders.\n\nSELECT Client.IdOrder FROM Client WHERE Client.IdOrder = (SELECT MAX(Client.IdOrder) FROM Client);\n"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": {
      "id": 551,
      "db_id": "book_1",
      "question": "Show the client names and their total amounts of books ordered."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the client names and their total amounts of books ordered.\n\nSELECT Client.IdOrder, Client.Name, SUM(Book.amount) AS TotalAmounts\n"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": {
      "id": 552,
      "db_id": "book_1",
      "question": "What are the names of all the clients, and the total amount of books ordered by each?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all the clients, and the total amount of books ordered by each?\n\nSELECT Client.IdOrder, Client.Name, SUM(Book.SalePrice * Books_Order.amount) AS TotalAmount\n"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": {
      "id": 553,
      "db_id": "book_1",
      "question": "Show the client name who has the most total amount of books ordered."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the client name who has the most total amount of books ordered.\n\nSELECT Client.IdOrder, Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.DateExped IS NULL ORDER BY COUNT(*) DESC LIMIT 1;\n"
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": {
      "id": 554,
      "db_id": "book_1",
      "question": "What is the name of the client who has ordered the greatest total amount of books?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the client who has ordered the greatest total amount of books?\n\nSELECT Client.IdOrder, SUM(Book.amount) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient ORDER BY SUM(Book.amount) DESC LIMIT 1;\n"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": {
      "id": 555,
      "db_id": "book_1",
      "question": "Show all book titles for books that have no orders."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all book titles for books that have no orders.\n\nSELECT Book.ISBN, Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order);\n"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": {
      "id": 556,
      "db_id": "book_1",
      "question": "What are the titles of books that have never been ordered?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles of books that have never been ordered?\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author_Book.ISBN NOT IN (SELECT ISBN FROM Books_Order);\n"
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": {
      "id": 557,
      "db_id": "book_1",
      "question": "Show all client names for clients who have not made orders."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all client names for clients who have not made orders.\n\nSELECT Client.IdOrder, Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdOrder IS NULL;\n"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": {
      "id": 558,
      "db_id": "book_1",
      "question": "What are the names of clients who have never made an order?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of clients who have never made an order?\n\nSELECT Client.IdOrder FROM Client WHERE Client.IdOrder IS NULL;\n"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": {
      "id": 559,
      "db_id": "book_1",
      "question": "What is the maximum and the minimum sale price?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the maximum and the minimum sale price?\n\nSELECT ISBN, MAX(SalePrice), MIN(SalePrice)\n"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": {
      "id": 560,
      "db_id": "book_1",
      "question": "Give the maximum and minimum sale price of books."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the maximum and minimum sale price of books.\n\nSELECT ISBN, MAX(SalePrice), MIN(SalePrice)\n"
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": {
      "id": 561,
      "db_id": "book_1",
      "question": "What is the average purchase price and the average sale price?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average purchase price and the average sale price?\n\nSELECT Author.IdOrder, AVG(Book.PurchasePrice), AVG(Book.SalePrice)\n"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": {
      "id": 562,
      "db_id": "book_1",
      "question": "Give the average purchase price and average sale price for books."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the average purchase price and average sale price for books.\n\nSELECT Author.IdOrder, AVG(Book.PurchasePrice), AVG(Book.SalePrice)\n"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": {
      "id": 563,
      "db_id": "book_1",
      "question": "What is the maximum difference between the sale price and purchase price?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the maximum difference between the sale price and purchase price?\n\nSELECT ISBN, Title, Author, PurchasePrice, SalePrice FROM Book WHERE SalePrice-PurchasePrice = (SELECT MAX(SalePrice-PurchasePrice) FROM Book);\n"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": {
      "id": 564,
      "db_id": "book_1",
      "question": "Return the largest difference in sale price and purchase price."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the largest difference in sale price and purchase price.\n\nSELECT ISBN, Title, Author, PurchasePrice, SalePrice, \n"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": {
      "id": 565,
      "db_id": "book_1",
      "question": "List all book titles which have sale prices higher than the average."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all book titles which have sale prices higher than the average.\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);\n"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": {
      "id": 566,
      "db_id": "book_1",
      "question": "What are the titles of books with sale prices above the average sale price across all books?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles of books with sale prices above the average sale price across all books?\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);\n"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": {
      "id": 567,
      "db_id": "book_1",
      "question": "List all book titles which have the lowest sale price ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all book titles which have the lowest sale price.\n\nSELECT Book.ISBN, Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN WHERE SalePrice IN (SELECT MIN(SalePrice) FROM Book);\n"
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": {
      "id": 568,
      "db_id": "book_1",
      "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles of books that have a sale price equal to the lowest sale price across all books?\n\nSELECT Book.ISBN, Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author WHERE SalePrice IN (SELECT MIN(SalePrice) FROM Book);\n"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": {
      "id": 569,
      "db_id": "book_1",
      "question": "List all book titles which have highest purchase prices ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all book titles which have highest purchase prices.\n\nSELECT Book.ISBN, Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN WHERE PurchasePrice IN (SELECT MAX(PurchasePrice) FROM Book);\n"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": {
      "id": 570,
      "db_id": "book_1",
      "question": "What are the titles of books with the highest purchase price across all books ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles of books with the highest purchase price across all books?\n\nSELECT Book.ISBN, Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN WHERE PurchasePrice IN (SELECT MAX(PurchasePrice) FROM Book);\n"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": {
      "id": 571,
      "db_id": "book_1",
      "question": "What is the average sale price of books written by George Orwell?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average sale price of books written by George Orwell?\n\nSELECT Author.IdOrder, AVG(Book.SalePrice) FROM Author JOIN Author_Book ON Author.IdAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Author.Name = 'George Orwell' GROUP BY Author.IdOrder;\n"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": {
      "id": 572,
      "db_id": "book_1",
      "question": "Give the average sale price of books authored by George Orwell."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the average sale price of books authored by George Orwell.\n\nSELECT Author.IdOrder, AVG(Book.SalePrice) FROM Author JOIN Author_Book ON Author.IdAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Author.Name = 'George Orwell' GROUP BY Author.IdOrder;\n"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": {
      "id": 573,
      "db_id": "book_1",
      "question": "What are sale prices of books written by Plato?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are sale prices of books written by Plato?\n\nSELECT Book.ISBN, Book.Title, Book.SalePrice FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'Plato';\n\n"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": {
      "id": 574,
      "db_id": "book_1",
      "question": "Return the sale prices of books authored by Plato."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the sale prices of books authored by Plato.\n\nSELECT Books_Order.ISBN, SalePrice FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato' AND SalePrice IS NOT NULL;\n"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": {
      "id": 575,
      "db_id": "book_1",
      "question": "What is the title of the book written by George Orwell that has the lowest sale price?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the title of the book written by George Orwell that has the lowest sale price?\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'George Orwell' AND SalePrice = (SELECT MIN(SalePrice) FROM Book);\n"
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": {
      "id": 576,
      "db_id": "book_1",
      "question": "Give the title of book by George Orwell that has the lowest saleprice."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the title of book by George Orwell that has the lowest saleprice.\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'George Orwell' AND SalePrice = (SELECT MIN(SalePrice) FROM Book);\n"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": {
      "id": 577,
      "db_id": "book_1",
      "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the title of the book written by Plato has price lower than the average sale price of all books?\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'Plato' AND SalePrice < (SELECT AVG(SalePrice) FROM Book);\n"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": {
      "id": 578,
      "db_id": "book_1",
      "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'Plato' AND SalePrice < (SELECT AVG(SalePrice) FROM Book);\n"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": {
      "id": 579,
      "db_id": "book_1",
      "question": "Who is the author of the book \"Pride and Prejudice\"?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Who is the author of the book \"Pride and Prejudice\"?\n\nSELECT Author.IdOrder, Author.Name FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author INNER JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice' AND Author.Name IS NOT NULL;\n"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": {
      "id": 580,
      "db_id": "book_1",
      "question": "Give the name of the author who wrote the book titled Pride and Prejudice."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the name of the author who wrote the book titled Pride and Prejudice.\n\nSELECT Author.IdOrder FROM Author_Book WHERE Author.ISBN = '978-1-101-16396-5' AND Author.Name = 'Jane Austen'\n"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": {
      "id": 581,
      "db_id": "book_1",
      "question": "List titles of all books published by an author whose name contains the string 'Plato'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List titles of all books published by an author whose name contains the string 'Plato'?\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name LIKE '%Plato%';\n\n"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": {
      "id": 582,
      "db_id": "book_1",
      "question": "What are the titles of all books written by an author with a name that contains Plato?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles of all books written by an author with a name that contains Plato?\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name LIKE '%Plato%';\n\n"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": {
      "id": 583,
      "db_id": "book_1",
      "question": "How many orders do we have for \"Pride and Prejudice\"?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many orders do we have for \"Pride and Prejudice\"?\n\nSELECT IdOrder FROM Orders WHERE ISBN = '978-1-101-16396-5' AND amount > 0;\n"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": {
      "id": 584,
      "db_id": "book_1",
      "question": "Return the number of orders received for Pride and Prejudice."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the number of orders received for Pride and Prejudice.\n\nSELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Jane Austen') AND IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))\n"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": {
      "id": 585,
      "db_id": "book_1",
      "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".\n\nSELECT IdOrder FROM Orders WHERE IdOrder IN (\n"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": {
      "id": 586,
      "db_id": "book_1",
      "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the order ids for orders that include both Pride and Prejudice and The Little Prince?\n\nSELECT IdOrder FROM Orders WHERE ISBN IN (\n"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": {
      "id": 587,
      "db_id": "book_1",
      "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all book isbns which were ordered by both client Peter Doe and client James Smith.\n\nSELECT ISBN FROM Book WHERE EXISTS(SELECT * FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name='Peter Doe') AND EXISTS(SELECT * FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name='James Smith');\n"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": {
      "id": 588,
      "db_id": "book_1",
      "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the isbns of books ordered by both clients named Peter Doe and James Smith?\n\nSELECT ISBN FROM Book WHERE Title IN (\n"
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": {
      "id": 589,
      "db_id": "book_1",
      "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the title of books which are ordered by client Peter Doe but not client James Smith.\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder WHERE Orders.IdClient = 'PETER DOE' AND Orders.IdClient!= 'JAMES SMITH';\n"
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": {
      "id": 590,
      "db_id": "book_1",
      "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?\n\nSELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Orders ON Author_Book.Author = Orders.IdClient WHERE Orders.IdClient = 'Peter Doe' AND Orders.IdClient!= 'James Smith';\n"
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": {
      "id": 591,
      "db_id": "book_1",
      "question": "Show all client names who have orders for \"Pride and Prejudice\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all client names who have orders for \"Pride and Prejudice\".\n\nSELECT Client.IdOrder, Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')\n"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": {
      "id": 592,
      "db_id": "book_1",
      "question": "What are the names of clients who have ordered Pride and Prejudice?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL)\nCREATE TABLE Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE)\nCREATE TABLE Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25))\nCREATE TABLE Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0)\nCREATE TABLE Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))\nCREATE TABLE Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of clients who have ordered Pride and Prejudice?\n\nSELECT Client.IdOrder, Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')\n"
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": {
      "id": 593,
      "db_id": "book_review",
      "question": "How many books are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many books are there?\n\nSELECT Book_ID FROM book\n\n\n"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": {
      "id": 594,
      "db_id": "book_review",
      "question": "List the titles of books in ascending alphabetical order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the titles of books in ascending alphabetical order.\n\nSELECT book.Book_ID, book.Title FROM book ORDER BY Title ASC;\n\n\n"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": {
      "id": 595,
      "db_id": "book_review",
      "question": "List the titles of books in descending order of pages."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the titles of books in descending order of pages.\n\nSELECT book.Book_ID, book.Title FROM book ORDER BY Pages DESC;\n\n\n"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": {
      "id": 596,
      "db_id": "book_review",
      "question": "What are the types and release dates of books?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the types and release dates of books?\n\nSELECT book.Book_ID, book.Title, book.Release FROM book WHERE book.Type = 'Fiction' AND book.Pages > 500 ORDER BY book.Chapters DESC;\n\n"
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": {
      "id": 597,
      "db_id": "book_review",
      "question": "What are the maximum and minimum number of chapters for each book?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the maximum and minimum number of chapters for each book?\n\nSELECT Book_ID, MAX(Chapters), MIN(Chapters) FROM book GROUP BY Book_ID;\n\n"
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": {
      "id": 598,
      "db_id": "book_review",
      "question": "What are the titles of books that are not \"Poet\"?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles of books that are not \"Poet\"?\n\nSELECT book.Book_ID, book.Title FROM book WHERE book.Type!= 'Poet'\n\n\n"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": {
      "id": 599,
      "db_id": "book_review",
      "question": "What is the average rating in reviews?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average rating in reviews?\n\nSELECT Rating FROM review\n\n\n"
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": {
      "id": 600,
      "db_id": "book_review",
      "question": "What are the titles and ratings of books?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles and ratings of books?\n\nSELECT book.Book_ID, book.Title, review.Rating FROM book INNER JOIN review ON book.Book_ID = review.Book_ID;\n\n"
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": {
      "id": 601,
      "db_id": "book_review",
      "question": "What is the rating of the book with the largest number of chapters?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the rating of the book with the largest number of chapters?\n\nSELECT Rating FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1);\n\n\n"
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": {
      "id": 602,
      "db_id": "book_review",
      "question": "What is the rank of the book with the smallest number of pages?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the rank of the book with the smallest number of pages?\n\nSELECT Rank FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Pages ASC LIMIT 1);\n\n\n"
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": {
      "id": 603,
      "db_id": "book_review",
      "question": "What is the title of the book with the highest rank in the review?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the title of the book with the highest rank in the review?\n\nSELECT book.Book_ID, book.Title FROM book JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rank = (SELECT MAX(review.Rank) FROM review);\n\n\n"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": {
      "id": 604,
      "db_id": "book_review",
      "question": "What is the average number of readers for books of type \"Novel\"?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average number of readers for books of type \"Novel\"?\n\nSELECT Rating, AVG(Readers_in_Million) AS Average_Readers FROM review WHERE Type = 'Novel' GROUP BY Rating;\n\n\n"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": {
      "id": 605,
      "db_id": "book_review",
      "question": "For each book type return the type and the number of books of that type."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each book type return the type and the number of books of that type.\n\nSELECT book.Book_ID, book.Title, book.Type, COUNT(*) AS num_books FROM book GROUP BY book.Type ORDER BY book.Type ASC;\n\n"
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": {
      "id": 606,
      "db_id": "book_review",
      "question": "What is the most common type of books?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the most common type of books?\n\nSELECT book.Book_ID, COUNT(*) AS count FROM review JOIN book ON review.Book_ID = book.Book_ID GROUP BY book.Book_ID ORDER BY count DESC LIMIT 1;\n\n"
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": {
      "id": 607,
      "db_id": "book_review",
      "question": "What are the types of books that have at least three books belonging to?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the types of books that have at least three books belonging to?\n\nSELECT book.Book_ID, book.Title, book.Type FROM book INNER JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rating > 3.5 AND review.Chapters < 10 GROUP BY book.Book_ID HAVING COUNT(*) >= 3 ORDER BY book.Book_ID ASC;\n\n\n"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": {
      "id": 608,
      "db_id": "book_review",
      "question": "List the titles of books in ascending order of the ratings in review?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the titles of books in ascending order of the ratings in review?\n\nSELECT book.Book_ID, book.Title FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC;\n\n\n"
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": {
      "id": 609,
      "db_id": "book_review",
      "question": "List the title and audio length for all the books in descending order of the number of readers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the title and audio length for all the books in descending order of the number of readers.\n\nSELECT book.Book_ID, book.Title, review.Rating, review.Readers_in_Million, review.Rank, book.Audio FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC;\n\n\n"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": {
      "id": 610,
      "db_id": "book_review",
      "question": "How many books do not have reviews?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many books do not have reviews?\n\nSELECT Book_ID FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review);\n\n\n"
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": {
      "id": 611,
      "db_id": "book_review",
      "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.\n\nSELECT book.Book_ID, book.Title, book.Type FROM book WHERE book.Chapters > 75 OR book.Chapters < 50;\n\n"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": {
      "id": 612,
      "db_id": "book_review",
      "question": "How many distinct types of book are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many distinct types of book are there?\n\nSELECT book.Book_ID, COUNT(DISTINCT book.Type) AS num_types FROM book GROUP BY book.Book_ID HAVING COUNT(DISTINCT book.Type) > 1;\n\n"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": {
      "id": 613,
      "db_id": "book_review",
      "question": "What are the type and title of the books that are not rated?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"book\" (\n\"Book_ID\" int,\n\"Title\" text,\n\"Type\" text,\n\"Pages\" int,\n\"Chapters\" int,\n\"Audio\" text,\n\"Release\" text,\nPRIMARY KEY (\"Book_ID\")\n)\nCREATE TABLE \"review\" (\n\"Review_ID\" int,\n\"Book_ID\" int,\n\"Rating\" real,\n\"Readers_in_Million\" real,\n\"Rank\" int,\nPRIMARY KEY (\"Review_ID\"),\nFOREIGN KEY (\"Book_ID\") REFERENCES `book`(\"Book_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the type and title of the books that are not rated?\n\nSELECT book.Book_ID, book.Title FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rating IS NULL;\n\n"
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": {
      "id": 614,
      "db_id": "restaurant_bills",
      "question": "How many customers are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customers are there?\n\nSELECT Customer_ID FROM customer\n\n"
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": {
      "id": 615,
      "db_id": "restaurant_bills",
      "question": "Count the number of customers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of customers.\n\nSELECT Customer_ID FROM customer\n\n"
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": {
      "id": 616,
      "db_id": "restaurant_bills",
      "question": "List the names of customers in ascending order of level of membership."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of customers in ascending order of level of membership.\n\nSELECT customer.Customer_ID, Name FROM customer ORDER BY Level_of_Membership ASC;\n\n\n"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": {
      "id": 617,
      "db_id": "restaurant_bills",
      "question": "Sort all the customers by the level of membership in ascending order, and return the customer names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Sort all the customers by the level of membership in ascending order, and return the customer names.\n\nSELECT customer.Customer_ID, Name FROM customer ORDER BY Level_of_Membership ASC;\n\n\n"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": {
      "id": 618,
      "db_id": "restaurant_bills",
      "question": "What are the nationalities and card credits of customers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the nationalities and card credits of customers?\n\nSELECT customer.Customer_ID, customer.Name, customer.Nationality, customer.Card_Credit FROM customer WHERE customer.Level_of_Membership = 1;\n\n"
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": {
      "id": 619,
      "db_id": "restaurant_bills",
      "question": "Find the nationality and card credit of each customer."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the nationality and card credit of each customer.\n\nSELECT customer.Customer_ID, customer.Name, customer.Nationality, customer.Card_Credit FROM customer ORDER BY customer.Customer_ID;\n\n"
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": {
      "id": 620,
      "db_id": "restaurant_bills",
      "question": "Show the names of customers with nationality \"England\" or \"Australia\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the names of customers with nationality \"England\" or \"Australia\".\n\nSELECT customer.Customer_ID, Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia';\n\n\n"
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": {
      "id": 621,
      "db_id": "restaurant_bills",
      "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which customers have nationality \"England\" or \"Australia\"? Give me their names.\n\nSELECT customer.Customer_ID, Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia';\n\n\n"
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": {
      "id": 622,
      "db_id": "restaurant_bills",
      "question": "What is the average card credit of customers with membership level higher than 1?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average card credit of customers with membership level higher than 1?\n\nSELECT Customer_ID, AVG(Card_Credit) AS Average_Card_Credit FROM customer WHERE Level_of_Membership > 1 GROUP BY Customer_ID;\n"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": {
      "id": 623,
      "db_id": "restaurant_bills",
      "question": "Find the average card credit customers whose membership level is above 1."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the average card credit customers whose membership level is above 1.\n\nSELECT Customer_ID, AVG(Card_Credit) AS Average_Card_Credit FROM customer WHERE Level_of_Membership > 1 GROUP BY Customer_ID;\n"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": {
      "id": 624,
      "db_id": "restaurant_bills",
      "question": "What is the card credit of the customer with the highest membership level?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the card credit of the customer with the highest membership level?\n\nSELECT Customer_ID, Name, Nationality, Card_Credit, Level_of_Membership FROM customer ORDER BY Level_of_Membership DESC LIMIT 1;\n\n"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": {
      "id": 625,
      "db_id": "restaurant_bills",
      "question": "Find the customer with the highest membership level and return his or her card credit."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the customer with the highest membership level and return his or her card credit.\n\nSELECT customer.Customer_ID, customer.Name, customer.Card_Credit, branch.Location_of_office FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID INNER JOIN branch ON customer.Order_ID = branch.Branch_ID WHERE customer.Level_of_Membership = (SELECT MAX(customer.Level_of_Membership) FROM customer);\n\n\n"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": {
      "id": 626,
      "db_id": "restaurant_bills",
      "question": "Show different nationalities of customers, along with the number of customers of each nationality."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show different nationalities of customers, along with the number of customers of each nationality.\n\nSELECT customer.Customer_ID, customer.Name, customer.Nationality, COUNT(customer.Nationality) AS num_customers FROM customer GROUP BY customer.Nationality ORDER BY num_customers DESC;\n\n\n"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": {
      "id": 627,
      "db_id": "restaurant_bills",
      "question": "How many customers are associated with each nationality? List the nationality and the number of customers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many customers are associated with each nationality? List the nationality and the number of customers.\n\nSELECT customer.Customer_ID, customer.Nationality, COUNT(customer.Customer_ID) AS num_customers FROM customer GROUP BY customer.Nationality;\n\n\n"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": {
      "id": 628,
      "db_id": "restaurant_bills",
      "question": "Show the most common nationality of customers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the most common nationality of customers.\n\nSELECT customer.Customer_ID, customer.Name, customer.Nationality, COUNT(customer.Nationality) AS Count FROM customer GROUP BY customer.Nationality ORDER BY Count DESC LIMIT 1;\n\n"
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": {
      "id": 629,
      "db_id": "restaurant_bills",
      "question": "Which nationality does the most customers have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which nationality does the most customers have?\n\nSELECT customer.Customer_ID, customer.Name, customer.Nationality FROM customer ORDER BY COUNT(customer.Nationality) DESC LIMIT 1;\n\n"
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": {
      "id": 630,
      "db_id": "restaurant_bills",
      "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.\n\nSELECT customer.Customer_ID, customer.Name, customer.Nationality, customer.Card_Credit, customer.Level_of_Membership FROM customer WHERE customer.Card_Credit < 50 AND customer.Card_Credit > 75;\n\n"
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": {
      "id": 631,
      "db_id": "restaurant_bills",
      "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which nations have both customers with card credit above 50 and customers with card credit below 75.\n\nSELECT customer.Customer_ID, customer.Name, customer.Nationality FROM customer WHERE customer.Card_Credit > 50 AND customer.Card_Credit < 75;\n\n"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": {
      "id": 632,
      "db_id": "restaurant_bills",
      "question": "Show the names of customers and names of dishes they order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the names of customers and names of dishes they order.\n\nSELECT customer.Customer_ID, branch.Branch_ID, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID INNER JOIN branch ON customer.Order_ID = branch.Branch_ID;\n\n"
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": {
      "id": 633,
      "db_id": "restaurant_bills",
      "question": "For each order, return the customer name and the dish name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each order, return the customer name and the dish name.\n\nSELECT customer.Customer_ID, branch.Branch_ID, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID JOIN branch ON customer_order.Branch_ID = branch.Branch_ID;\n\n"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": {
      "id": 634,
      "db_id": "restaurant_bills",
      "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the names of customers and names of dishes they order, in descending order of the quantity of dish.\n\nSELECT customer.Customer_ID, branch.Branch_ID, customer_order.Dish_Name, customer_order.Quantity FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID INNER JOIN branch ON customer.Order_ID = branch.Branch_ID ORDER BY customer_order.Quantity DESC;\n\n"
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": {
      "id": 635,
      "db_id": "restaurant_bills",
      "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.\n\nSELECT customer.Customer_ID, branch.Branch_ID, customer_order.Dish_Name, customer_order.Quantity FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID INNER JOIN branch ON customer_order.Branch_ID = branch.Branch_ID ORDER BY customer_order.Quantity DESC;\n\n"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": {
      "id": 636,
      "db_id": "restaurant_bills",
      "question": "Show each customer name and the total quantities of dishes ordered by that customer."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show each customer name and the total quantities of dishes ordered by that customer.\n\nSELECT customer.Customer_ID, Name, SUM(Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY Customer_ID;\n\n"
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": {
      "id": 637,
      "db_id": "restaurant_bills",
      "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the total quantities of dishes ordered by each customer? List the customer name and the total quantity.\n\nSELECT customer.Customer_ID, Name, SUM(Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY Customer_ID;\n\n"
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": {
      "id": 638,
      "db_id": "restaurant_bills",
      "question": "Show the customers with total quantity of order bigger than 1."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the customers with total quantity of order bigger than 1.\n\nSELECT customer.Customer_ID, Name, Nationality, Card_Credit, Level_of_Membership FROM customer WHERE (SELECT SUM(Quantity) FROM customer_order WHERE Customer_ID = customer.Customer_ID) > 1;\n\n"
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": {
      "id": 639,
      "db_id": "restaurant_bills",
      "question": "Which customers have total order quantity greater than 1? Give me the customer names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which customers have total order quantity greater than 1? Give me the customer names.\n\nSELECT customer.Customer_ID, Name FROM customer ORDER BY Customer_ID ASC;\n"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": {
      "id": 640,
      "db_id": "restaurant_bills",
      "question": "Show distinct managers of branches."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show distinct managers of branches.\n\nSELECT branch.Branch_ID, branch.Manager FROM customer_order JOIN branch ON customer_order.Branch_ID = branch.Branch_ID GROUP BY branch.Branch_ID HAVING COUNT(DISTINCT branch.Manager) > 1;\n\n"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": {
      "id": 641,
      "db_id": "restaurant_bills",
      "question": "Who are the distinct managers of branches?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Who are the distinct managers of branches?\n\nSELECT branch.Branch_ID, branch.Manager FROM customer_order JOIN branch ON customer_order.Branch_ID = branch.Branch_ID GROUP BY branch.Branch_ID HAVING COUNT(branch.Branch_ID) > 1;\n\n"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": {
      "id": 642,
      "db_id": "restaurant_bills",
      "question": "List the names of customers that do not have any order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of customers that do not have any order.\n\nSELECT customer.Customer_ID, Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Dish_Name IS NULL;\n\n"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": {
      "id": 643,
      "db_id": "restaurant_bills",
      "question": "Which customers do not have any order? Give me the customer names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"customer\" (\n\"Customer_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Card_Credit\" real,\n\"Level_of_Membership\" int,\nPRIMARY KEY (\"Customer_ID\")\n)\nCREATE TABLE \"branch\" (\n\"Branch_ID\" int,\n\"Manager\" text,\n\"Years_opened\" int,\n\"Location_of_office\" text,\nPRIMARY KEY (\"Branch_ID\")\n)\nCREATE TABLE \"customer_order\" (\n\"Customer_ID\" int,\n\"Branch_ID\" int,\n\"Dish_Name\" text,\n\"Quantity\" int,\nPRIMARY KEY (\"Customer_ID\",\"Branch_ID\",\"Dish_Name\"),\nFOREIGN KEY (\"Customer_ID\") REFERENCES `customer`(\"Customer_ID\"),\nFOREIGN KEY (\"Branch_ID\") REFERENCES `branch`(\"Branch_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which customers do not have any order? Give me the customer names.\n\nSELECT customer.Customer_ID, Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL;\n\n"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": {
      "id": 644,
      "db_id": "club_leader",
      "question": "How many members are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many members are there?\n\nSELECT Member_ID FROM member\n\n"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": {
      "id": 645,
      "db_id": "club_leader",
      "question": "List the names of members in ascending order of age."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of members in ascending order of age.\n\nSELECT member.Member_ID, member.Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club.Overall_Ranking > 100 ORDER BY member.Age ASC;\n\n\n"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": {
      "id": 646,
      "db_id": "club_leader",
      "question": "What are the names and nationalities of the members?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and nationalities of the members?\n\nSELECT member.Member_ID, member.Name, member.Nationality FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID\n\n"
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": {
      "id": 647,
      "db_id": "club_leader",
      "question": "List the names of members whose nationality is not `` England '' ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of members whose nationality is not `` England ''.\n\nSELECT member.Member_ID, member.Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID WHERE member.Nationality!= 'England' ORDER BY member.Member_ID ASC;\n\n"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": {
      "id": 648,
      "db_id": "club_leader",
      "question": "Show the names of members whose age is either 19 or 20."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the names of members whose age is either 19 or 20.\n\nSELECT member.Member_ID, member.Name FROM member WHERE member.Age = 19 OR member.Age = 20;\n\n"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": {
      "id": 649,
      "db_id": "club_leader",
      "question": "What is the name of the oldest member?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the oldest member?\n\nSELECT member.Member_ID, Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE Year_Join = (SELECT MIN(Year_Join) FROM club_leader);\n\n\n"
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": {
      "id": 650,
      "db_id": "club_leader",
      "question": "Show different nationalities along with the number of members of each nationality."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show different nationalities along with the number of members of each nationality.\n\nSELECT member.Member_ID, member.Name, member.Nationality, COUNT(member.Member_ID) AS num_members FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID GROUP BY member.Nationality ORDER BY num_members DESC;\n\n\n"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": {
      "id": 651,
      "db_id": "club_leader",
      "question": "Please show the most common nationality of members."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Please show the most common nationality of members.\n\nSELECT member.Member_ID, member.Name, member.Nationality, club.Club_ID, club.Overall_Ranking, club.Team_Leader, club.Club_Name, club_leader.Year_Join FROM member INNER JOIN club ON member.Member_ID = club.Team_Leader INNER JOIN club_leader ON club.Club_ID = club_leader.Club_ID WHERE (club_leader.Year_Join = '2019') GROUP BY member.Member_ID HAVING COUNT(member.Member_ID) > 1 ORDER BY member.Member_ID ASC;\n\n\n"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": {
      "id": 652,
      "db_id": "club_leader",
      "question": "Show the nations that have at least two members."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the nations that have at least two members.\n\nSELECT member.Member_ID, member.Name, member.Nationality FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID GROUP BY member.Nationality HAVING COUNT(member.Nationality) >= 2;\n\n"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": {
      "id": 653,
      "db_id": "club_leader",
      "question": "Show the names of club leaders and the names of clubs they joined."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the names of club leaders and the names of clubs they joined.\n\nSELECT member.Member_ID, member.Name, club.Club_ID, club.Club_Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID\n\n\n"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": {
      "id": 654,
      "db_id": "club_leader",
      "question": "Show the names of club leaders of clubs with overall ranking higher than 100."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the names of club leaders of clubs with overall ranking higher than 100.\n\nSELECT member.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club.club_id = club_leader.Club_ID AND club.Overall_Ranking > 100;\n\n"
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": {
      "id": 655,
      "db_id": "club_leader",
      "question": "Show the names of club leaders that joined their club before 2018."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the names of club leaders that joined their club before 2018.\n\nSELECT member.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club_leader.Year_Join < '2018' AND club_leader.Club_ID IN (SELECT Club_ID FROM club WHERE Team_Leader IS NOT NULL) ORDER BY member.Member_ID ASC;\n\n"
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": {
      "id": 656,
      "db_id": "club_leader",
      "question": "Show the name of the leader of the club named \"Houston\"."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the name of the leader of the club named \"Houston\".\n\nSELECT club_leader.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club_leader.Club_ID IN (SELECT Club_ID FROM club WHERE Club_Name = 'Houston') AND club_leader.Year_Join = '2019' ORDER BY club_leader.Member_ID ASC;\n"
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": {
      "id": 657,
      "db_id": "club_leader",
      "question": "List the names of members that are not club leaders."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of members that are not club leaders.\n\nSELECT member.Member_ID, member.Name FROM member LEFT JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.Member_ID IS NULL;\n\n"
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": {
      "id": 658,
      "db_id": "club_leader",
      "question": "Show the nations that have both members older than 22 and members younger than 19."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the nations that have both members older than 22 and members younger than 19.\n\nSELECT member.Member_ID, member.Name, member.Nationality, club.Club_ID, club.Overall_Ranking, club.Team_Leader, club.Club_Name FROM member INNER JOIN club ON member.Member_ID = club.Club_ID WHERE (member.Age > 22) AND (member.Age < 19);\n\n\n"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": {
      "id": 659,
      "db_id": "club_leader",
      "question": "What is the average age of all the club leaders?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average age of all the club leaders?\n\nSELECT member.Member_ID, member.Name, member.Nationality, member.Age, club.Club_ID, club.Overall_Ranking, club.Team_Leader, club.Club_Name, club_leader.Year_Join FROM member INNER JOIN club ON member.Member_ID = club.Team_Leader INNER JOIN club_leader ON club.Club_ID = club_leader.Club_ID WHERE club_leader.Member_ID = 1 ORDER BY member.Member_ID ASC;\n"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": {
      "id": 660,
      "db_id": "club_leader",
      "question": "Which club name contains the string 'state'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"member\" (\n\"Member_ID\" int,\n\"Name\" text,\n\"Nationality\" text,\n\"Age\" int,\nPRIMARY KEY (\"Member_ID\")\n)\nCREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Overall_Ranking\" int,\n\"Team_Leader\" text,\n\"Club_Name\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"club_leader\" (\n\"Club_ID\" int,\n\"Member_ID\" int,\n\"Year_Join\" text,\nPRIMARY KEY (\"Club_ID\",\"Member_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES `club`(\"Club_ID\"),\nFOREIGN KEY (\"Member_ID\") REFERENCES `member`(\"Member_ID\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which club name contains the string'state'?\n\nSELECT Club_ID FROM club WHERE Club_Name LIKE '%state%';\n"
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 661,
      "db_id": "cre_Doc_and_collections",
      "question": "List all collections' subset. List the subsets' names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all collections' subset. List the subsets' names.\n\nSELECT Collection_Subset_Members.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Document_Subset_ID;\n\n"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 662,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection susbset names?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the collection susbset names?\n\nSELECT Collection_Subset_Members.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Document_Subset_ID;\n\n"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 663,
      "db_id": "cre_Doc_and_collections",
      "question": "What is detail of collection subset with name 'Top collection'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is detail of collection subset with name 'Top collection'?\n\nSELECT Collection_Subset_Members.Collection_Subset_ID, Collection_Subset_Members.Collection_Subset_Name, Collection_Subset_Members.Collection_Subset_Details FROM Collection_Subset_Members JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collection_Subset_Members.Collection_Subset_Name = 'Top collection';\n\n\n"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 664,
      "db_id": "cre_Doc_and_collections",
      "question": "What collection details are there on the subset named 'Top collection'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What collection details are there on the subset named 'Top collection'?\n\nSELECT Collection_ID, Collection_Name, Collection_Description FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM"
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 665,
      "db_id": "cre_Doc_and_collections",
      "question": "List all documents's subset. List the subset's name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all documents's subset. List the subset's name.\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID\n\n"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 666,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the document subset names?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the document subset names?\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Members.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Documents_in_Collections.Collection_ID IN (SELECT Collections.Collection_ID FROM Collections JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Collection_ID WHERE Collection_Subset_Members.Collection_Subset_ID IN (SELECT Collection_Subsets.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Subset 1')))\n\n"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 667,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the detail of document subset with name 'Best for 2000'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the detail of document subset with name 'Best for 2000'?\n\nSELECT Document_Subset_Members.Related_Collection_ID, Collection_Subset_Members.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, Collection_Subsets.Collection_Subset_Details FROM Document_Subset_Members JOIN Collection_Subset_Members ON Document_Subset_Members.Document_Object_ID = Collection_Subset_Members.Collection_ID JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Document_Subset_Members.Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Collection_Subset_Members.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Best for 2000')\n\n\n"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 668,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the details on the document subsets that are named 'Best for 2000'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the details on the document subsets that are named 'Best for 2000'?\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Details FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Members.Owner = 'Best for 2000';\n\n\n"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 669,
      "db_id": "cre_Doc_and_collections",
      "question": "List document id of all documents."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List document id of all documents.\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 1;\n"
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 670,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the object id of the document objects?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the object id of the document objects?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1;\n"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 671,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the parent document of document owned by Marlin? List the document id."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the parent document of document owned by Marlin? List the document id.\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Parent_Document_Object_ID IS NULL;\n\n"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 672,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the document object ids of the objects owned by Marlin?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the document object ids of the objects owned by Marlin?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin') GROUP BY Document_Subset_Members.Related_Document_Object_ID HAVING COUNT(*) > 0\n\n"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 673,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the owner of document with the Description 'Braeden Collection'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the owner of document with the Description 'Braeden Collection'?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members\n"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 674,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the owners of the document objects described as the 'Braeden Collection'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the owners of the document objects described as the 'Braeden Collection'?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID = Document_Object_ID AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Braeden Collection')))\n\n"
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 675,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the owner of the parent document of document owned by 'Marlin'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the owner of the parent document of document owned by 'Marlin'?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Object_ID = 1 AND Owner = 'Marlin';\n\n"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 676,
      "db_id": "cre_Doc_and_collections",
      "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Who is the owner of the parent document of every documents where 'Marlin' is the owner?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin') GROUP BY Document_Subset_Members.Related_Document_Object_ID HAVING COUNT(*) > 0\n\n"
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 677,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different descriptions of all the parent documents?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different descriptions of all the parent documents?\n\nSELECT Document_Objects.Related_Collection_ID, Document_Object_Description.Description FROM Document_Object_Description JOIN Document_Object ON Document_Object_Description.Document_Object_ID = Document_Object.Document_Object_ID WHERE Document_Object.Parent_Document_Object_ID IS NOT NULL;\n\n"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 678,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the unique description of every parent document?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the unique description of every parent document?\n\nSELECT Document_Objects.Related_Collection_ID, Document_Object_Description.Description FROM Document_Object_Description JOIN Document_Object ON Document_Object_Description.Document_Object_ID = Document_Object.Document_Object_ID WHERE Document_Object.Parent_Document_Object_ID IS NOT NULL;\n\n"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 679,
      "db_id": "cre_Doc_and_collections",
      "question": "How many documents owned by Marlin?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many documents owned by Marlin?\n\nSELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Object_ID) AS Count\n"
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 680,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the count of documents owned by Marlin?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the count of documents owned by Marlin?\n\nSELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS Count_of_documents_owned_by_Marlin\n"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 681,
      "db_id": "cre_Doc_and_collections",
      "question": "List all documents ids that are not the parent of other documents."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all documents ids that are not the parent of other documents.\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1;\n"
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 682,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the ids of the documents that are not parent documents?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids of the documents that are not parent documents?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 1 AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 2)\n\n"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 683,
      "db_id": "cre_Doc_and_collections",
      "question": "How many child documents does each parent document has? List the document id and the number."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many child documents does each parent document has? List the document id and the number.\n\nSELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) AS Child_Count FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Object_ID;\n\n"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 684,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the number of child documents for each parent document, and what are the ids of the parent documents?\n\nSELECT Document_Objects.Related_Collection_ID, COUNT(*) AS Child_Count FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Object_ID HAVING COUNT(*) > 1;\n\n"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 685,
      "db_id": "cre_Doc_and_collections",
      "question": "List the name of all collections."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the name of all collections.\n\nSELECT Collection_ID, Collection_Name FROM Collections;\n\n"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 686,
      "db_id": "cre_Doc_and_collections",
      "question": "what are the collection names?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: what are the collection names?\n\nSELECT Collection_ID FROM Collections WHERE Parent_Collection_ID IS NULL\n\n"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 687,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the description of collection named Best?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the description of collection named Best?\n\nSELECT Collection_Subset_Members.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, Collection_Subsets.Collection_Subset_Details, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name, Document_Subsets.Document_Subset_Details FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID JOIN Document_Subset_Members ON Collection_Subset_Members.Collection_Subset_ID = Document_Subset_Members.Collection_Subset_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Best' AND Document_Subsets.Document_Subset_Name = 'Best' ORDER BY Collection_Subsets.Collection_Subset_Name ASC, Document_Subsets.Document_Subset_Name ASC;\n\n"
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 688,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection descriptions that are named as 'Best'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the collection descriptions that are named as 'Best'?\n\nSELECT Collection_ID, Collection_Description FROM Collections WHERE Collection_Name = 'Best';\n\n"
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 689,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the name of the parent collection of the collection named Nice?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the parent collection of the collection named Nice?\n\nSELECT Collection_Subset_Members.Collection_ID, Collections.Parent_Collection_ID, Collections.Collection_Name FROM Collection_Subset_Members JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collection_Subset_Members.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Nice') AND Collection_Subset_Members.Related_Collection_ID IS NULL;\n\n"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 690,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the names of all parent collections of the collection named Nice?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all parent collections of the collection named Nice?\n\nSELECT Collection_ID FROM Collections WHERE Collection_Name = 'Nice'\n"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 691,
      "db_id": "cre_Doc_and_collections",
      "question": "Which collection is not the parent of other collection? List the collection's name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which collection is not the parent of other collection? List the collection's name.\n\nSELECT Collection_ID FROM Collections WHERE Parent_Collection_ID IS NULL;\n"
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 692,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the names of the collections that are not the parent of the other collections?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the collections that are not the parent of the other collections?\n\nSELECT Collection_ID FROM Collections WHERE Parent_Collection_ID IS NULL\n\n"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 693,
      "db_id": "cre_Doc_and_collections",
      "question": "List document that have more than one child. List the document id."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List document that have more than one child. List the document id.\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 2)\n\n"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 694,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the ids of the documents that have more than one child?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids of the documents that have more than one child?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 2)\n\n"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 695,
      "db_id": "cre_Doc_and_collections",
      "question": "How many child collection does the collection named Best has?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many child collection does the collection named Best has?\n\nSELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'\n"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 696,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of child collections belonging to the collection named Best?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the number of child collections belonging to the collection named Best?\n\nSELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'\n"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 697,
      "db_id": "cre_Doc_and_collections",
      "question": "List all document which is related to document owned by Ransom . List the document id ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all document which is related to document owned by Ransom. List the document id.\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom') GROUP BY Document_Subset_Members.Related_Document_Object_ID HAVING COUNT(*) > 0\n\n"
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 698,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the document object ids of the related to the document owned by Ransom ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the document object ids of the related to the document owned by Ransom?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members\n"
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 699,
      "db_id": "cre_Doc_and_collections",
      "question": "List collection subset id, name and number of collections in each subset."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List collection subset id, name and number of collections in each subset.\n\nSELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Number_of_Collections FROM Collection_Subsets LEFT JOIN Collection_Subset_Members ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID GROUP BY Collection_Subset_ID ORDER BY Collection_Subset_ID ASC;\n\n"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 700,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection subset ids, names, and number of collections for each subset?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the collection subset ids, names, and number of collections for each subset?\n\nSELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Number_of_Collections FROM Collection_Subset_Members GROUP BY Collection_Subset_ID, Collection_Subset_Name;\n\n"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 701,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document has most of child? List the document id and the number of child."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which document has most of child? List the document id and the number of child.\n\nSELECT Document_Objects.Related_Collection_ID, COUNT(*) AS Child_Count FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Object_ID ORDER BY Child_Count DESC LIMIT 1;\n\n"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 702,
      "db_id": "cre_Doc_and_collections",
      "question": "For each document object id, how many children do they have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each document object id, how many children do they have?\n\nSELECT Document_Objects.Related_Collection_ID, COUNT(Collection_Subset_Members.Collection_Subset_ID) AS Count FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Collection_Subset_Members ON Collection_Subset_Members.Related_Collection_ID = Document_Objects.Parent_Document_Object_ID GROUP BY Document_Object_ID;\n\n"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 703,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document has least number of related documents? List the document id and the number of related documents."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which document has least number of related documents? List the document id and the number of related documents.\n\nSELECT Document_Objects.Related_Collection_ID, COUNT(Collection_Subset_Members.Collection_Subset_ID) AS Number_of_Related_Documents FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subset_Members ON Document_Subset_Members.Related_Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subset_Members ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID JOIN Document_Subset_Members ON Document_Subset_Members.Related_Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subset_Members ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID JOIN Document_Subset_Members ON Document_Subset_Members.Related_Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subset_Members ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Sub"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 704,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the document object id with the least number of documents ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the document object id with the least number of documents?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 1 AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 2)\n\n"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 705,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which document has between 2 and 4 number of documents? List the document id and the number of related documents.\n\nSELECT Document_Objects.Related_Collection_ID, COUNT(Collection_Subset_Members.Collection_Subset_ID) AS Number_of_Related_Documents FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID JOIN Collection_Subset_Members ON Document_Subset_Members.Related_Document_Object_ID = Collection_Subset_Members.Collection_ID JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID GROUP BY Document_Subset_Members.Document_Object_ID HAVING COUNT(Collection_Subset_Members.Collection_Subset_ID) BETWEEN 2 AND 4;\n\n"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 706,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 1 AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 1 GROUP BY Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4)\n\n"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 707,
      "db_id": "cre_Doc_and_collections",
      "question": "List all owner of documents that is related to documents owned by Braeden."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all owner of documents that is related to documents owned by Braeden.\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden') GROUP BY Document_Subset_Members.Related_Document_Object_ID HAVING COUNT(*) > 0\n\n"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 708,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different owners of documents that are related to ones owned by Braeden?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different owners of documents that are related to ones owned by Braeden?\n\nSELECT Document_Objects.Related_Collection_ID, Document_Object_Owners.Owner\n"
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 709,
      "db_id": "cre_Doc_and_collections",
      "question": "Which unique subset does document owned by Braeden belong to? List the subset name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which unique subset does document owned by Braeden belong to? List the subset name.\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Members.Owner = 'Braeden' AND Document_Subset_Members.Document_Object_ID = 1 GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID HAVING COUNT(*)=1;\n\n"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 710,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different subset names of all documents owned by Braeden?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different subset names of all documents owned by Braeden?\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Members.Owner = 'Braeden' GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name HAVING COUNT(*) > 1\n\n"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 711,
      "db_id": "cre_Doc_and_collections",
      "question": "List subset id, name and number of different documents in each subset."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List subset id, name and number of different documents in each subset.\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, COUNT(DISTINCT Document_Objects.Owner) AS num_docs FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID ORDER BY Document_Subset_Members.Related_Collection_ID ASC, Document_Subset_Members.Document_Subset_ID ASC;\n\n"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 712,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the subset id, name, and number of different documents for each subset?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the subset id, name, and number of different documents for each subset?\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subset_Members.Document_Subset_Name, COUNT(DISTINCT Document_Objects.Owner) AS Number_of_Different_Documents FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subset_Members.Document_Subset_Name ORDER BY Document_Subset_Members.Related_Collection_ID ASC, Document_Subset_Members.Document_Subset_ID ASC;\n\n"
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 713,
      "db_id": "cre_Doc_and_collections",
      "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which document subset has most of number of distinct documents? List subset id, name and number of documents.\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, COUNT(DISTINCT Document_Objects.Owner) AS num_docs FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID ORDER BY num_docs DESC LIMIT 1;\n\n"
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 714,
      "db_id": "cre_Doc_and_collections",
      "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For the document subset with the most number of different documents, what are the ids and names of the subset, as well as the number of documents?\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS num_docs FROM Document_Subset_Members GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID ORDER BY num_docs DESC LIMIT 1;\n\n"
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 715,
      "db_id": "cre_Doc_and_collections",
      "question": "For document subset named 'Best for 2000', List all document id that in this subset."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For document subset named 'Best for 2000', List all document id that in this subset.\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subsets.Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Document_Subset_Members.Related_Document_Object_ID = Document_Object_ID\n\n"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 716,
      "db_id": "cre_Doc_and_collections",
      "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For the document subset named 'Best for 2000', what are the document ids in that subset?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subsets.Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Document_Subset_Members.Related_Document_Object_ID = Document_Object_ID;\n\n"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 717,
      "db_id": "cre_Doc_and_collections",
      "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all document subsets of documents that related to each document id. List the name of document subset and the document id.\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Object_ID = 1;\n\n"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 718,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different subsets of documents related to each document id, list the name of the document subset and id of the actual document?\n\nSELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Subset_Members.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID = 1);\n\n\n"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 719,
      "db_id": "cre_Doc_and_collections",
      "question": "List the Collection Name that document owned by 'Ransom ' belong to ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the Collection Name that document owned by 'Ransom'belong to.\n\nSELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')\n"
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 720,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the collection name of a document owned by 'Ransom'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the collection name of a document owned by 'Ransom'?\n\nSELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Parent_Collection_ID IS NULL)\n\n"
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 721,
      "db_id": "cre_Doc_and_collections",
      "question": "How many collections does each document belong to? List the count and the document id."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many collections does each document belong to? List the count and the document id.\n\nSELECT Document_Objects.Collection_ID, COUNT(Collection_ID) AS Count FROM Documents_in_Collections JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Object_ID;\n\n"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 722,
      "db_id": "cre_Doc_and_collections",
      "question": "For each document object id, how many collections does it belong to?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each document object id, how many collections does it belong to?\n\nSELECT Document_Objects.Related_Collection_ID, COUNT(Collection_Subset_Members.Collection_ID) AS Count FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID JOIN Collection_Subset_Members ON Document_Subsets.Document_Subset_ID = Collection_Subset_Members.Collection_Subset_ID JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID GROUP BY Document_Subset_Members.Document_Object_ID HAVING COUNT(Collection_Subset_Members.Collection_ID) > 1;\n\n"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 723,
      "db_id": "cre_Doc_and_collections",
      "question": "How many documents does collection named 'Best' has?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many documents does collection named 'Best' has?\n\nSELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Object_ID) AS Count\n"
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 724,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of documents in the collection named 'Best'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the number of documents in the collection named 'Best'?\n\nSELECT Document_Objects.Collection_ID\n"
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 725,
      "db_id": "cre_Doc_and_collections",
      "question": "List the document id of all documents in collection named Best."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the document id of all documents in collection named Best.\n\nSELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'));\n\n"
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 726,
      "db_id": "cre_Doc_and_collections",
      "question": "What is the number of document object ids in the collection named Best?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the number of document object ids in the collection named Best?\n\nSELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Collection_ID = 1;\n"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 727,
      "db_id": "cre_Doc_and_collections",
      "question": "Which collection have most number of documents? List collection name, id and number of documents."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which collection have most number of documents? List collection name, id and number of documents.\n\nSELECT Collection_ID, Collection_Name, COUNT(DISTINCT Document_Object_ID) AS NumDocs FROM Documents_in_Collections GROUP BY Collection_ID ORDER BY NumDocs DESC LIMIT 1;\n\n"
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 728,
      "db_id": "cre_Doc_and_collections",
      "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?\n\nSELECT Collection_ID, Collection_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best' GROUP BY Collection_ID HAVING COUNT(DISTINCT Document_Object_ID) > ALL ( SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best' ) ORDER BY num_docs DESC LIMIT 1;\n\n\n"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 729,
      "db_id": "cre_Doc_and_collections",
      "question": "List id of documents that in document subset Best for 2000 and collection named Best."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List id of documents that in document subset Best for 2000 and collection named Best.\n\nSELECT Document_Objects.Collection_ID FROM Document_Subset_Members\n"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 730,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'John Doe') UNION SELECT Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'John Doe' AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000')) UNION SELECT Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Jane Doe' AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 731,
      "db_id": "cre_Doc_and_collections",
      "question": "List id of documents that in collection named Best but not in document subset Best for 2000."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List id of documents that in collection named Best but not in document subset Best for 2000.\n\nSELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') AND Related_Document_Object_ID = (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = '2000'));\n\n"
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 732,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Best') EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 2 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Best')\n\n"
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 733,
      "db_id": "cre_Doc_and_collections",
      "question": "List id of documents that in document subset Best for 2000 or in collection named Best."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List id of documents that in document subset Best for 2000 or in collection named Best.\n\nSELECT Document_Objects.Collection_ID FROM Document_Subset_Members\n"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 734,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?\n\nSELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Documents_in_Collections.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collections.Collection_Name = 'Best')\n\n"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 735,
      "db_id": "cre_Doc_and_collections",
      "question": "List all name of collections that are related to collection named Best."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all name of collections that are related to collection named Best.\n\nSELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'\n"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 736,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the names of the collections that are related to the collection named Best?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the collections that are related to the collection named Best?\n\nSELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'\n\n"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 737,
      "db_id": "cre_Doc_and_collections",
      "question": "How many collections that are related to collection named Best?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many collections that are related to collection named Best?\n\nSELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'\n"
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 738,
      "db_id": "cre_Doc_and_collections",
      "question": "How many different collections are related to the one named 'Best'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many different collections are related to the one named 'Best'?\n\nSELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'\n"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 739,
      "db_id": "cre_Doc_and_collections",
      "question": "Which collection subset does collection name Best in? List collection subset name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which collection subset does collection name Best in? List collection subset name.\n\nSELECT Collection_Subset_Members.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Best in' AND Collection_Subset_Members.Collection_ID IN (SELECT Collections.Collection_ID FROM Collections WHERE Collections.Collection_Name = 'Best in') GROUP BY Collection_Subset_Members.Collection_Subset_ID HAVING COUNT(Collection_Subset_Members.Collection_ID) > 1\n\n"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": {
      "id": 740,
      "db_id": "cre_Doc_and_collections",
      "question": "What are the collection subsets that the collection named 'Best' in?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n)\nCREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n)\nCREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n)\nCREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n)\nCREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n)\nCREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the collection subsets that the collection named 'Best' in?\n\nSELECT Collection_Subset_Members.Collection_Subset_ID FROM Collections\n"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": {
      "id": 741,
      "db_id": "sing_contest",
      "question": "How many songs contain \"Love\" in their names?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many songs contain \"Love\" in their names?\n\nSELECT songs_id FROM performance_score WHERE participant_id = 1;\n"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": {
      "id": 742,
      "db_id": "sing_contest",
      "question": "List the name of the songs in ascending, lexicographical order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the name of the songs in ascending, lexicographical order.\n\nSELECT songs.songs_id FROM performance_score WHERE participant_id = 1 ORDER BY songs.name ASC;\n\n\n"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": {
      "id": 743,
      "db_id": "sing_contest",
      "question": "List the names and languages of the songs ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names and languages of the songs.\n\nSELECT songs.songs_id, songs.name, songs.language FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE participant_id = 1;\n\n"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": {
      "id": 744,
      "db_id": "sing_contest",
      "question": "What are the maximum and minimum voice sound quality score of the performances?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the maximum and minimum voice sound quality score of the performances?\n\nSELECT voice_sound_quality FROM performance_score WHERE participant_id = (SELECT id FROM participants ORDER BY popularity DESC LIMIT 1) UNION SELECT voice_sound_quality FROM performance_score WHERE participant_id = (SELECT id FROM participants ORDER BY popularity ASC LIMIT 1);\n\n\n"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": {
      "id": 745,
      "db_id": "sing_contest",
      "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?\n\nSELECT performance_score.voice_sound_quality, performance_score.rhythm_tempo, performance_score.stage_presence FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id WHERE name='Freeway';\n\n\n"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": {
      "id": 746,
      "db_id": "sing_contest",
      "question": "What are the id, language and original artist of the songs whose name is not 'Love'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the id, language and original artist of the songs whose name is not 'Love'?\n\nSELECT songs_id, language, original_artist FROM performance_score WHERE participant_id = 1 AND songs_id IN (SELECT id FROM songs WHERE name!= 'Love');\n\n\n"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": {
      "id": 747,
      "db_id": "sing_contest",
      "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and original artists of the song whose English translation is 'All the streets of love'?\n\nSELECT songs.songs_id, songs.name, songs.original_artist FROM performance_score INNER JOIN participants ON performance_score.participant_id = participants.id INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.english_translation = 'All the streets of love';\n\n\n"
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": {
      "id": 748,
      "db_id": "sing_contest",
      "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the distinct stage presence scores for all the songs that are in language 'English'?\n\nSELECT stage_presence FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English') GROUP BY stage_presence HAVING COUNT(*) > 1;\n\n\n"
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": {
      "id": 749,
      "db_id": "sing_contest",
      "question": "What are the ids and names of the participants who have performed at least two songs?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids and names of the participants who have performed at least two songs?\n\nSELECT participants.participant_id, participants.name FROM performance_score INNER JOIN participants ON participants.id = performance_score.participant_id GROUP BY participant_id HAVING COUNT(participant_id) >= 2;\n\n\n"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": {
      "id": 750,
      "db_id": "sing_contest",
      "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids, names and popularity of the participants, order by the number of songs they perform?\n\nSELECT participants.participant_id, participants.name, participants.popularity FROM performance_score INNER JOIN participants ON performance_score.participant_id = participants.id GROUP BY participant_id ORDER BY COUNT(participant_id) DESC;\n\n\n"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": {
      "id": 751,
      "db_id": "sing_contest",
      "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?\n\nSELECT participants.participant_id, participants.name FROM performance_score INNER JOIN participants ON performance_score.participant_id = participants.id WHERE voice_sound_quality = 5 OR rhythm_tempo = 5;\n\n"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": {
      "id": 752,
      "db_id": "sing_contest",
      "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the voice sound quality scores received for the song named'The Balkan Girls'in English language?\n\nSELECT performance_score.voice_sound_quality FROM songs WHERE songs.name = 'The Balkan Girls' AND songs.english_translation IS NOT NULL AND songs.language = 'English' INNER JOIN performance_score ON performance_score.songs_id = songs.id;\n\n\n"
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": {
      "id": 753,
      "db_id": "sing_contest",
      "question": "What are the id and name of the song sung by the most participants?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the id and name of the song sung by the most participants?\n\nSELECT songs_id, name FROM performance_score GROUP BY songs_id ORDER BY COUNT(*) DESC LIMIT 1;\n\n"
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": {
      "id": 754,
      "db_id": "sing_contest",
      "question": "How many performances have a stage presence score less than 7 or higher than 9?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many performances have a stage presence score less than 7 or higher than 9?\n\nSELECT performance_score.songs_id FROM performance_score WHERE (performance_score.stage_presence < 7 OR performance_score.stage_presence > 9) GROUP BY performance_score.songs_id HAVING COUNT(*) = 1;\n\n\n"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": {
      "id": 755,
      "db_id": "sing_contest",
      "question": "How many songs listed are not performed?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many songs listed are not performed?\n\nSELECT songs_id FROM performance_score WHERE participant_id IS NULL;\n"
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": {
      "id": 756,
      "db_id": "sing_contest",
      "question": "What are the average rhythm scores for the songs in each different language?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the average rhythm scores for the songs in each different language?\n\nSELECT songs_id, AVG(rhythm_tempo) AS avg_rhythm FROM performance_score GROUP BY songs_id HAVING COUNT(*) > 1 ORDER BY avg_rhythm DESC;\n\n\n"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": {
      "id": 757,
      "db_id": "sing_contest",
      "question": "What are the distinct names of the participants who have sung a song in 'English'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the distinct names of the participants who have sung a song in 'English'?\n\nSELECT participants.participant_id, participants.name FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English';\n\n\n"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": {
      "id": 758,
      "db_id": "sing_contest",
      "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?\n\nSELECT participants.participant_id, participants.name, participants.popularity FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language IN ('Croatian', 'English') GROUP BY participant_id HAVING COUNT(*) > 1 ORDER BY participant_id ASC;\n\n\n"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": {
      "id": 759,
      "db_id": "sing_contest",
      "question": "Which song names have the substring \"Is\"?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which song names have the substring \"Is\"?\n\nSELECT songs_id FROM performance_score WHERE participant_id = 1 AND voice_sound_quality > 0.5;\n"
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": {
      "id": 760,
      "db_id": "sing_contest",
      "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"participants\" (\n\"id\" int,\n\"name\" text,\n\"popularity\" real,\nprimary key (\"id\")\n)\nCREATE TABLE \"songs\" (\n\"id\" int,\n\"language\" text,\n\"original_artist\" text,\n\"name\" text,\n\"english_translation\" text,\nprimary key (\"id\")\n)\nCREATE TABLE \"performance_score\" (\n\"participant_id\" int,\n\"songs_id\" int,\n\"voice_sound_quality\" real,\n\"rhythm_tempo\" real,\n\"stage_presence\" real,\nprimary key (\"participant_id\", \"songs_id\"),\nforeign key(\"participant_id\") references `participants`(\"id\"),\nforeign key(\"songs_id\") references `songs`(\"id\")\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the original artists who sing songs with rhythm tempo above 5, and list results in descending order of voice sound quality.\n\nSELECT songs.songs_id, songs.original_artist FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC;\n\n\n"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": {
      "id": 761,
      "db_id": "address_1",
      "question": "How many cities do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many cities do we have?\n\nSELECT country FROM City\n\n"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": {
      "id": 762,
      "db_id": "address_1",
      "question": "Count the number of cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of cities.\n\nSELECT country FROM City\n\n"
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": {
      "id": 763,
      "db_id": "address_1",
      "question": "List all different states ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all different states.\n\nSELECT state FROM City WHERE state NOT IN (SELECT DISTINCT state FROM City);\n"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": {
      "id": 764,
      "db_id": "address_1",
      "question": "What are all the distinct states?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are all the distinct states?\n\nSELECT state FROM City\n\n"
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": {
      "id": 765,
      "db_id": "address_1",
      "question": "How many countries do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many countries do we have?\n\nSELECT country FROM City\n\n"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": {
      "id": 766,
      "db_id": "address_1",
      "question": "Count the number of coutries."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of coutries.\n\nSELECT country FROM City\n\n"
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": {
      "id": 767,
      "db_id": "address_1",
      "question": "Show names, codes, states, countries for all cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show names, codes, states, countries for all cities.\n\nSELECT city_name, city_code, state, country FROM City;\n\n"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": {
      "id": 768,
      "db_id": "address_1",
      "question": "What are the names, codes, states, and countries for all cities?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names, codes, states, and countries for all cities?\n\nSELECT city_name, city_code, state, country FROM City;\n\n"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": {
      "id": 769,
      "db_id": "address_1",
      "question": "What is the latitude and longitude for Baltimore?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the latitude and longitude for Baltimore?\n\nSELECT latitude,longitude FROM City WHERE city_name = 'Baltimore';\n\n"
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": {
      "id": 770,
      "db_id": "address_1",
      "question": "What latitude and longitude correspond to Baltimore?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What latitude and longitude correspond to Baltimore?\n\nSELECT latitude,longitude FROM City WHERE city_name = 'Baltimore';\n\n"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": {
      "id": 771,
      "db_id": "address_1",
      "question": "Show names for all cities in state PA."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show names for all cities in state PA.\n\nSELECT city_name FROM City WHERE state = 'PA';\n\n"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": {
      "id": 772,
      "db_id": "address_1",
      "question": "What are the names of all cities in PA?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all cities in PA?\n\nSELECT city_name FROM City WHERE state = 'PA';\n\n"
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": {
      "id": 773,
      "db_id": "address_1",
      "question": "How many cities are in Canada?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many cities are in Canada?\n\nSELECT country FROM City WHERE country = 'Canada';\n\n"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": {
      "id": 774,
      "db_id": "address_1",
      "question": "Count the number of cities in Canada."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of cities in Canada.\n\nSELECT country FROM City WHERE country = 'Canada';\n\n"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": {
      "id": 775,
      "db_id": "address_1",
      "question": "Show names for all USA city ordered by latitude."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show names for all USA city ordered by latitude.\n\nSELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC;\n"
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": {
      "id": 776,
      "db_id": "address_1",
      "question": "What are all the city names for cities in the USA, ordered by latitude?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are all the city names for cities in the USA, ordered by latitude?\n\nSELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC;\n"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": {
      "id": 777,
      "db_id": "address_1",
      "question": "Show all states and number of cities in each state."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all states and number of cities in each state.\n\nSELECT state, COUNT(*) AS num_cities FROM City GROUP BY state ORDER BY state ASC;\n"
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": {
      "id": 778,
      "db_id": "address_1",
      "question": "How many cities are in each state?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many cities are in each state?\n\nSELECT country,state,count(*) as num_cities FROM City GROUP BY state ORDER BY num_cities DESC;\n"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": {
      "id": 779,
      "db_id": "address_1",
      "question": "Show all countries and number of cities in each ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all countries and number of cities in each.\n\nSELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY num_cities DESC;\n"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": {
      "id": 780,
      "db_id": "address_1",
      "question": "How many cities are there in each country?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many cities are there in each country?\n\nSELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY country ASC;\n"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": {
      "id": 781,
      "db_id": "address_1",
      "question": "List all states with at least two cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all states with at least two cities.\n\nSELECT state FROM City WHERE city_code IN (SELECT DISTINCT city1_code FROM Direct_distance UNION SELECT DISTINCT city2_code FROM Direct_distance) GROUP BY state HAVING COUNT(*)>1;\n"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": {
      "id": 782,
      "db_id": "address_1",
      "question": "Which states have at least two cities?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which states have at least two cities?\n\nSELECT state FROM City WHERE city_code IN (SELECT DISTINCT city1_code FROM Direct_distance UNION SELECT DISTINCT city2_code FROM Direct_distance);\n"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": {
      "id": 783,
      "db_id": "address_1",
      "question": "Which state has most number of cities?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which state has most number of cities?\n\nSELECT state FROM City WHERE city_code IN (SELECT city_code FROM City GROUP BY city_code HAVING COUNT(*)>1);\n"
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": {
      "id": 784,
      "db_id": "address_1",
      "question": "Give the state that has the most cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the state that has the most cities.\n\nSELECT state FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance) GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;\n"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": {
      "id": 785,
      "db_id": "address_1",
      "question": "Which country has fewest number of cities?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which country has fewest number of cities?\n\nSELECT country FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = 'NYC') AND city_code NOT IN (SELECT city1_code FROM Direct_distance WHERE city2_code = 'NYC')\n"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": {
      "id": 786,
      "db_id": "address_1",
      "question": "Give the country with the fewest number of cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the country with the fewest number of cities.\n\nSELECT country FROM City WHERE city_code IN (SELECT city_code FROM City GROUP BY city_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM City GROUP BY city_code));\n"
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": {
      "id": 787,
      "db_id": "address_1",
      "question": "Show the first name and the last name for students living in state MD."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the first name and the last name for students living in state MD.\n\nSELECT Student.latitude,Student.longitude FROM Student WHERE Student.city_code = 'MD';\n\n"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": {
      "id": 788,
      "db_id": "address_1",
      "question": "What are the full names of students living in MD?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the full names of students living in MD?\n\nSELECT Student.state,Student.city_code,City.city_name FROM Student INNER JOIN City ON Student.city_code=City.city_code WHERE Student.state='MD' AND Student.city_code=City.city_code;\n"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": {
      "id": 789,
      "db_id": "address_1",
      "question": "How many students live in China?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many students live in China?\n\nSELECT country FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE city_code = 'CHN')\n"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": {
      "id": 790,
      "db_id": "address_1",
      "question": "Count the number of students living in China."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of students living in China.\n\nSELECT country FROM City WHERE city_name = 'China'\n"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": {
      "id": 791,
      "db_id": "address_1",
      "question": "Return the first name and major of students are living in Baltimore?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the first name and major of students are living in Baltimore?\n\nSELECT Student.state,Sudent.major FROM Student WHERE Student.city_code = 'BAL' ORDER BY Student.Fname ASC;\n"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": {
      "id": 792,
      "db_id": "address_1",
      "question": "What are the first names and majors of students living in Baltimore?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the first names and majors of students living in Baltimore?\n\nSELECT Student.state,Student.Fname,Student.Major FROM Student,City WHERE Student.city_code=City.city_code AND City.state='MD' ORDER BY Student.sta_id ASC;\n"
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": {
      "id": 793,
      "db_id": "address_1",
      "question": "Show the number of students living in each country."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the number of students living in each country.\n\nSELECT country, COUNT(*) AS num_students FROM (SELECT DISTINCT city.country as country FROM Student JOIN City ON Student.city_code = City.city_code ) GROUP BY country ORDER BY num_students DESC;\n"
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": {
      "id": 794,
      "db_id": "address_1",
      "question": "How many students live in each country?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many students live in each country?\n\nSELECT country, COUNT(*) AS num_students FROM Student GROUP BY country ORDER BY num_students DESC;\n"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": {
      "id": 795,
      "db_id": "address_1",
      "question": "Find the number of students living in each city."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of students living in each city.\n\nSELECT city_name, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city_name ORDER BY num_students DESC;\n"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": {
      "id": 796,
      "db_id": "address_1",
      "question": "How many students live in each city?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many students live in each city?\n\nSELECT city_name, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city_name ORDER BY num_students DESC;\n"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": {
      "id": 797,
      "db_id": "address_1",
      "question": "Which state has most number of students?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which state has most number of students?\n\nSELECT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*)>1);\n"
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": {
      "id": 798,
      "db_id": "address_1",
      "question": "Give the state that has the most students."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the state that has the most students.\n\nSELECT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Student GROUP BY StuID));\n"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": {
      "id": 799,
      "db_id": "address_1",
      "question": "Which country has least number of students?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which country has least number of students?\n\nSELECT country FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY city_code));\n"
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": {
      "id": 800,
      "db_id": "address_1",
      "question": "Give the country with the fewest students."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the country with the fewest students.\n\nSELECT country FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY city_code));\n"
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": {
      "id": 801,
      "db_id": "address_1",
      "question": "Show names for all cities where at least three students live."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show names for all cities where at least three students live.\n\nSELECT city_name FROM City WHERE city_code IN (SELECT DISTINCT city_code FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) >= 3))\n"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": {
      "id": 802,
      "db_id": "address_1",
      "question": "What are the names of cities with at least three students?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of cities with at least three students?\n\nSELECT city_name FROM City WHERE city_code IN (SELECT DISTINCT city_code FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) >= 3))\n"
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": {
      "id": 803,
      "db_id": "address_1",
      "question": "Show all states where more than 5 students live."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all states where more than 5 students live.\n\nSELECT state FROM Student WHERE state IN (SELECT state FROM Student GROUP BY state HAVING COUNT(*) > 5);\n"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": {
      "id": 804,
      "db_id": "address_1",
      "question": "What are the states with more than 5 students?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the states with more than 5 students?\n\nSELECT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) > 5);\n"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": {
      "id": 805,
      "db_id": "address_1",
      "question": "Show ids for all students who don't live in USA."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show ids for all students who don't live in USA.\n\nSELECT Student.state FROM Student WHERE Student.state!= 'USA'\n\n"
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": {
      "id": 806,
      "db_id": "address_1",
      "question": "What the the student ids for students not living in the USA?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What the the student ids for students not living in the USA?\n\nSELECT Student.state FROM Student WHERE Student.state!= 'USA'\n\n"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": {
      "id": 807,
      "db_id": "address_1",
      "question": "Show ids for all female (sex is F) students living in state PA."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show ids for all female (sex is F) students living in state PA.\n\nSELECT Student.state FROM Student WHERE sex = 'F' AND state = 'PA';\n\n"
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": {
      "id": 808,
      "db_id": "address_1",
      "question": "What are the student ids for female students in the state of PA?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the student ids for female students in the state of PA?\n\nSELECT Student.state FROM Student WHERE sex = 'F' AND state = 'PA'\n\n"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": {
      "id": 809,
      "db_id": "address_1",
      "question": "Show ids for all male students living outside of USA."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show ids for all male students living outside of USA.\n\nSELECT Student.state FROM Student WHERE sex = 'M' AND state!= 'USA'\n"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": {
      "id": 810,
      "db_id": "address_1",
      "question": "What are the ids for male students not in the USA?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids for male students not in the USA?\n\nSELECT Student.state FROM Student WHERE sex = 'M' AND state!= 'USA'\n"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": {
      "id": 811,
      "db_id": "address_1",
      "question": "What is the distance between BAL and CHI?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the distance between BAL and CHI?\n\nSELECT Direct_distance.city_code, Direct_distance.distance FROM Direct_distance WHERE Direct_distance.city1_code = 'BAL' AND Direct_distance.city2_code = 'CHI';\n"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": {
      "id": 812,
      "db_id": "address_1",
      "question": "Give the distance between BAL and CHI?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the distance between BAL and CHI?\n\nSELECT Direct_distance.city_code, Direct_distance.distance FROM Direct_distance WHERE Direct_distance.city1_code = 'BAL' AND Direct_distance.city2_code = 'CHI';\n"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": {
      "id": 813,
      "db_id": "address_1",
      "question": "Show me the distance between Boston and Newark."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show me the distance between Boston and Newark.\n\nSELECT Direct_distance.city_code FROM City WHERE City.city_name = 'Boston' AND City.state = 'MA';\n"
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": {
      "id": 814,
      "db_id": "address_1",
      "question": "What is the distance between Boston and Newark?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the distance between Boston and Newark?\n\nSELECT Direct_distance.city_code FROM City WHERE City.city_name = 'Boston' AND City.state = 'MA';\n"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": {
      "id": 815,
      "db_id": "address_1",
      "question": "What is the average, minimum, maximum distance between two cities?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average, minimum, maximum distance between two cities?\n\nSELECT city_name, AVG(distance), MIN(distance), MAX(distance)\n"
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": {
      "id": 816,
      "db_id": "address_1",
      "question": "Give the average, minimum, and maximum distances between two cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the average, minimum, and maximum distances between two cities.\n\nSELECT city_name, AVG(distance), MIN(distance), MAX(distance)\n"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": {
      "id": 817,
      "db_id": "address_1",
      "question": "Show me the city code of two cities with maximum distance."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show me the city code of two cities with maximum distance.\n\nSELECT city_code FROM City WHERE (city_code,city_code) IN (SELECT city1_code,city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1);\n"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": {
      "id": 818,
      "db_id": "address_1",
      "question": "What are the city codes of the cities with the maximum distance?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the city codes of the cities with the maximum distance?\n\nSELECT city_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance);\n"
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": {
      "id": 819,
      "db_id": "address_1",
      "question": "Show me the city code of two cities with a distance greater than the average."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show me the city code of two cities with a distance greater than the average.\n\nSELECT city_code FROM City WHERE (city_code, city_code) IN (SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance))\n"
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": {
      "id": 820,
      "db_id": "address_1",
      "question": "What are the city codes of cities with distance greater than average?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the city codes of cities with distance greater than average?\n\nSELECT city_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);\n"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": {
      "id": 821,
      "db_id": "address_1",
      "question": "Show me the city code of two cities with a distance less than 1000."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show me the city code of two cities with a distance less than 1000.\n\nSELECT city_code FROM Direct_distance WHERE distance < 1000;\n"
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": {
      "id": 822,
      "db_id": "address_1",
      "question": "What are the city codes corresponding to cities with distances less than 1000?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the city codes corresponding to cities with distances less than 1000?\n\nSELECT city_code FROM Direct_distance WHERE distance < 1000;\n"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": {
      "id": 823,
      "db_id": "address_1",
      "question": "What is the total distance between city BAL and all other cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the total distance between city BAL and all other cities.\n\nSELECT city_name, SUM(distance) AS Total_Distance FROM Direct_distance JOIN City ON Direct_distance.city1_code = City.city_code WHERE city_name='BAL' GROUP BY city_name;\n"
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": {
      "id": 824,
      "db_id": "address_1",
      "question": "What is the sum of distances between BAL and other cities?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the sum of distances between BAL and other cities?\n\nSELECT city_name, SUM(distance) AS total_distance FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL' GROUP BY city_name;\n"
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": {
      "id": 825,
      "db_id": "address_1",
      "question": "What is the average distance between Boston and all other cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average distance between Boston and all other cities.\n\nSELECT city_name, AVG(distance) AS avg_dist FROM Direct_distance JOIN City ON Direct_distance.city1_code = City.city_code WHERE city_name='Boston' GROUP BY city_name;\n"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": {
      "id": 826,
      "db_id": "address_1",
      "question": "Give the average distance between Boston and other cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the average distance between Boston and other cities.\n\nSELECT city_name, AVG(distance) AS avg_dist FROM City NATURAL JOIN Direct_distance WHERE city_code = 'BOS' GROUP BY city_name;\n"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": {
      "id": 827,
      "db_id": "address_1",
      "question": "What is the name of the city closest to Chicago?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the city closest to Chicago?\n\nSELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' AND distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = 'CHI'));\n\n"
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": {
      "id": 828,
      "db_id": "address_1",
      "question": "Give the name of the nearest city to Chicago."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the name of the nearest city to Chicago.\n\nSELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' ORDER BY distance LIMIT 1);\n"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": {
      "id": 829,
      "db_id": "address_1",
      "question": "What is the name of the city furthest to Boston?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the city furthest to Boston?\n\nSELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' AND distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = 'BOS'));\n"
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": {
      "id": 830,
      "db_id": "address_1",
      "question": "Give the city name of the city with greatest distance from Boston."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the city name of the city with greatest distance from Boston.\n\nSELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS') ORDER BY distance DESC LIMIT 1;\n"
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": {
      "id": 831,
      "db_id": "address_1",
      "question": "Show all city codes and the total distance to all other cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all city codes and the total distance to all other cities.\n\nSELECT city_code, SUM(distance) AS Total_Distance FROM Direct_distance GROUP BY city_code;\n"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": {
      "id": 832,
      "db_id": "address_1",
      "question": "For each city, what is the the city code and sum of distances from each?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each city, what is the the city code and sum of distances from each?\n\nSELECT city_code, SUM(distance) FROM Direct_distance GROUP BY city_code;\n"
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": {
      "id": 833,
      "db_id": "address_1",
      "question": "Show all city names and the average distance to all other cities."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all city names and the average distance to all other cities.\n\nSELECT city_name, AVG(distance) AS avg_dist FROM City NATURAL JOIN Direct_distance GROUP BY city_name;\n"
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": {
      "id": 834,
      "db_id": "address_1",
      "question": "What are the city name and average distances from each city?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the city name and average distances from each city?\n\nSELECT city_name, AVG(distance) FROM City NATURAL JOIN Direct_distance GROUP BY city_name;\n"
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": {
      "id": 835,
      "db_id": "address_1",
      "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?\n\nSELECT city_name FROM City WHERE latitude = (SELECT latitude FROM City WHERE city_name = 'Linda' AND last_name = 'Smith') AND longitude = (SELECT longitude FROM City WHERE city_name = 'Tracy' AND last_name = 'Kim')\n"
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": {
      "id": 836,
      "db_id": "address_1",
      "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the distance between the cities where Linda Smith and Tracy Kim live?\n\nSELECT Direct_distance.city_code, Direct_distance.distance FROM Student INNER JOIN Direct_distance ON Student.city_code = Direct_distance.city1_code WHERE Student.LName = 'Smith' AND Student.Fname = 'Linda' UNION SELECT Direct_distance.city_code, Direct_distance.distance FROM Student INNER JOIN Direct_distance ON Student.city_code = Direct_distance.city2_code WHERE Student.LName = 'Kim' AND Student.Fname = 'Tracy';\n"
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": {
      "id": 837,
      "db_id": "address_1",
      "question": "What is the first name and last name of the student living furthest to Linda Smith?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the first name and last name of the student living furthest to Linda Smith?\n\nSELECT Student.latitude,Student.longitude,City.city_name FROM Student INNER JOIN City ON Student.city_code=City.city_code WHERE Student.Fname='Linda' AND Student.LName='Smith';\n"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": {
      "id": 838,
      "db_id": "address_1",
      "question": "What is the full name of the student who lives furthest from Linda Smith?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the full name of the student who lives furthest from Linda Smith?\n\nSELECT Student.state,Student.city_name,Student.LName,Student.Fname FROM Student INNER JOIN Direct_distance ON Student.city_code=Direct_distance.city1_code WHERE Student.LName='Smith' AND Student.Fname='Linda' ORDER BY Direct_distance.distance DESC LIMIT 1;\n"
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": {
      "id": 839,
      "db_id": "address_1",
      "question": "Which state does the student whose first name is Linda live in?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which state does the student whose first name is Linda live in?\n\nSELECT state FROM Student WHERE Fname = 'Linda';\n\n"
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": {
      "id": 840,
      "db_id": "address_1",
      "question": "Give the state that the student with first name Linda lives in."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n )\nCREATE TABLE Direct_distance (\n  city1_code varchar(3),\n  city2_code varchar(3),\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n)\nCREATE TABLE City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the state that the student with first name Linda lives in.\n\nSELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda') \n\n"
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": {
      "id": 841,
      "db_id": "boat_1",
      "question": "Return all details of sailors who are older than 30."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return all details of sailors who are older than 30.\n\nSELECT sid, name, rating, age FROM Sailors WHERE age > 30;\n\n"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": {
      "id": 842,
      "db_id": "boat_1",
      "question": "What can you tell me about sailors who are older than age 30?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What can you tell me about sailors who are older than age 30?\n\nSELECT sid, name FROM Sailors WHERE age > 30;\n"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": {
      "id": 843,
      "db_id": "boat_1",
      "question": "Return name and age for sailors who are younger than 30."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return name and age for sailors who are younger than 30.\n\nSELECT sid, name, age FROM Sailors WHERE age < 30;\n\n"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": {
      "id": 844,
      "db_id": "boat_1",
      "question": "What is the name and age of every sailor who is younger than age 30?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name and age of every sailor who is younger than age 30?\n\nSELECT sid, name, age FROM Sailors WHERE age < 30;\n\n"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": {
      "id": 845,
      "db_id": "boat_1",
      "question": "Find boats reserved by Sailor with id 1."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find boats reserved by Sailor with id 1.\n\nSELECT bid FROM Reserves WHERE sid = 1;\n"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": {
      "id": 846,
      "db_id": "boat_1",
      "question": "What are the different boat ids reserved by the sailor whose id is 1?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different boat ids reserved by the sailor whose id is 1?\n\nSELECT bid FROM Reserves WHERE sid = 1;\n"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": {
      "id": 847,
      "db_id": "boat_1",
      "question": "Who reserved boat 102?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Who reserved boat 102?\n\nSELECT Reserves.sid FROM Reserves WHERE Reserves.bid = 102;\n"
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": {
      "id": 848,
      "db_id": "boat_1",
      "question": "What is the name of the sailor who reserved boat 102?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the sailor who reserved boat 102?\n\nSELECT sid FROM Sailors WHERE rating = 8;\n"
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": {
      "id": 849,
      "db_id": "boat_1",
      "question": "Return the unique boat ids (bid) of all reserved boats."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the unique boat ids (bid) of all reserved boats.\n\nSELECT bid FROM Reserves\n\n"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": {
      "id": 850,
      "db_id": "boat_1",
      "question": "What are the ids of all boats that are reserved by someone?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids of all boats that are reserved by someone?\n\nSELECT bid FROM Reserves\n\n"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": {
      "id": 851,
      "db_id": "boat_1",
      "question": "What is the name of sailors whose names contain letter e?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of sailors whose names contain letter e?\n\nSELECT sid, name FROM Sailors WHERE name LIKE '%e%';\n"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": {
      "id": 852,
      "db_id": "boat_1",
      "question": "What is the name of every sailor whose name contains the letter e?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of every sailor whose name contains the letter e?\n\nSELECT sid FROM Sailors WHERE name LIKE '%e%';\n\n"
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": {
      "id": 853,
      "db_id": "boat_1",
      "question": "return the unique ids of sailors who are older than any sailors."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: return the unique ids of sailors who are older than any sailors.\n\nSELECT sid FROM Sailors WHERE age > ALL(SELECT age FROM Sailors);\n"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": {
      "id": 854,
      "db_id": "boat_1",
      "question": "What is the different id of every sailor who is not the youngest?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the different id of every sailor who is not the youngest?\n\nSELECT sid FROM Sailors WHERE age = (SELECT MIN(age) FROM Sailors);\n"
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": {
      "id": 855,
      "db_id": "boat_1",
      "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the unique names of sailors who are older than any sailors whose rating is larger than 7.\n\nSELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.age > ALL(SELECT Sailors2.age FROM Sailors as Sailors2 WHERE Sailors2.rating > 7);\n"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": {
      "id": 856,
      "db_id": "boat_1",
      "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different names of sailors who are older than some other sailor with a rating larger than 7?\n\nSELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.age > (SELECT Sailors2.age FROM Sailors as Sailors2 WHERE Sailors2.rating > 7)\n\n"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": {
      "id": 857,
      "db_id": "boat_1",
      "question": "Find the name and id of the sailors who reserved at least one boat?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and id of the sailors who reserved at least one boat?\n\nSELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves);\n"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": {
      "id": 858,
      "db_id": "boat_1",
      "question": "What is the name and id of every sailor who reserved one or more boats?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name and id of every sailor who reserved one or more boats?\n\nSELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) > 1);\n"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": {
      "id": 859,
      "db_id": "boat_1",
      "question": "Find the id and name of the sailors who reserved more than one boat."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the id and name of the sailors who reserved more than one boat.\n\nSELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) > 1);\n"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": {
      "id": 860,
      "db_id": "boat_1",
      "question": "What are the different names of sailors who reserved two or more boats ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different names of sailors who reserved two or more boats?\n\nSELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) >= 2);\n"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": {
      "id": 861,
      "db_id": "boat_1",
      "question": "Find the id of Sailors (sid) that reserved red or blue boat."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the id of Sailors (sid) that reserved red or blue boat.\n\nSELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));\n\n"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": {
      "id": 862,
      "db_id": "boat_1",
      "question": "What are the sids for sailors who reserved red or blue boats?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the sids for sailors who reserved red or blue boats?\n\nSELECT sid FROM Sailors WHERE rating > 7 AND age < 50;\n"
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": {
      "id": 863,
      "db_id": "boat_1",
      "question": "Find the name and id of Sailors (sid) that reserved red or blue boat."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and id of Sailors (sid) that reserved red or blue boat.\n\nSELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));\n\n"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": {
      "id": 864,
      "db_id": "boat_1",
      "question": "What are the names and ids of sailors who reserved red or blue boats?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and ids of sailors who reserved red or blue boats?\n\nSELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));\n\n"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": {
      "id": 865,
      "db_id": "boat_1",
      "question": "Find the id of Sailors (sid) that reserved red and blue boat."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the id of Sailors (sid) that reserved red and blue boat.\n\nSELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red') AND sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue')))\n\n"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": {
      "id": 866,
      "db_id": "boat_1",
      "question": "What are the ids of sailors who reserved red and blue boats?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids of sailors who reserved red and blue boats?\n\nSELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));\n\n"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": {
      "id": 867,
      "db_id": "boat_1",
      "question": "Find the name and id of Sailors (sid) that reserved red and blue boat."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and id of Sailors (sid) that reserved red and blue boat.\n\nSELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));\n\n"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": {
      "id": 868,
      "db_id": "boat_1",
      "question": "What are the names and ids of sailors who reserved red and blue boats?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and ids of sailors who reserved red and blue boats?\n\nSELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));\n\n"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": {
      "id": 869,
      "db_id": "boat_1",
      "question": "What is the ids of sailors that haven\u2019t reserved a boat?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the ids of sailors that haven\u2019t reserved a boat?\n\nSELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);\n\n"
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": {
      "id": 870,
      "db_id": "boat_1",
      "question": "What are the ids of sailors who have not reserved a boat?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids of sailors who have not reserved a boat?\n\nSELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);\n"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": {
      "id": 871,
      "db_id": "boat_1",
      "question": "what is the name and id of sailors who do not have a reservation of a boat?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: what is the name and id of sailors who do not have a reservation of a boat?\n\nSELECT sid, name FROM Sailors WHERE NOT EXISTS(SELECT * FROM Reserves r WHERE r.sid = s.sid);\n"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": {
      "id": 872,
      "db_id": "boat_1",
      "question": "What are the names and ids of all sailors who do not have boat reservations?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and ids of all sailors who do not have boat reservations?\n\nSELECT sid, name FROM Sailors WHERE NOT EXISTS (SELECT * FROM Reserves r WHERE r.sid = s.sid);\n"
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": {
      "id": 873,
      "db_id": "boat_1",
      "question": "Find id for the sailors who do not have a reservation of a boat?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find id for the sailors who do not have a reservation of a boat?\n\nSELECT sid FROM Sailors WHERE NOT EXISTS(SELECT * FROM Reserves WHERE Reserves.sid = Sailors.sid);\n"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": {
      "id": 874,
      "db_id": "boat_1",
      "question": "What is id about sailors who do not have boat reservations?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is id about sailors who do not have boat reservations?\n\nSELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);\n"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": {
      "id": 875,
      "db_id": "boat_1",
      "question": "What is the name of the sailors who reserved boat with id 103?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the sailors who reserved boat with id 103?\n\nSELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103);\n"
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": {
      "id": 876,
      "db_id": "boat_1",
      "question": "Find the name of the sailors who reserved boat with id 103."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name of the sailors who reserved boat with id 103.\n\nSELECT sid FROM Reserves WHERE bid = 103;\n"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": {
      "id": 877,
      "db_id": "boat_1",
      "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of all sailors whose rating is higher than any sailor named Luis?\n\nSELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.rating > (SELECT Sailors.rating FROM Sailors WHERE Sailors.name = 'Luis');\n\n"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": {
      "id": 878,
      "db_id": "boat_1",
      "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the sailors' names, the ones whose rating is higher than any sailor named Luis?\n\nSELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.rating > ALL(SELECT Sailors2.rating FROM Sailors as Sailors2 WHERE Sailors2.name = 'Luis');\n"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": {
      "id": 879,
      "db_id": "boat_1",
      "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of all sailors whose rating is higher than all sailors named Luis?\n\nSELECT sid, name FROM Sailors AS s WHERE s.rating > ALL(SELECT r.rating FROM Sailors as r WHERE r.name = 'Luis');\n\n"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": {
      "id": 880,
      "db_id": "boat_1",
      "question": "What are the names of all sailors with a higher rating than every sailor named Luis?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all sailors with a higher rating than every sailor named Luis?\n\nSELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.rating > (SELECT Sailors.rating FROM Sailors WHERE Sailors.name = 'Luis') ORDER BY Sailors.sid ASC;\n"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": {
      "id": 881,
      "db_id": "boat_1",
      "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.\n\nSELECT sid, name FROM Sailors WHERE rating > 2 AND EXISTS(SELECT * FROM Reserves r WHERE r.sid = s.sid);\n"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": {
      "id": 882,
      "db_id": "boat_1",
      "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?\n\nSELECT sid, name FROM Sailors WHERE rating >= 3 AND EXISTS(SELECT * FROM Reserves r WHERE r.sid = s.sid);\n"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": {
      "id": 883,
      "db_id": "boat_1",
      "question": "Find the name and age of the oldest sailor."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and age of the oldest sailor.\n\nSELECT sid, name, age FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors);\n"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": {
      "id": 884,
      "db_id": "boat_1",
      "question": "What is the name and age of the sailor with maximum age?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name and age of the sailor with maximum age?\n\nSELECT sid, name, age FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors);\n"
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": {
      "id": 885,
      "db_id": "boat_1",
      "question": "how many sailors in total?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: how many sailors in total?\n\nSELECT sid FROM Sailors\n\n"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": {
      "id": 886,
      "db_id": "boat_1",
      "question": "How many sailors exist?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many sailors exist?\n\nSELECT sid FROM Sailors\n\n"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": {
      "id": 887,
      "db_id": "boat_1",
      "question": "What is the average age of sailors whose rating is 7?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average age of sailors whose rating is 7?\n\nSELECT sid, AVG(age) FROM Sailors WHERE rating = 7 GROUP BY sid;\n"
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": {
      "id": 888,
      "db_id": "boat_1",
      "question": "What is average age of all sailors who have a rating of 7?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is average age of all sailors who have a rating of 7?\n\nSELECT sid, AVG(age) FROM Sailors WHERE rating = 7 GROUP BY sid;\n"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": {
      "id": 889,
      "db_id": "boat_1",
      "question": "How many sailors whose name starts with letter D exist ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many sailors whose name starts with letter D exist?\n\nSELECT sid FROM Sailors WHERE name LIKE 'D%';\n"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": {
      "id": 890,
      "db_id": "boat_1",
      "question": "What is the count of the sailors whose name starts with letter D ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the count of the sailors whose name starts with letter D?\n\nSELECT sid FROM Sailors WHERE name LIKE 'D%';\n"
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": {
      "id": 891,
      "db_id": "boat_1",
      "question": "What are the average rating and max age of all sailors?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the average rating and max age of all sailors?\n\nSELECT sid, AVG(rating), MAX(age)\n"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": {
      "id": 892,
      "db_id": "boat_1",
      "question": "Find the average rating and largest age for the sailors"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the average rating and largest age for the sailors\n\nSELECT sid, AVG(rating), MAX(age) FROM Sailors GROUP BY sid;\n"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": {
      "id": 893,
      "db_id": "boat_1",
      "question": "Find the number of reservations for each boat."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of reservations for each boat.\n\nSELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid ORDER BY num_reservations DESC;\n"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": {
      "id": 894,
      "db_id": "boat_1",
      "question": "How many reservations exist for each boat?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many reservations exist for each boat?\n\nSELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid ORDER BY bid ASC;\n"
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": {
      "id": 895,
      "db_id": "boat_1",
      "question": "Find the number of reservations for each boat with id greater than 50."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of reservations for each boat with id greater than 50.\n\nSELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid;\n"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": {
      "id": 896,
      "db_id": "boat_1",
      "question": "How many reservations exist for each boat with an id greater than 50?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many reservations exist for each boat with an id greater than 50?\n\nSELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid;\n"
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": {
      "id": 897,
      "db_id": "boat_1",
      "question": "Find the number of reservations for each boat with more than 1 reservation."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of reservations for each boat with more than 1 reservation.\n\nSELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1;\n"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": {
      "id": 898,
      "db_id": "boat_1",
      "question": "How many reservations exist for each boat that has more than 1 reservation already?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many reservations exist for each boat that has more than 1 reservation already?\n\nSELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1;\n"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": {
      "id": 899,
      "db_id": "boat_1",
      "question": "Find the number of reservations by sailors with id greater than 1 for each boat."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of reservations by sailors with id greater than 1 for each boat.\n\nSELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE sid > 1 GROUP BY bid;\n"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": {
      "id": 900,
      "db_id": "boat_1",
      "question": "How many reservations for each boat did the sailors with an id greater than 1 make?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many reservations for each boat did the sailors with an id greater than 1 make?\n\nSELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE sid > 1 GROUP BY bid ORDER BY num_reservations DESC;\n"
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": {
      "id": 901,
      "db_id": "boat_1",
      "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the rating and average age for sailors who have reserved red boat grouped by rating?\n\nSELECT sid, rating, avg(age) FROM Sailors as s JOIN Reserves as r ON s.sid = r.sid WHERE r.bid IN (SELECT bid from Boats where color='red') GROUP BY rating ORDER BY rating ASC;\n\n"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": {
      "id": 902,
      "db_id": "boat_1",
      "question": "What are the rating and average age for sailors who reserved red boats for each rating?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the rating and average age for sailors who reserved red boats for each rating?\n\nSELECT sid, rating, avg(age) FROM Sailors as s JOIN Reserves as r ON s.sid = r.sid WHERE r.bid IN (SELECT bid from Boats where color='red') GROUP BY rating ORDER BY rating ASC;\n"
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": {
      "id": 903,
      "db_id": "boat_1",
      "question": "Find the name, rating and age of all sailors ordered by rating and age."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name, rating and age of all sailors ordered by rating and age.\n\nSELECT sid, name, rating, age FROM Sailors ORDER BY rating DESC, age ASC;\n"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": {
      "id": 904,
      "db_id": "boat_1",
      "question": "What is the name, rating, and age for every sailor? And order them by rating and age."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name, rating, and age for every sailor? And order them by rating and age.\n\nSELECT sid, name, rating, age FROM Sailors ORDER BY rating DESC, age ASC;\n\n"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": {
      "id": 905,
      "db_id": "boat_1",
      "question": "Find the total number of boats."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the total number of boats.\n\nSELECT Boats.bid FROM Boats\n\n"
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": {
      "id": 906,
      "db_id": "boat_1",
      "question": "How many boats are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many boats are there?\n\nSELECT Boats.bid FROM Boats\n\n"
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": {
      "id": 907,
      "db_id": "boat_1",
      "question": "How many boats are red?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many boats are red?\n\nSELECT Boats.bid FROM Boats WHERE Boats.color ='red';\n\n"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": {
      "id": 908,
      "db_id": "boat_1",
      "question": "How many red boats exist?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many red boats exist?\n\nSELECT Boats.bid FROM Boats WHERE Boats.color ='red';\n\n"
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": {
      "id": 909,
      "db_id": "boat_1",
      "question": "Find the names of boats booked by sailors whose age is between 20 and 30."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the names of boats booked by sailors whose age is between 20 and 30.\n\nSELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30);\n"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": {
      "id": 910,
      "db_id": "boat_1",
      "question": "What are the names of the boats booked by people between age 20 and 30?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the boats booked by people between age 20 and 30?\n\nSELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age >= 20 AND age <= 30);\n"
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": {
      "id": 911,
      "db_id": "boat_1",
      "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.\n\nSELECT Sailors.sid, Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color ='red') AND Sailors.rating > ALL(SELECT Sailors2.rating FROM Sailors AS Sailors2 JOIN Reserves ON Sailors2.sid = Reserves.sid WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color ='red'));\n"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": {
      "id": 912,
      "db_id": "boat_1",
      "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?\n\nSELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.rating > ALL(SELECT rating FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ='red');\n"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": {
      "id": 913,
      "db_id": "boat_1",
      "question": "What is highest rating between sailors?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is highest rating between sailors?\n\nSELECT sid, MAX(rating) FROM Sailors GROUP BY sid;\n"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": {
      "id": 914,
      "db_id": "boat_1",
      "question": "What is the maximum rating for sailors?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the maximum rating for sailors?\n\nSELECT sid, MAX(rating) FROM Sailors GROUP BY sid;\n"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": {
      "id": 915,
      "db_id": "boat_1",
      "question": "Find the names of sailors who reserved boat with the name Melon."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the names of sailors who reserved boat with the name Melon.\n\nSELECT Sailors.sid, Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.name = 'Melon') ORDER BY Sailors.sid ASC;\n"
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": {
      "id": 916,
      "db_id": "boat_1",
      "question": "What are the names of sailors who reserved a boat with the name Melon?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of sailors who reserved a boat with the name Melon?\n\nSELECT Sailors.sid, Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.name = 'Melon') ORDER BY Sailors.sid ASC;\n"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": {
      "id": 917,
      "db_id": "boat_1",
      "question": "List the names and ages of all sailors sorted by rating in descending order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names and ages of all sailors sorted by rating in descending order.\n\nSELECT sid, name, age FROM Sailors ORDER BY rating DESC;\n\n"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": {
      "id": 918,
      "db_id": "boat_1",
      "question": "What are the names and ages of all sailors sorted by decreasing rating?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n)\nCREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n)\nCREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and ages of all sailors sorted by decreasing rating?\n\nSELECT Sailors.sid, Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC;\n"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": {
      "id": 919,
      "db_id": "headphone_store",
      "question": "Find the model of the most expensive headphone."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the model of the most expensive headphone.\n\nSELECT headphone.Headphone_ID, headphone.Model FROM headphone WHERE headphone.Price = (SELECT MAX(headphone.Price) FROM headphone);\n\n"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": {
      "id": 920,
      "db_id": "headphone_store",
      "question": "Which headphone model has the highest price?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which headphone model has the highest price?\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Price FROM headphone WHERE headphone.Price = (SELECT MAX(headphone.Price) FROM headphone);\n\n"
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": {
      "id": 921,
      "db_id": "headphone_store",
      "question": "List all different headphone models in the alphabetical order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all different headphone models in the alphabetical order.\n\nSELECT Headphone_ID, Model FROM headphone GROUP BY Model ORDER BY Model ASC;\n\n"
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": {
      "id": 922,
      "db_id": "headphone_store",
      "question": "Return the list of distinct headphone models ordered alphabetically."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the list of distinct headphone models ordered alphabetically.\n\nSELECT Headphone_ID, Model FROM headphone ORDER BY Model ASC;\n"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": {
      "id": 923,
      "db_id": "headphone_store",
      "question": "Which headphone class is the most common one?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which headphone class is the most common one?\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class FROM headphone WHERE headphone.Class = (SELECT MAX(headphone.Class) FROM headphone);\n"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": {
      "id": 924,
      "db_id": "headphone_store",
      "question": "Which headphone class contains the most headphones?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which headphone class contains the most headphones?\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class, COUNT(*) AS num_headphones FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY num_headphones DESC LIMIT 1;\n"
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": {
      "id": 925,
      "db_id": "headphone_store",
      "question": "Which headphone class does have more than two headphones?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which headphone class does have more than two headphones?\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class FROM headphone WHERE headphone.Class IN (SELECT headphone.Class FROM headphone GROUP BY headphone.Class HAVING COUNT(headphone.Class) > 2);\n\n"
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": {
      "id": 926,
      "db_id": "headphone_store",
      "question": "Find the headphone class that does not contain more than two headphones."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the headphone class that does not contain more than two headphones.\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class FROM headphone WHERE headphone.Class NOT IN (SELECT headphone.Class FROM headphone GROUP BY headphone.Class HAVING COUNT(headphone.Class) > 2);\n\n"
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": {
      "id": 927,
      "db_id": "headphone_store",
      "question": "Find the number of headphones with a price higher than 200 for each class."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of headphones with a price higher than 200 for each class.\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Price FROM headphone WHERE headphone.Price > 200;\n\n"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": {
      "id": 928,
      "db_id": "headphone_store",
      "question": "How many headphones cost more than 200 for each headphone class?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many headphones cost more than 200 for each headphone class?\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Price FROM headphone WHERE headphone.Price > 200;\n\n"
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": {
      "id": 929,
      "db_id": "headphone_store",
      "question": "how many different earpads are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: how many different earpads are there?\n\nSELECT Headphone_ID, Model, Earpads FROM headphone GROUP BY Headphone_ID HAVING COUNT(DISTINCT Earpads) = 1;\n\n"
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": {
      "id": 930,
      "db_id": "headphone_store",
      "question": "Count the number of different earpads."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of different earpads.\n\nSELECT headphone.Headphone_ID, COUNT(DISTINCT headphone.Earpads) AS num_earpads FROM headphone GROUP BY headphone.Headphone_ID HAVING num_earpads > 1 ORDER BY headphone.Headphone_ID ASC;\n"
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": {
      "id": 931,
      "db_id": "headphone_store",
      "question": "Find the top 2 earpads that are mostly used."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the top 2 earpads that are mostly used.\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Driver_matched_db, headphone.Construction, headphone.Earpads, headphone.Price, store.Name, store.Neighborhood, store.Parking, store.Date_opened, stock.Quantity FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID INNER JOIN store ON stock.Store_ID = store.Store_ID ORDER BY headphone.Earpads DESC LIMIT 2;\n\n"
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": {
      "id": 932,
      "db_id": "headphone_store",
      "question": "What are the top 2 earpads in terms of the number of headphones using them?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the top 2 earpads in terms of the number of headphones using them?\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Driver_matched_db, headphone.Construction, headphone.Earpads, headphone.Price, store.Name, store.Neighborhood, store.Parking, store.Date_opened, stock.Quantity FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID INNER JOIN store ON stock.Store_ID = store.Store_ID ORDER BY headphone.Earpads DESC LIMIT 2;\n\n"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": {
      "id": 933,
      "db_id": "headphone_store",
      "question": "What are the model, class, and construction of the cheapest headphone?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the model, class, and construction of the cheapest headphone?\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Construction FROM headphone WHERE headphone.Price = (SELECT MIN(headphone.Price) FROM headphone);\n\n"
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": {
      "id": 934,
      "db_id": "headphone_store",
      "question": "Find the model, class, and construction of the headphone with the lowest price."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the model, class, and construction of the headphone with the lowest price.\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Construction FROM headphone WHERE headphone.Price = (SELECT MIN(headphone.Price) FROM headphone);\n\n"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": {
      "id": 935,
      "db_id": "headphone_store",
      "question": "Find the average price for each headphone construction."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the average price for each headphone construction.\n\nSELECT headphone.Headphone_ID, headphone.Construction, AVG(headphone.Price) AS Average_Price FROM headphone GROUP BY headphone.Headphone_ID, headphone.Construction;\n\n"
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": {
      "id": 936,
      "db_id": "headphone_store",
      "question": "How much does headphones cost on average for each headphone construction?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How much does headphones cost on average for each headphone construction?\n\nSELECT Headphone_ID, Model, Class, Driver_matched_dB, Construction, Earpads, Price, AVG(Price) AS Average_Price FROM headphone GROUP BY Headphone_ID;\n\n"
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": {
      "id": 937,
      "db_id": "headphone_store",
      "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Driver_matched_db, headphone.Construction, headphone.Earpads, headphone.Price FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE headphone.Earpads LIKE '%Bowls%' AND headphone.Earpads LIKE '%Comfort Pads%';\n"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": {
      "id": 938,
      "db_id": "headphone_store",
      "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE (earpads = 'Bowls' AND earpads = 'Comfort Pads') GROUP BY headphone.Headphone_ID, headphone.Model, headphone.Class HAVING COUNT(*) > 1;\n"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": {
      "id": 939,
      "db_id": "headphone_store",
      "question": "Which earpads never use plastic construction?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which earpads never use plastic construction?\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Driver_matched_db, headphone.Construction, headphone.Earpads, headphone.Price, store.Store_ID, store.Name, store.Neighborhood, store.Parking, store.Date_opened FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE headphone.Construction!= 'plastic' AND headphone.Earpads IS NOT NULL;\n"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": {
      "id": 940,
      "db_id": "headphone_store",
      "question": "Find all earpads that do not use plastic construction."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find all earpads that do not use plastic construction.\n\nSELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Driver_matched_db, headphone.Construction, headphone.Earpads, headphone.Price, store.Store_ID, store.Name, store.Neighborhood, store.Parking, store.Date_opened FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE headphone.Construction!= 'plastic' AND headphone.Earpads IS NOT NULL;\n"
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": {
      "id": 941,
      "db_id": "headphone_store",
      "question": "Find the headphone models whose price is below the average price."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the headphone models whose price is below the average price.\n\nSELECT headphone.Headphone_ID, headphone.Model FROM headphone WHERE headphone.Price < (SELECT AVG(headphone.Price) FROM headphone);\n\n"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": {
      "id": 942,
      "db_id": "headphone_store",
      "question": "What are the headphone models that cost less than the average price?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the headphone models that cost less than the average price?\n\nSELECT headphone.Headphone_ID, headphone.Model FROM headphone WHERE headphone.Price < (SELECT AVG(headphone.Price) FROM headphone);\n"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": {
      "id": 943,
      "db_id": "headphone_store",
      "question": "Sort all store names by store open date."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Sort all store names by store open date.\n\nSELECT store.Store_ID, store.Name FROM store ORDER BY Date_Opened ASC;\n"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": {
      "id": 944,
      "db_id": "headphone_store",
      "question": "Give me a list of store names, sorted by store open date."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give me a list of store names, sorted by store open date.\n\nSELECT store.Store_ID, store.Name FROM store ORDER BY Date_Opened ASC;\n"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": {
      "id": 945,
      "db_id": "headphone_store",
      "question": "List name and parking info for the stores in the Tarzana neighborhood."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List name and parking info for the stores in the Tarzana neighborhood.\n\nSELECT store.Store_ID, store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'\n\n"
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": {
      "id": 946,
      "db_id": "headphone_store",
      "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.\n\nSELECT store.Store_ID, store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'\n\n"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": {
      "id": 947,
      "db_id": "headphone_store",
      "question": "How many different neighborhoods are there for all stores?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many different neighborhoods are there for all stores?\n\nSELECT Store_ID, Neighborhood FROM store GROUP BY Neighborhood;\n\n"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": {
      "id": 948,
      "db_id": "headphone_store",
      "question": "Count the number of distinct neighborhoods stores are located."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of distinct neighborhoods stores are located.\n\nSELECT store.Store_ID, COUNT(DISTINCT store.Neighborhood) AS num_neighborhoods FROM store GROUP BY store.Store_ID;\n\n"
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": {
      "id": 949,
      "db_id": "headphone_store",
      "question": "find the number of stores in each neighborhood."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: find the number of stores in each neighborhood.\n\nSELECT store.Store_ID, store.Neighborhood, COUNT(*) AS num_stores\n"
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": {
      "id": 950,
      "db_id": "headphone_store",
      "question": "How many stores are there in each neighborhood?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many stores are there in each neighborhood?\n\nSELECT store.Store_ID, store.Neighborhood, COUNT(*) AS num_stores\n"
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": {
      "id": 951,
      "db_id": "headphone_store",
      "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name of the store which has the most headphones in stock. List the number of headphones as well.\n\nSELECT store.Store_ID, COUNT(*) AS num_headphones FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY store.Store_ID ORDER BY num_headphones DESC LIMIT 1;\n"
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": {
      "id": 952,
      "db_id": "headphone_store",
      "question": "Which store has the headphones in stock? Give me the store name and the total quantity."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which store has the headphones in stock? Give me the store name and the total quantity.\n\nSELECT store.Store_ID, sum(stock.Quantity) as Total_Quantity FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY store.Store_ID;\n\n"
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": {
      "id": 953,
      "db_id": "headphone_store",
      "question": "Find the name of stores which have no headphone in stock."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name of stores which have no headphone in stock.\n\nSELECT store.Store_ID, store.Name FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Headphone_ID IS NULL;\n\n"
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": {
      "id": 954,
      "db_id": "headphone_store",
      "question": "Which stores do not have any headphones in stock? Give me the store names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which stores do not have any headphones in stock? Give me the store names.\n\nSELECT store.Store_ID, store.Name FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Headphone_ID IS NULL;\n\n"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": {
      "id": 955,
      "db_id": "headphone_store",
      "question": "Which headphone models do not have any stock in any store?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which headphone models do not have any stock in any store?\n\nSELECT headphone.Headphone_ID, headphone.Model FROM headphone LEFT JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE stock.Headphone_ID IS NULL;\n"
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": {
      "id": 956,
      "db_id": "headphone_store",
      "question": "Find the headphone models that are not in stock in any store."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the headphone models that are not in stock in any store.\n\nSELECT headphone.Headphone_ID, headphone.Model FROM headphone LEFT JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE stock.Headphone_ID IS NULL;\n"
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": {
      "id": 957,
      "db_id": "headphone_store",
      "question": "Which headphone model has the largest quantity of stock across all the stores?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which headphone model has the largest quantity of stock across all the stores?\n\nSELECT headphone.Headphone_ID, headphone.Model, SUM(stock.Quantity) AS Total_Stock FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY Total_Stock DESC LIMIT 1;\n"
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": {
      "id": 958,
      "db_id": "headphone_store",
      "question": "Find the headphone model whose total quantity in stock is the largest."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the headphone model whose total quantity in stock is the largest.\n\nSELECT headphone.Headphone_ID, headphone.Model FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY SUM(stock.Quantity) DESC LIMIT 1;\n\n"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": {
      "id": 959,
      "db_id": "headphone_store",
      "question": "How many headphones are stored in the Woodman store?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many headphones are stored in the Woodman store?\n\nSELECT headphone.Headphone_ID FROM headphone \n"
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": {
      "id": 960,
      "db_id": "headphone_store",
      "question": "Find the total quantity of headphones stored in the Woodman store."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the total quantity of headphones stored in the Woodman store.\n\nSELECT Quantity FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman');\n\n"
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": {
      "id": 961,
      "db_id": "headphone_store",
      "question": "Which neighborhood does not have any headphone in stock?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which neighborhood does not have any headphone in stock?\n\nSELECT store.Store_ID, store.Name, store.Neighborhood FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Headphone_ID IS NULL;\n"
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": {
      "id": 962,
      "db_id": "headphone_store",
      "question": "Find the neighborhood where no headphones are in stock."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"headphone\" (\n\"Headphone_ID\" int,\n\"Model\" text,\n\"Class\" text,\n\"Driver-matched_dB\" real,\n\"Construction\" text,\n\"Earpads\" text,\n\"Price\" int,\nPRIMARY KEY (\"Headphone_ID\")\n)\nCREATE TABLE \"store\" (\n\"Store_ID\" int,\n\"Name\" text,\n\"Neighborhood\" text,\n\"Parking\" text,\n\"Date_Opened\" text,\nPRIMARY KEY (\"Store_ID\")\n)\nCREATE TABLE \"stock\" (\n\"Store_ID\" int,\n\"Headphone_ID\" int,\n\"Quantity\" int,\nPRIMARY KEY (\"Store_ID\",\"Headphone_ID\"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the neighborhood where no headphones are in stock.\n\nSELECT store.Store_ID, store.Name, store.Neighborhood FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Headphone_ID IS NULL;\n"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": {
      "id": 963,
      "db_id": "aan_1",
      "question": "How many authors do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many authors do we have?\n\nSELECT Author.venue FROM Paper WHERE Paper.year = 2010 AND Paper.title LIKE '%SQL%';\n"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": {
      "id": 964,
      "db_id": "aan_1",
      "question": "Count the number of authors."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of authors.\n\nSELECT Author.venue, COUNT(Author.author_id) AS num_authors FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id JOIN Author_list ON Paper.paper_id = Author_list.paper_id GROUP BY Author.venue ORDER BY num_authors DESC;\n"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": {
      "id": 965,
      "db_id": "aan_1",
      "question": "How many papers do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many papers do we have?\n\nSELECT paper_id FROM Paper\n\n"
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": {
      "id": 966,
      "db_id": "aan_1",
      "question": "Count the number of papers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of papers.\n\nSELECT paper_id FROM Paper\n\n"
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": {
      "id": 967,
      "db_id": "aan_1",
      "question": "How many affiliations do we have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many affiliations do we have?\n\nSELECT Affiliation.venue FROM Affiliation WHERE Affiliation.year = 2019;\n\n"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": {
      "id": 968,
      "db_id": "aan_1",
      "question": "Count the number of affiliations."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of affiliations.\n\nSELECT Affiliation.venue FROM Paper WHERE Paper.year = 2010 AND Paper.title LIKE '%machine learning%' ORDER BY Affiliation.venue ASC;\n"
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": {
      "id": 969,
      "db_id": "aan_1",
      "question": "How many papers do we have in NAACL 2000?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many papers do we have in NAACL 2000?\n\nSELECT paper_id FROM Paper WHERE year = '2000' AND venue = 'NAACL';\n\n"
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": {
      "id": 970,
      "db_id": "aan_1",
      "question": "Count the number of papers in NAACL 2000."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of papers in NAACL 2000.\n\nSELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2000;\n"
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": {
      "id": 971,
      "db_id": "aan_1",
      "question": "How many papers are published in year 2009 by Columbia University?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many papers are published in year 2009 by Columbia University?\n\nSELECT paper_id FROM Paper WHERE year = '2009' AND venue IN (SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE email LIKE '%@columbia.edu')))\n\n"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": {
      "id": 972,
      "db_id": "aan_1",
      "question": "Count the number of papers published by Columbia University in 2009."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of papers published by Columbia University in 2009.\n\nSELECT paper_id FROM Paper WHERE year = 2009 AND venue IN (SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE email LIKE '%@columbia.edu')))\n\n"
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": {
      "id": 973,
      "db_id": "aan_1",
      "question": "List names and addresses for all affiliations."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List names and addresses for all affiliations.\n\nSELECT Affiliation.venue FROM Affiliation WHERE Affiliation.name = 'University of California, Berkeley';\n"
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": {
      "id": 974,
      "db_id": "aan_1",
      "question": "What are the names and addresses for all affiliations?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and addresses for all affiliations?\n\nSELECT Affiliation.venue, Affiliation.address FROM Affiliation INNER JOIN Paper ON Affiliation.venue = Paper.venue;\n"
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": {
      "id": 975,
      "db_id": "aan_1",
      "question": "List all venues and years for papers ordered by year."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all venues and years for papers ordered by year.\n\nSELECT venue, year FROM Paper ORDER BY year ASC;\n"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": {
      "id": 976,
      "db_id": "aan_1",
      "question": "What are the distinct venues for papers, ordered by year?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the distinct venues for papers, ordered by year?\n\nSELECT venue FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation UNION SELECT paper_id FROM Citation) GROUP BY venue ORDER BY year DESC;\n"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": {
      "id": 977,
      "db_id": "aan_1",
      "question": "Find the titles and paper IDs for papers written by Harvard University."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the titles and paper IDs for papers written by Harvard University.\n\nSELECT Paper.paper_id, Paper.title FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University' JOIN Paper ON Author_list.paper_id = Paper.paper_id;\n"
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": {
      "id": 978,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles and paper ids for papers written in affiliation with Harvard University?\n\nSELECT Paper.paper_id, Paper.title FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University' JOIN Paper ON Author_list.paper_id = Paper.paper_id\n\n"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": {
      "id": 979,
      "db_id": "aan_1",
      "question": "Find all papers with titles and paper IDs written by Mckeown."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find all papers with titles and paper IDs written by Mckeown.\n\nSELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE name = 'Mckeown';\n\n"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": {
      "id": 980,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers written by Mckeown?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles and paper ids for papers written by Mckeown?\n\nSELECT Paper.paper_id, Paper.title FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Paper.paper_id = Author_list.paper_id WHERE Author.name = 'Mckeown';\n\n"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": {
      "id": 981,
      "db_id": "aan_1",
      "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.\n\nSELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT DISTINCT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University') OR affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'));\n"
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": {
      "id": 982,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?\n\nSELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation AS Stanford ON Author_list.affiliation_id = Stanford.affiliation_id JOIN Affiliation AS Columbia ON Author_list.affiliation_id = Columbia.affiliation_id WHERE Stanford.name = 'Stanford' AND Columbia.name = 'Columbia';\n"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": {
      "id": 983,
      "db_id": "aan_1",
      "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.\n\nSELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE author_id IN (SELECT author_id FROM Author WHERE name='Mckeown, Kathleen') AND author_id IN (SELECT author_id FROM Author WHERE name='Rambow, Owen');\n"
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": {
      "id": 984,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?\n\nSELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE author_id IN (SELECT author_id FROM Author WHERE name='Mckeown, Kathleen') AND author_id IN (SELECT author_id FROM Author WHERE name='Rambow, Owen');\n\n"
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": {
      "id": 985,
      "db_id": "aan_1",
      "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.\n\nSELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.author_id IN (SELECT Author.author_id FROM Author WHERE Author.name = 'Mckeown') AND Author_list.author_id NOT IN (SELECT Author.author_id FROM Author WHERE Author.name = 'Rambow');\n"
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": {
      "id": 986,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles and paper ids which have Mckeown as an author, but not Rambow?\n\nSELECT title,paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') AND affiliation_id IS NULL) AND paper_id NOT IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow')))\n\n"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": {
      "id": 987,
      "db_id": "aan_1",
      "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.\n\nSELECT Paper.paper_id, Paper.title FROM Author_list JOIN Author ON Author.author_id = Author_list.author_id WHERE Author.name IN ('Mckeown, Kathleen', 'Rambow, Owen') JOIN Paper ON Paper.paper_id = Author_list.paper_id;\n\n"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": {
      "id": 988,
      "db_id": "aan_1",
      "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?\n\nSELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.author_id IN (SELECT Author.author_id FROM Author WHERE Author.name LIKE '%Mckeown%' OR Author.name LIKE '%Rambow%') ORDER BY Paper.year DESC;\n\n"
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": {
      "id": 989,
      "db_id": "aan_1",
      "question": "List the names of all authors and their number of papers in descending order by number of papers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List the names of all authors and their number of papers in descending order by number of papers.\n\nSELECT Author.venue, COUNT(Paper.paper_id) AS num_papers FROM Paper JOIN Author ON Paper.author_id = Author.author_id GROUP BY Author.venue ORDER BY num_papers DESC;\n"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": {
      "id": 990,
      "db_id": "aan_1",
      "question": "How many papers did each author publish, ordered by number of papers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many papers did each author publish, ordered by number of papers?\n\nSELECT Author.venue, COUNT(Paper.paper_id) AS num_papers FROM Paper JOIN Author ON Paper.author_id = Author.author_id GROUP BY Author.venue ORDER BY num_papers DESC;\n"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": {
      "id": 991,
      "db_id": "aan_1",
      "question": "List all affiliations with ascending ordered number of papers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all affiliations with ascending ordered number of papers.\n\nSELECT Affiliation.venue FROM Affiliation WHERE Affiliation.name = 'University of California, Berkeley' ORDER BY Affiliation.year DESC;\n"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": {
      "id": 992,
      "db_id": "aan_1",
      "question": "What are the names of all affiliations, ordered by number of papers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all affiliations, ordered by number of papers?\n\nSELECT Affiliation.venue FROM Affiliation WHERE Affiliation.year = '2019' ORDER BY Affiliation.year DESC;\n"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": {
      "id": 993,
      "db_id": "aan_1",
      "question": "List names of all authors who have more than 50 papers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List names of all authors who have more than 50 papers.\n\nSELECT Author.venue FROM Author WHERE Author.author_id IN (SELECT Author_list.author_id FROM Author_list GROUP BY Author_list.author_id HAVING COUNT(Author_list.paper_id)>50);\n"
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": {
      "id": 994,
      "db_id": "aan_1",
      "question": "What are the names of all authors who have more than 50 papers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all authors who have more than 50 papers?\n\nSELECT Author.venue FROM Author WHERE Author.author_id IN (SELECT Author_list.author_id FROM Author_list GROUP BY Author_list.author_id HAVING COUNT(Author_list.paper_id)>50);\n"
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": {
      "id": 995,
      "db_id": "aan_1",
      "question": "List names of all authors who have only 1 paper."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List names of all authors who have only 1 paper.\n\nSELECT Author.venue FROM Author WHERE Author.author_id IN (SELECT Author_list.author_id FROM Author_list GROUP BY Author_list.author_id HAVING COUNT(Author_list.paper_id)=1);\n"
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": {
      "id": 996,
      "db_id": "aan_1",
      "question": "What are the names of authors who have exactly 1 paper?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of authors who have exactly 1 paper?\n\nSELECT Author.venue FROM Author WHERE Author.author_id IN (SELECT Author_list.author_id FROM Author_list GROUP BY Author_list.author_id HAVING COUNT(Author_list.paper_id)=1);\n"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": {
      "id": 997,
      "db_id": "aan_1",
      "question": "What is the venue and year with the most number of publications?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the venue and year with the most number of publications?\n\nSELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1;\n"
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": {
      "id": 998,
      "db_id": "aan_1",
      "question": "What was the venue and year with the most publications?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What was the venue and year with the most publications?\n\nSELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1;\n"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": {
      "id": 999,
      "db_id": "aan_1",
      "question": "What is the venue with the least number of publications?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the venue with the least number of publications?\n\nSELECT venue FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Citation GROUP BY cited_paper_id));\n"
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": {
      "id": 1000,
      "db_id": "aan_1",
      "question": "Which venue has the fewest publications?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which venue has the fewest publications?\n\nSELECT venue FROM Paper WHERE paper_id IN (SELECT DISTINCT cited_paper_id FROM Citation);\n"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": {
      "id": 1001,
      "db_id": "aan_1",
      "question": "How many papers cite paper with id A00-1002?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many papers cite paper with id A00-1002?\n\nSELECT paper_id FROM Paper WHERE paper_id = 'A00-1002';\n"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": {
      "id": 1002,
      "db_id": "aan_1",
      "question": "Count the number of papers which cited a paper with id A00-1002."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of papers which cited a paper with id A00-1002.\n\nSELECT Paper.paper_id FROM Paper WHERE Paper.paper_id IN (SELECT Citation.cited_paper_id FROM Citation WHERE Citation.paper_id = 'A00-1002');\n\n"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": {
      "id": 1003,
      "db_id": "aan_1",
      "question": "How many reference papers does paper with id D12-1027 have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many reference papers does paper with id D12-1027 have?\n\nSELECT paper_id FROM Paper WHERE paper_id = 'D12-1027';\n"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": {
      "id": 1004,
      "db_id": "aan_1",
      "question": "Count the number of references the paper with id D12-1027 has."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of references the paper with id D12-1027 has.\n\nSELECT paper_id, COUNT(*) AS num_citations FROM Citation WHERE cited_paper_id = 'D12-1027' GROUP BY paper_id;\n"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": {
      "id": 1005,
      "db_id": "aan_1",
      "question": "What is the id and the number of citations of the most cited paper?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the id and the number of citations of the most cited paper?\n\nSELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1;\n"
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": {
      "id": 1006,
      "db_id": "aan_1",
      "question": "Give the id and the number of citations of the most cited paper."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the id and the number of citations of the most cited paper.\n\nSELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1;\n"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": {
      "id": 1007,
      "db_id": "aan_1",
      "question": "Give the title of the paper which cites most number of papers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the title of the paper which cites most number of papers?\n\nSELECT paper_id FROM Paper WHERE year = (SELECT MAX(year) FROM Paper);\n"
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": {
      "id": 1008,
      "db_id": "aan_1",
      "question": "What is the title of the paper which cites the most other papers?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the title of the paper which cites the most other papers?\n\nSELECT Paper.title FROM Paper WHERE Paper.paper_id IN ( SELECT Citation.cited_paper_id FROM Citation GROUP BY Citation.cited_paper_id ORDER BY COUNT(Citation.cited_paper_id) DESC LIMIT 1 );\n"
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": {
      "id": 1009,
      "db_id": "aan_1",
      "question": "List top 10 most cited papers and their numbers of citations."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List top 10 most cited papers and their numbers of citations.\n\nSELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 10;\n"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": {
      "id": 1010,
      "db_id": "aan_1",
      "question": "What are the 10 most cited papers, and how many citations did each have?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the 10 most cited papers, and how many citations did each have?\n\nSELECT title, COUNT(*) AS num_citations FROM Paper JOIN Citation USING (paper_id) GROUP BY paper_id ORDER BY num_citations DESC LIMIT 10;\n"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": {
      "id": 1011,
      "db_id": "aan_1",
      "question": "How many citations does Mckeown , Kathleen have ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many citations does Mckeown, Kathleen have?\n\nSELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL;\n"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": {
      "id": 1012,
      "db_id": "aan_1",
      "question": "Count the number of citations Mckeown , Kathleen has ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of citations Mckeown, Kathleen has.\n\nSELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL;\n"
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": {
      "id": 1013,
      "db_id": "aan_1",
      "question": "How many papers does Mckeown , Kathleen cite ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many papers does Mckeown, Kathleen cite?\n\nSELECT paper_id FROM Paper WHERE title = 'How many papers does Mckeown, Kathleen cite?' AND venue = 'How many papers does Mckeown, Kathleen cite?' AND year = 2020;\n"
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": {
      "id": 1014,
      "db_id": "aan_1",
      "question": "Count the number of papers Mckeown , Kathleen has cited ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of papers Mckeown, Kathleen has cited.\n\nSELECT paper_id FROM Paper WHERE title = 'Mckeown' AND author_id = (SELECT author_id FROM Author WHERE name = 'Kathleen') UNION SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Paper WHERE title = 'Mckeown' AND author_id = (SELECT author_id FROM Author WHERE name = 'Kathleen')) ORDER BY paper_id ASC;\n"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": {
      "id": 1015,
      "db_id": "aan_1",
      "question": "Find the name and number of citations of the author who has most citations among all authors?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and number of citations of the author who has most citations among all authors?\n\nSELECT Author.venue, COUNT(Citation.cited_paper_id) AS num_citations FROM Author JOIN Citation ON Author.author_id = Citation.paper_id GROUP BY Author.venue ORDER BY num_citations DESC LIMIT 1;\n\n"
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": {
      "id": 1016,
      "db_id": "aan_1",
      "question": "What is the name and number of citations of the author with the greatest number of citations among authors?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name and number of citations of the author with the greatest number of citations among authors?\n\nSELECT Author.venue, COUNT(Citation.cited_paper_id) AS num_citations FROM Author JOIN Citation ON Author.author_id = Citation.paper_id GROUP BY Author.venue ORDER BY num_citations DESC LIMIT 1;\n\n"
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": {
      "id": 1017,
      "db_id": "aan_1",
      "question": "What are the venues and years where Mckeown , Kathleen had papers ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the venues and years where Mckeown, Kathleen had papers?\n\nSELECT venue, year FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Author_list WHERE author_id = ( SELECT author_id FROM Author WHERE name = 'Mckeown' ) AND affiliation_id IS NULL )\n"
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": {
      "id": 1018,
      "db_id": "aan_1",
      "question": "Which venues and years did Mckeown , Kathleen have papers ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which venues and years did Mckeown, Kathleen have papers?\n\nSELECT venue, year FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Author_list WHERE author_id = ( SELECT author_id FROM Author WHERE name = 'Mckeown' ) AND affiliation_id IS NULL ) ORDER BY venue ASC, year DESC;\n"
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": {
      "id": 1019,
      "db_id": "aan_1",
      "question": "What are the venues and years where Columbia University had papers ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the venues and years where Columbia University had papers?\n\nSELECT venue, year FROM Paper WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Columbia University'));\n\n"
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": {
      "id": 1020,
      "db_id": "aan_1",
      "question": "Which venues and years did Columbia University have papers ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which venues and years did Columbia University have papers?\n\nSELECT venue, year FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE name = 'Columbia University' GROUP BY venue, year ORDER BY venue ASC, year DESC;\n"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": {
      "id": 1021,
      "db_id": "aan_1",
      "question": "Which author had the most papers in the year 2009?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which author had the most papers in the year 2009?\n\nSELECT Author.venue FROM Paper WHERE Paper.year = 2009 ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1;\n"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": {
      "id": 1022,
      "db_id": "aan_1",
      "question": "What is the name of the author with the most papers in 2009?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the author with the most papers in 2009?\n\nSELECT Author.venue FROM Paper WHERE year = 2009 ORDER BY count(Paper.paper_id) DESC LIMIT 1;\n"
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": {
      "id": 1023,
      "db_id": "aan_1",
      "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the top 3 affiliations that have the most papers in year 2009?\n\nSELECT Affiliation.venue FROM Affiliation WHERE Affiliation.year = '2009' ORDER BY Affiliation.year DESC LIMIT 3;\n"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": {
      "id": 1024,
      "db_id": "aan_1",
      "question": "Which 3 affiliations had the most papers in 2009?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which 3 affiliations had the most papers in 2009?\n\nSELECT Affiliation.venue, COUNT(Affiliation.paper_id) AS num_papers FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Paper.year = '2009' GROUP BY Affiliation.venue ORDER BY num_papers DESC LIMIT 3;\n"
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": {
      "id": 1025,
      "db_id": "aan_1",
      "question": "How many papers does Columbia University have in or before 2009 ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many papers does Columbia University have in or before 2009?\n\nSELECT paper_id FROM Paper WHERE year <= 2009 AND affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University');\n"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": {
      "id": 1026,
      "db_id": "aan_1",
      "question": "Count the number of papers Columbia University had during or prior to 2009 ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of papers Columbia University had during or prior to 2009.\n\nSELECT paper_id FROM Paper WHERE year <= 2009 AND venue = 'Columbia University';\n\n"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": {
      "id": 1027,
      "db_id": "aan_1",
      "question": "How many papers does Stanford University have between 2000 and 2009?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many papers does Stanford University have between 2000 and 2009?\n\nSELECT paper_id FROM Paper WHERE year BETWEEN 2000 AND 2009;\n"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": {
      "id": 1028,
      "db_id": "aan_1",
      "question": "Count the number of papers Stanford University had between 2000 and 2009."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of papers Stanford University had between 2000 and 2009.\n\nSELECT paper_id FROM Paper WHERE year BETWEEN 2000 AND 2009;\n"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": {
      "id": 1029,
      "db_id": "aan_1",
      "question": "What is the title of the paper that has most number of authors?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the title of the paper that has most number of authors?\n\nSELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1);\n"
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": {
      "id": 1030,
      "db_id": "aan_1",
      "question": "Give the title of the paper with the most authors."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the title of the paper with the most authors.\n\nSELECT Paper.title FROM Paper WHERE Paper.paper_id IN ( SELECT Author_list.paper_id FROM Author_list GROUP BY Author_list.paper_id HAVING COUNT(Author_list.author_id) = ( SELECT MAX(COUNT(Author_list.author_id)) FROM Author_list ) );\n"
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": {
      "id": 1031,
      "db_id": "aan_1",
      "question": "How many collaborators has Mckeown , Kathleen had ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many collaborators has Mckeown, Kathleen had?\n\nSELECT Author_list.paper_id, COUNT(Author_list.author_id) AS num_collaborators FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Author_list.author_id IN ( SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' ) GROUP BY Author_list.paper_id HAVING COUNT(Author_list.author_id) > 1;\n"
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": {
      "id": 1032,
      "db_id": "aan_1",
      "question": "Count the number of collaborators that Mckeown , Kathleen has had ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of collaborators that Mckeown, Kathleen has had.\n\nSELECT Author_list.venue FROM Paper WHERE Paper.paper_id = 'journals/cogsci/1994.cogsci-94-0017.html' AND Paper.year = 1994;\n"
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": {
      "id": 1033,
      "db_id": "aan_1",
      "question": "Who has the most papers co-authored with Mckeown , Kathleen ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Who has the most papers co-authored with Mckeown, Kathleen?\n\nSELECT Author.venue, COUNT(*) AS num_papers FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author.name = 'Mckeown' AND Author.email = 'kathleen@cs.stanford.edu' GROUP BY Author.venue ORDER BY num_papers DESC LIMIT 10;\n"
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": {
      "id": 1034,
      "db_id": "aan_1",
      "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the author who has co-authored the most papers with Mckeown, Kathleen?\n\nSELECT Author.venue FROM Paper WHERE Paper.paper_id IN ( SELECT Citation.cited_paper_id FROM Citation WHERE Citation.paper_id = 'journals/cogsci/Charniak.McKeown-92' ) AND Paper.year > 1990 ORDER BY Paper.year DESC LIMIT 10;\n\n"
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": {
      "id": 1035,
      "db_id": "aan_1",
      "question": "Find the id of the papers whose title has the key word 'translation'."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the id of the papers whose title has the key word 'translation'.\n\nSELECT paper_id FROM Paper WHERE title LIKE '%translation%';\n"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": {
      "id": 1036,
      "db_id": "aan_1",
      "question": "What are the ids for papers with titles containing 'translation'?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids for papers with titles containing 'translation'?\n\nSELECT paper_id FROM Paper WHERE title LIKE '%translation%';\n"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": {
      "id": 1037,
      "db_id": "aan_1",
      "question": "Find the id and title of the papers that are never cited by others."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the id and title of the papers that are never cited by others.\n\nSELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT DISTINCT cited_paper_id FROM Citation);\n"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": {
      "id": 1038,
      "db_id": "aan_1",
      "question": "What are the ids and titles for papers that have never been cited?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the ids and titles for papers that have never been cited?\n\nSELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT DISTINCT cited_paper_id FROM Citation);\n"
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": {
      "id": 1039,
      "db_id": "aan_1",
      "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.\n\nSELECT Affiliation.venue FROM Author_list \n"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": {
      "id": 1040,
      "db_id": "aan_1",
      "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.\n\nSELECT Affiliation.venue FROM Author_list \n"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": {
      "id": 1041,
      "db_id": "aan_1",
      "question": "Find the number of papers published in different conferences each year."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of papers published in different conferences each year.\n\nSELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY year ASC;\n"
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": {
      "id": 1042,
      "db_id": "aan_1",
      "question": "How many papers are published in each venue in each year?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many papers are published in each venue in each year?\n\nSELECT paper_id, title, venue, year FROM Paper WHERE paper_id IN (SELECT DISTINCT cited_paper_id FROM Citation UNION SELECT DISTINCT paper_id FROM Citation);\n"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": {
      "id": 1043,
      "db_id": "aan_1",
      "question": "Find the total number of papers for each affiliation."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the total number of papers for each affiliation.\n\nSELECT Affiliation.venue, COUNT(Paper.paper_id) AS num_papers FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id GROUP BY Affiliation.venue;\n"
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": {
      "id": 1044,
      "db_id": "aan_1",
      "question": "How many papers has each affiliation published?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many papers has each affiliation published?\n\nSELECT Affiliation.venue, COUNT(Paper.paper_id) AS num_papers FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id GROUP BY Affiliation.venue ORDER BY num_papers DESC;\n"
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": {
      "id": 1045,
      "db_id": "aan_1",
      "question": "Find the titles of papers that have more than 50 citations."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the titles of papers that have more than 50 citations.\n\nSELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50);\n"
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": {
      "id": 1046,
      "db_id": "aan_1",
      "question": "What are the titles for papers with more than 50 citations?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the titles for papers with more than 50 citations?\n\nSELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50);\n"
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": {
      "id": 1047,
      "db_id": "aan_1",
      "question": "Find the number of authors who did not publish any paper that is cited more than 50 times."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of authors who did not publish any paper that is cited more than 50 times.\n\nSELECT Author.venue FROM Author WHERE Author.email = 'johndoe@acm.org' AND Author.name = 'John Doe';\n"
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": {
      "id": 1048,
      "db_id": "aan_1",
      "question": "How many authors have not published a paper with more than 50 citations?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many authors have not published a paper with more than 50 citations?\n\nSELECT Author.venue FROM Author WHERE Author.email = 'johndoe@acm.org' AND Author.name = 'John Doe';\n\n"
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": {
      "id": 1049,
      "db_id": "aan_1",
      "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the names of authors who published some paper on NAACL and ACL in the year 2009.\n\nSELECT Author.venue FROM Author WHERE Author.name IN (SELECT Author.name FROM Author JOIN Paper ON Author.author_id = Paper.author_id WHERE Paper.year = '2009' AND Paper.title LIKE '%NAACL%' OR Paper.title LIKE '%ACL%') ORDER BY Author.venue ASC;\n"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": {
      "id": 1050,
      "db_id": "aan_1",
      "question": "What are the names of authors who published in both NAACL and ACL in 2009?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of authors who published in both NAACL and ACL in 2009?\n\nSELECT Author.venue FROM Author WHERE Author.author_id IN ( SELECT Author_list.author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = '2009' AND Paper.venue IN ('NAACL', 'ACL') GROUP BY Author_list.author_id HAVING COUNT(*) > 1 ) ORDER BY Author.venue ASC;\n"
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": {
      "id": 1051,
      "db_id": "aan_1",
      "question": "Find the name of authors who have never published a paper in ACL."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name of authors who have never published a paper in ACL.\n\nSELECT Author.venue FROM Author WHERE Author.name IN (SELECT Author_list.author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue!= 'ACL') AND Author.email IS NOT NULL;\n"
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": {
      "id": 1052,
      "db_id": "aan_1",
      "question": "What are the names of authors who have not published a paper in ACL?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE `Affiliation` (\n  `affiliation_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `address` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`affiliation_id`)\n)\nCREATE TABLE `Author` (\n  `author_id` integer NOT NULL\n,  `name` varchar(255) DEFAULT NULL\n,  `email` varchar(255) DEFAULT NULL\n,  PRIMARY KEY (`author_id`)\n)\nCREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL\n,  `author_id` integer NOT NULL\n,  `affiliation_id` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`,`author_id`)\n,  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`)\n,  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n)\nCREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL\n,  `cited_paper_id` varchar(25) NOT NULL\n,  PRIMARY KEY (`paper_id`,`cited_paper_id`)\n,  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`)\n,  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n)\nCREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL\n,  `title` varchar(255) DEFAULT NULL\n,  `venue` varchar(255) DEFAULT NULL\n,  `year` integer DEFAULT NULL\n,  PRIMARY KEY (`paper_id`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of authors who have not published a paper in ACL?\n\nSELECT Author.venue FROM Author WHERE Author.name IN (SELECT Author_list.author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue!= 'ACL') GROUP BY Author.venue HAVING COUNT(*)=0;\n"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": {
      "id": 1053,
      "db_id": "conference",
      "question": "How many conferences are there?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many conferences are there?\n\nSELECT Conference_ID FROM conference\n\n"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": {
      "id": 1054,
      "db_id": "conference",
      "question": "What is the total number of conferences?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the total number of conferences?\n\nSELECT Conference_ID FROM conference\n\n"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": {
      "id": 1055,
      "db_id": "conference",
      "question": "List all distinct conference names."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all distinct conference names.\n\nSELECT Conference_ID, Conference_Name FROM conference GROUP BY Conference_Name HAVING COUNT(Conference_Name) = 1;\n\n"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": {
      "id": 1056,
      "db_id": "conference",
      "question": "What are the different conference names?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different conference names?\n\nSELECT Conference_ID, Conference_Name FROM conference GROUP BY Conference_Name HAVING COUNT(Conference_Name) > 1;\n\n"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": {
      "id": 1057,
      "db_id": "conference",
      "question": "List all conference name, year, and location."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all conference name, year, and location.\n\nSELECT Conference_ID, Conference_Name, Year, Location FROM conference;\n"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": {
      "id": 1058,
      "db_id": "conference",
      "question": "What are the names, years, and locations of all conferences?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names, years, and locations of all conferences?\n\nSELECT conference.Conference_ID, conference.Year, conference.Location FROM conference;\n\n"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": {
      "id": 1059,
      "db_id": "conference",
      "question": "Show all conference names and the number of times each conference has."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all conference names and the number of times each conference has.\n\nSELECT Conference_ID, COUNT(Conference_ID) AS num_conferences FROM conference GROUP BY Conference_ID;\n\n"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": {
      "id": 1060,
      "db_id": "conference",
      "question": "For each conference name, how many times has it occurred?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each conference name, how many times has it occurred?\n\nSELECT Conference_ID, COUNT(Conference_ID) AS num_occurrences FROM conference GROUP BY Conference_ID;\n\n"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": {
      "id": 1061,
      "db_id": "conference",
      "question": "show all years and the number of conferences in each year."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: show all years and the number of conferences in each year.\n\nSELECT Conference_ID, Year FROM conference GROUP BY Year;\n\n"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": {
      "id": 1062,
      "db_id": "conference",
      "question": "How many conferences occur every year?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many conferences occur every year?\n\nSELECT Conference_ID FROM conference WHERE Year = (SELECT MIN(Year) FROM conference);\n"
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": {
      "id": 1063,
      "db_id": "conference",
      "question": "which year has least number of conferences?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: which year has least number of conferences?\n\nSELECT Conference_ID FROM conference WHERE Year = (SELECT MIN(Year) FROM conference);\n\n"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": {
      "id": 1064,
      "db_id": "conference",
      "question": "What year had the fewest conferences?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What year had the fewest conferences?\n\nSELECT Conference_ID FROM conference WHERE Year = (SELECT MIN(Year) FROM conference);\n"
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": {
      "id": 1065,
      "db_id": "conference",
      "question": "Show all locations where at least two conferences are located."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all locations where at least two conferences are located.\n\nSELECT Conference_ID, Location FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference GROUP BY Conference_ID HAVING COUNT(Conference_ID) > 1);\n"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": {
      "id": 1066,
      "db_id": "conference",
      "question": "What are all locations that have hosted at least two conferences?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are all locations that have hosted at least two conferences?\n\nSELECT Conference_ID, Location FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference GROUP BY Conference_ID HAVING COUNT(Conference_ID) >= 2);\n"
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": {
      "id": 1067,
      "db_id": "conference",
      "question": "Show the institution name, location and founded year of all institutions."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the institution name, location and founded year of all institutions.\n\nSELECT institution.role, conference.location, conference.year FROM staff INNER JOIN conference ON staff.staff_id = conference.staff_id WHERE staff.role = 'chair' AND conference.year > 2010 ORDER BY conference.year DESC;\n\n"
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": {
      "id": 1068,
      "db_id": "conference",
      "question": "What are the names, locations, and founding years for all institutions?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names, locations, and founding years for all institutions?\n\nSELECT institution.role, conference.location, institution.founded FROM staff INNER JOIN conference ON staff.staff_id = conference.conference_id WHERE staff.role = 'chair' AND conference.year > 2000 ORDER BY conference.year ASC;\n\n"
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": {
      "id": 1069,
      "db_id": "conference",
      "question": "How many institution are founded between 1850 and 1900?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many institution are founded between 1850 and 1900?\n\nSELECT institution.role FROM conference_participation WHERE staff_id = '1' AND Conference_ID = '2'\n\n"
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": {
      "id": 1070,
      "db_id": "conference",
      "question": "How many institutions were founded between 1850 and 1900?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many institutions were founded between 1850 and 1900?\n\nSELECT institution.role FROM conference_participation WHERE Conference_ID = 1 AND staff_ID = 2;\n"
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": {
      "id": 1071,
      "db_id": "conference",
      "question": "Show the institution name and location of institution that is most recently founded."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the institution name and location of institution that is most recently founded.\n\nSELECT institution.role, conference.location FROM staff INNER JOIN conference ON staff.staff_id = conference.staff_id WHERE conference.year = 2019 AND conference.role = 'chair' ORDER BY conference.year DESC LIMIT 1;\n\n"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": {
      "id": 1072,
      "db_id": "conference",
      "question": "What are the names and locations of the most recently-founded institution?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and locations of the most recently-founded institution?\n\nSELECT institution.role, conference.location FROM staff INNER JOIN conference ON staff.staff_id = conference.staff_id WHERE staff.institution_id = 1 ORDER BY conference.year DESC LIMIT 1;\n\n"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": {
      "id": 1073,
      "db_id": "conference",
      "question": "Show the institution name and the number of staff for each institution founded after 1800."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the institution name and the number of staff for each institution founded after 1800.\n\nSELECT institution.role, count(staff.staff_id) as num_staff FROM conference_participation JOIN staff ON conference_participation.staff_id = staff.staff_id JOIN institution ON staff.institution_id = institution.institution_id WHERE conference_participation.role = 'chair' GROUP BY institution.institution_id HAVING institution.founded > 1800 ORDER BY num_staff DESC;\n\n"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": {
      "id": 1074,
      "db_id": "conference",
      "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names ."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each institution id, how many staff members does each institution have that was founded after 1800? return their names.\n\nSELECT institution.staff_ID, count(staff.staff_ID) as num_staff FROM conference_participation JOIN staff ON conference_participation.staff_ID = staff.staff_ID JOIN institution ON staff.Institution_ID = institution.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID;\n\n"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": {
      "id": 1075,
      "db_id": "conference",
      "question": "Show institution name which there is no staff in our record."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show institution name which there is no staff in our record.\n\nSELECT institution.role FROM conference_participation WHERE staff_id IS NULL;\n"
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": {
      "id": 1076,
      "db_id": "conference",
      "question": "What is the name of the institution with no staff in the records?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the institution with no staff in the records?\n\nSELECT institution.role FROM conference_participation WHERE staff_id IS NULL;\n"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": {
      "id": 1077,
      "db_id": "conference",
      "question": "Show all staff name who are above the average age."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all staff name who are above the average age.\n\nSELECT staff.staff_ID, staff.name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE staff.Age > (SELECT AVG(Age) FROM staff);\n\n"
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": {
      "id": 1078,
      "db_id": "conference",
      "question": "What are the names of all staff members who are older than average?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all staff members who are older than average?\n\nSELECT staff.staff_ID, name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff);\n\n"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": {
      "id": 1079,
      "db_id": "conference",
      "question": "What is the maximum and minimum age of all staff from the United States?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the maximum and minimum age of all staff from the United States?\n\nSELECT Conference_ID, MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM conference_participation WHERE Nationality = 'United States' GROUP BY Conference_ID;\n\n"
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": {
      "id": 1080,
      "db_id": "conference",
      "question": "What are the maximum and minimum ages for all staff?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the maximum and minimum ages for all staff?\n\nSELECT Conference_ID, MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM conference_participation GROUP BY Conference_ID;\n\n"
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": {
      "id": 1081,
      "db_id": "conference",
      "question": "Show all conference names which the staff from Canada attends."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all conference names which the staff from Canada attends.\n\nSELECT Conference_ID, Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'));\n\n"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": {
      "id": 1082,
      "db_id": "conference",
      "question": "What are the names of all the conferences that has staff from Canada attending?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of all the conferences that has staff from Canada attending?\n\nSELECT Conference_ID, Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'));\n\n"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": {
      "id": 1083,
      "db_id": "conference",
      "question": "Show all staff names who have been both speaker and sponsor in some conference."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all staff names who have been both speaker and sponsor in some conference.\n\nSELECT staff.staff_ID, name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE role ='speaker' AND staff.staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='sponsor') ORDER BY staff.staff_ID ASC;\n\n"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": {
      "id": 1084,
      "db_id": "conference",
      "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the staff members who have been both a speaker and a sponsor at some conference?\n\nSELECT staff.staff_ID, name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE role IN ('speaker','sponsor') GROUP BY staff.staff_ID HAVING COUNT(*) > 1;\n\n"
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": {
      "id": 1085,
      "db_id": "conference",
      "question": "Show all names who have been in both ACL and Naccl."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all names who have been in both ACL and Naccl.\n\nSELECT staff.staff_ID, name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') AND Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL')\n\n"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": {
      "id": 1086,
      "db_id": "conference",
      "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of everbody who has participated in both the ACL and NACCL conferences?\n\nSELECT staff.staff_ID, name FROM conference_participation JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name IN ('ACL', 'NACCL')) GROUP BY staff.staff_ID HAVING COUNT(*) > 1;\n"
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": {
      "id": 1087,
      "db_id": "conference",
      "question": "Show all staff names who attend a conference in 2003 or 2004."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show all staff names who attend a conference in 2003 or 2004.\n\nSELECT staff.staff_ID, name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year=2003 OR Year=2004) ORDER BY staff_ID ASC;\n\n"
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": {
      "id": 1088,
      "db_id": "conference",
      "question": "What are the staff names who participated in conferences between 2003 or 2004?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the staff names who participated in conferences between 2003 or 2004?\n\nSELECT staff.staff_ID, name FROM conference_participation JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year BETWEEN 2003 AND 2004) GROUP BY staff.staff_ID HAVING COUNT(*) > 1;\n\n"
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": {
      "id": 1089,
      "db_id": "conference",
      "question": "Show the conference name and year and the number of participants for each conference."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Show the conference name and year and the number of participants for each conference.\n\nSELECT Conference_ID, Conference_Name, Year, COUNT(*) AS num_of_participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_ID;\n\n"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": {
      "id": 1090,
      "db_id": "conference",
      "question": "For each conference id, what are their names, year, and number of participants?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: For each conference id, what are their names, year, and number of participants?\n\nSELECT Conference_ID, Conference_Name, Year, COUNT(*) AS num_of_participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_ID;\n\n"
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": {
      "id": 1091,
      "db_id": "conference",
      "question": "Find the name of the conferences that have the top 2 most number of attendants."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name of the conferences that have the top 2 most number of attendants.\n\nSELECT Conference_ID, COUNT(*) AS num_attendants FROM conference_participation GROUP BY Conference_ID ORDER BY num_attendants DESC LIMIT 2;\n"
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": {
      "id": 1092,
      "db_id": "conference",
      "question": "What are the names of the conferences that have the top 2 most people attending?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of the conferences that have the top 2 most people attending?\n\nSELECT Conference_ID, Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2);\n"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": {
      "id": 1093,
      "db_id": "conference",
      "question": "Find the name and nationality of the people who did not participate in any ACL conference."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and nationality of the people who did not participate in any ACL conference.\n\nSELECT staff.staff_ID, staff.name, staff.Nationality FROM staff WHERE staff.staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = 1 OR Conference_ID = 2 OR Conference_ID = 3)\n\n"
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": {
      "id": 1094,
      "db_id": "conference",
      "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and nationalities of the people who did not participate in any ACL conferences?\n\nSELECT staff.staff_ID, name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = 1 OR Conference_ID = 2)\n\n"
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": {
      "id": 1095,
      "db_id": "conference",
      "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the name and location of the universities that did not have any staff participated in any conference in 2004.\n\nSELECT institution.role, institution.location FROM institution INNER JOIN staff ON institution.institution_id = staff.institution_id WHERE staff.staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE year=2004) AND institution.founded < 1990;\n\n"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": {
      "id": 1096,
      "db_id": "conference",
      "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE \"conference\" (\n\"Conference_ID\" int,\n\"Conference_Name\" text,\n\"Year\" int,\n\"Location\" text,\nPRIMARY KEY (\"Conference_ID\")\n)\nCREATE TABLE institution (\n\"Institution_ID\" int,\n\"Institution_Name\" text,\n\"Location\" text,\n\"Founded\" int,\nPRIMARY KEY (\"Institution_ID\")\n)\nCREATE TABLE \"staff\" (\n\"staff_ID\" int,\n\"name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Institution_ID\" int,\nPRIMARY KEY (\"staff_ID\"),\nFOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`)\n)\nCREATE TABLE \"conference_participation\" (\n\"Conference_ID\" int,\n\"staff_ID\" int,\n\"role\" text,\nPRIMARY KEY (\"staff_ID\",\"Conference_ID\"),\nFOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),\nFOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`)\n)\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?\n\nSELECT institution.role, conference.location FROM conference INNER JOIN staff ON conference.conference_id = staff.staff_id WHERE conference.year = '2004' AND staff.institution_id = institution.institution_id;\n\n"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": {
      "id": 1097,
      "db_id": "pilot_1",
      "question": "What is the name of the oldest pilot?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the oldest pilot?\n\nSELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);\n"
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": {
      "id": 1098,
      "db_id": "pilot_1",
      "question": "Return the name of the oldest pilot."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the name of the oldest pilot.\n\nSELECT plane_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills);\n"
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": {
      "id": 1099,
      "db_id": "pilot_1",
      "question": "What are the names of pilots whose age is below the average age, ordered by age?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of pilots whose age is below the average age, ordered by age?\n\nSELECT plane_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills);\n"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": {
      "id": 1100,
      "db_id": "pilot_1",
      "question": "Return the names of pilots who are younger than average, ordered by age ascending."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the names of pilots who are younger than average, ordered by age ascending.\n\nSELECT plane_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills);\n"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": {
      "id": 1101,
      "db_id": "pilot_1",
      "question": "Find all information of on pilots whose age is less than 30."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find all information of on pilots whose age is less than 30.\n\nSELECT plane_name, pilot_name, age FROM PilotSkills WHERE age < 30;\n"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": {
      "id": 1102,
      "db_id": "pilot_1",
      "question": "What is all the information about pilots who are younger than 30 ?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is all the information about pilots who are younger than 30?\n\nSELECT plane_name, pilot_name, age FROM PilotSkills WHERE age < 30;\n"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": {
      "id": 1103,
      "db_id": "pilot_1",
      "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the names of all pilots who have a plane named Piper Cub and is under 35.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35);\n"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": {
      "id": 1104,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of pilots who are younger than 35 and have a plane named Piper Cub?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub') GROUP BY pilot_name HAVING COUNT(*) > 1;\n"
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": {
      "id": 1105,
      "db_id": "pilot_1",
      "question": "Where is the plane F-14 Fighter located?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Where is the plane F-14 Fighter located?\n\nSELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';\n"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": {
      "id": 1106,
      "db_id": "pilot_1",
      "question": "Return the location of the hangar in which F-14 Fighter is located."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the location of the hangar in which F-14 Fighter is located.\n\nSELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';\n\n"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": {
      "id": 1107,
      "db_id": "pilot_1",
      "question": "How many different places have some plane?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many different places have some plane?\n\nSELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) > 1);\n"
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": {
      "id": 1108,
      "db_id": "pilot_1",
      "question": "Count the number of different locations of hangars."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of different locations of hangars.\n\nSELECT location FROM Hangar\n\n"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": {
      "id": 1109,
      "db_id": "pilot_1",
      "question": "Which plane does the pilot Jones with age 32 has?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Which plane does the pilot Jones with age 32 has?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;\n"
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": {
      "id": 1110,
      "db_id": "pilot_1",
      "question": "What are the names of planes that the pilot Jones who is 32 has?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of planes that the pilot Jones who is 32 has?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;\n"
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": {
      "id": 1111,
      "db_id": "pilot_1",
      "question": "How many pilots who are older than 40?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many pilots who are older than 40?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age > 40);\n"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": {
      "id": 1112,
      "db_id": "pilot_1",
      "question": "Count the number of pilots with age greater than 40."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of pilots with age greater than 40.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING COUNT(*) > 1);\n"
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": {
      "id": 1113,
      "db_id": "pilot_1",
      "question": "How many plane B-52 Bomber owned by the pilot who is under 35?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many plane B-52 Bomber owned by the pilot who is under 35?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'John Doe' AND age < 35;\n"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": {
      "id": 1114,
      "db_id": "pilot_1",
      "question": "Count the number of B-52 Bombers owned by pilots under 35."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of B-52 Bombers owned by pilots under 35.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'B-52') GROUP BY plane_name HAVING COUNT(*) > 1;\n"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": {
      "id": 1115,
      "db_id": "pilot_1",
      "question": "Who is the youngest pilot to fly the plane Piper Cub?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Who is the youngest pilot to fly the plane Piper Cub?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'John Doe' AND plane_name = 'Piper Cub';\n"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": {
      "id": 1116,
      "db_id": "pilot_1",
      "question": "Return the name of the youngest pilot to fly Piper Cub."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the name of the youngest pilot to fly Piper Cub.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'John Doe' AND plane_name = 'Piper Cub';\n"
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": {
      "id": 1117,
      "db_id": "pilot_1",
      "question": "What is the name of the most popular plane?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the most popular plane?\n\nSELECT plane_name FROM Hangar WHERE COUNT(pilot_name)>1 ORDER BY COUNT(pilot_name) DESC LIMIT 1;\n"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": {
      "id": 1118,
      "db_id": "pilot_1",
      "question": "What is the name of the plane that is flown the most often?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the plane that is flown the most often?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'John Doe' ORDER BY COUNT(*) DESC LIMIT 1;\n"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": {
      "id": 1119,
      "db_id": "pilot_1",
      "question": "What is the name of the least popular plane?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the least popular plane?\n\nSELECT plane_name FROM Hangar WHERE COUNT(pilot_name) = MIN(COUNT(pilot_name));\n"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": {
      "id": 1120,
      "db_id": "pilot_1",
      "question": "What is the name of the plane that is flown the least often?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the name of the plane that is flown the least often?\n\nSELECT plane_name FROM PilotSkills WHERE COUNT(pilot_name) = MIN(COUNT(pilot_name));\n"
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": {
      "id": 1121,
      "db_id": "pilot_1",
      "question": "How many pilots whose planes are in Chicago?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many pilots whose planes are in Chicago?\n\nSELECT PilotSkills.plane_name, COUNT(PilotSkills.plane_name) AS num_pilots\n"
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": {
      "id": 1122,
      "db_id": "pilot_1",
      "question": "Count the number of pilots who have planes in Chicago."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of pilots who have planes in Chicago.\n\nSELECT PilotSkills.plane_name, COUNT(PilotSkills.plane_name) AS num_pilots FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago' GROUP BY PilotSkills.plane_name HAVING COUNT(PilotSkills.plane_name) > 1;\n"
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": {
      "id": 1123,
      "db_id": "pilot_1",
      "question": "What are the planes owned by pilot Smith with age 41?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the planes owned by pilot Smith with age 41?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;\n"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": {
      "id": 1124,
      "db_id": "pilot_1",
      "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the names of planes owned by the pilot whose name is Smith and is 41 years old.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;\n"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": {
      "id": 1125,
      "db_id": "pilot_1",
      "question": "How many distinct planes are owned across all pilots?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many distinct planes are owned across all pilots?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT DISTINCT pilot_name FROM PilotSkills);\n"
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": {
      "id": 1126,
      "db_id": "pilot_1",
      "question": "Count the number of different plane names across all pilots."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of different plane names across all pilots.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'John' UNION SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jane'\n"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": {
      "id": 1127,
      "db_id": "pilot_1",
      "question": "How many planes are owned by the pilot whose name is Smith?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many planes are owned by the pilot whose name is Smith?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith';\n"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": {
      "id": 1128,
      "db_id": "pilot_1",
      "question": "Count the number of planes Smith owns."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of planes Smith owns.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY plane_name HAVING COUNT(*) > 1;\n"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": {
      "id": 1129,
      "db_id": "pilot_1",
      "question": "How many planes are controlled by the pilots whose age is older than 40?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many planes are controlled by the pilots whose age is older than 40?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age > 40);\n"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": {
      "id": 1130,
      "db_id": "pilot_1",
      "question": "Count the number of planes flown by pilots older than 40."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of planes flown by pilots older than 40.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age > 40);\n"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": {
      "id": 1131,
      "db_id": "pilot_1",
      "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING COUNT(*) > 1);\n"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": {
      "id": 1132,
      "db_id": "pilot_1",
      "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of pilots between the ages of 30 and 40, ordered by age ascending?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC);\n"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": {
      "id": 1133,
      "db_id": "pilot_1",
      "question": "List all pilot names sorted by their ages in the descending order."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all pilot names sorted by their ages in the descending order.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'John' AND plane_name = 'Cessna'\n"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": {
      "id": 1134,
      "db_id": "pilot_1",
      "question": "What are the names of pilots, ordered by age descending?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of pilots, ordered by age descending?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name = 'John' ORDER BY age DESC;\n"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": {
      "id": 1135,
      "db_id": "pilot_1",
      "question": "Find all locations of planes sorted by the plane name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find all locations of planes sorted by the plane name.\n\nSELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills ORDER BY plane_name);\n"
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": {
      "id": 1136,
      "db_id": "pilot_1",
      "question": "What are the locations of the different planes, ordered by plane name?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the locations of the different planes, ordered by plane name?\n\nSELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) > 1);\n"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": {
      "id": 1137,
      "db_id": "pilot_1",
      "question": "List all distinct types of planes owned by all pilots in alphabetic order?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: List all distinct types of planes owned by all pilots in alphabetic order?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT DISTINCT pilot_name FROM PilotSkills);\n"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": {
      "id": 1138,
      "db_id": "pilot_1",
      "question": "What are the different plane names, ordered alphabetically?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the different plane names, ordered alphabetically?\n\nSELECT plane_name FROM Hangar\n\n"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": {
      "id": 1139,
      "db_id": "pilot_1",
      "question": "How many pilots who are older than 40 or younger than 30?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: How many pilots who are older than 40 or younger than 30?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN \n"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": {
      "id": 1140,
      "db_id": "pilot_1",
      "question": "Count the number of pilots with age greater than 40 or less than 30."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of pilots with age greater than 40 or less than 30.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING COUNT(*) > 1);\n"
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": {
      "id": 1141,
      "db_id": "pilot_1",
      "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?\n\nSELECT plane_name, pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30;\n"
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": {
      "id": 1142,
      "db_id": "pilot_1",
      "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.\n\nSELECT plane_name, pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30;\n"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": {
      "id": 1143,
      "db_id": "pilot_1",
      "question": "Find pilots who own plane Piper Cub but not B-52 Bomber."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find pilots who own plane Piper Cub but not B-52 Bomber.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN \n"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": {
      "id": 1144,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN \n"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": {
      "id": 1145,
      "db_id": "pilot_1",
      "question": "Find pilots who own planes Piper Cub and B-52 Bomber."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find pilots who own planes Piper Cub and B-52 Bomber.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN \n"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": {
      "id": 1146,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of pilots who own both Piper Cub and the B-52 Bomber?\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN \n"
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": {
      "id": 1147,
      "db_id": "pilot_1",
      "question": "What are the average and smallest ages of all pilots?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the average and smallest ages of all pilots?\n\nSELECT plane_name, AVG(age), MIN(age)\n"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": {
      "id": 1148,
      "db_id": "pilot_1",
      "question": "Return the average and minimum ages across all pilots."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the average and minimum ages across all pilots.\n\nSELECT plane_name, AVG(age), MIN(age)\n"
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": {
      "id": 1149,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who have planes in both Austin and Boston?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of pilots who have planes in both Austin and Boston?\n\nSELECT plane_name FROM Hangar WHERE location = 'Austin' OR location = 'Boston';\n"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": {
      "id": 1150,
      "db_id": "pilot_1",
      "question": "Give the names of pilots who have planes in Austin and Boston."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Give the names of pilots who have planes in Austin and Boston.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN \n"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": {
      "id": 1151,
      "db_id": "pilot_1",
      "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the pilots who have either plane Piper Cub or plane F-14 Fighter.\n\nSELECT plane_name FROM PilotSkills WHERE pilot_name IN \n"
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": {
      "id": 1152,
      "db_id": "pilot_1",
      "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What are the names of pilots who have either the Piper Cub or the F-14 Fighter?\n\nSELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name IN ('Piper Cub', 'F-14 Fighter');\n\n"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": {
      "id": 1153,
      "db_id": "pilot_1",
      "question": "What is the average age of pilots for different types of planes?"
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: What is the average age of pilots for different types of planes?\n\nSELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY plane_name;\n"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": {
      "id": 1154,
      "db_id": "pilot_1",
      "question": "Return the average age of pilots for each plane name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Return the average age of pilots for each plane name.\n\nSELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name;\n"
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": {
      "id": 1155,
      "db_id": "pilot_1",
      "question": "Find the number of planes for each type."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Find the number of planes for each type.\n\nSELECT plane_name, COUNT(*) AS num_planes FROM Hangar GROUP BY plane_name;\n"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": {
      "id": 1156,
      "db_id": "pilot_1",
      "question": "Count the number of entries for each plane name."
    },
    "answer": "\nYour role is a natural language to SQL translator who is expert writing SQL queries in SQLite dialect.\nFor the given schema, output the SQL query you need to answer the problem.\n\nThe problem is given below in natural language.\nAdditionally, here are the CREATE TABLE statements for the schema:\nCREATE TABLE PilotSkills\n  (pilot_name CHAR(15) NOT NULL,\n  plane_name CHAR(15) NOT NULL,\n  age INTEGER,\n  PRIMARY KEY (pilot_name, plane_name),\n  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)\n  )\nCREATE TABLE Hangar\n  (plane_name CHAR(15) NOT NULL PRIMARY KEY,\n   location CHAR(15)\n  )\n\n\nDo not write anything after the SQL query.\nDo not write anything other than the SQL query - no comments, no newlines, no print statements.\n\nProblem: Count the number of entries for each plane name.\n\nSELECT plane_name, COUNT(*) AS num_entries FROM PilotSkills GROUP BY plane_name;\n"
  }
]