SELECT Club_ID FROM club
SELECT Club_ID FROM club
SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player ORDER BY Earnings DESC LIMIT 10) ORDER BY Name ASC;
SELECT Name FROM club
SELECT club.Name, manager.Manager, captain.Captain FROM club INNER JOIN (SELECT Club_ID, Manager as Manager FROM player WHERE Name ='manager') AS manager ON club.Club_ID = manager.Club_ID INNER JOIN (SELECT Club_ID, Captain as Captain FROM player WHERE Name = 'captain') AS captain ON club.Club_ID = captain.Club_ID;
SELECT club.Name, player.Name FROM club JOIN player ON club.Club_ID = player.Club_ID WHERE player.Country = 'USA' AND player.Earnings > 1000000 ORDER BY club.Name ASC;
SELECT club.Name FROM club WHERE club.Manufacturer!= 'Nike';
SELECT Name FROM club WHERE Manufacturer!= 'Nike';
SELECT Name FROM player WHERE Wins_count IN (SELECT MAX(Wins_count) FROM player GROUP BY Club_ID);
SELECT Name FROM player WHERE Wins_count IN (SELECT MAX(Wins_count) FROM player GROUP BY Club_ID);
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player);
SELECT Name FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player);
SELECT Country FROM player WHERE Earnings > 1200000 GROUP BY Country;
SELECT player.Country FROM club
SELECT Country FROM player WHERE Earnings = (SELECT MAX(Earnings) FROM player WHERE Wins_count > 2);
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1;
SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID
SELECT player.Name, club.Name FROM player JOIN club ON player.Club_ID = club.Club_ID
SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player WHERE Wins_count > 2);
SELECT club.Name FROM club WHERE EXISTS (SELECT * FROM player WHERE player.Club_ID = club.Club_ID AND player.Wins_count > 2);
SELECT Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce');
SELECT player.Name FROM player WHERE Club_ID IN (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce');
SELECT club.Name FROM club WHERE club.Club_ID IN ( SELECT player.Club_ID FROM player GROUP BY player.Club_ID ORDER BY AVG(player.Earnings) DESC LIMIT 10 ) ORDER BY club.Name ASC;
SELECT club.Name FROM club WHERE club.Club_ID IN ( SELECT player.Club_ID FROM player GROUP BY player.Club_ID ORDER BY AVG(player.Earnings) DESC )
SELECT Club_ID, Manufacturer FROM club GROUP BY Club_ID HAVING COUNT(Manufacturer) > 1;
SELECT club.Club_ID, club.Name, club.Manufacturer, COUNT(*) AS ManufacturerCount FROM club GROUP BY club.Club_ID HAVING COUNT(*) > 1 ORDER BY ManufacturerCount DESC;
SELECT club.Club_ID, club.Name, club.Manager, club.Captain, club.Manufacturer, club.Sponsor FROM club WHERE club.Manufacturer IN (SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1);
SELECT Name FROM club WHERE Manufacturer IN (SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1);
SELECT Club_ID, Manufacturer FROM club WHERE Club_ID IN (SELECT Club_ID FROM club GROUP BY Club_ID HAVING COUNT(*) > 1) ORDER BY Club_ID ASC;
SELECT Name FROM club WHERE Club_ID IN (SELECT Club_ID FROM player GROUP BY Club_ID HAVING COUNT(Club_ID) > 1);
SELECT Country FROM player WHERE Player_ID IN (SELECT Player_ID FROM player GROUP BY Club_ID HAVING COUNT(Club_ID) > 1);
SELECT Country FROM player WHERE Player_ID IN (SELECT Player_ID FROM player GROUP BY Player_ID HAVING COUNT(Player_ID) > 1);
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player);
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player);
SELECT player.Country FROM club
SELECT Country FROM player WHERE Earnings > 1400000 OR Earnings < 1100000 GROUP BY Country HAVING COUNT(*) = (SELECT COUNT(DISTINCT Club_ID) FROM club);
SELECT Country FROM player
SELECT Country FROM player
SELECT player.Earnings FROM club
SELECT player.Earnings FROM club
SELECT Customers.order_item_id, Customers.customer_first_name, Customers.customer_last_name FROM Customers WHERE (Customers.order_item_id > 2 AND Customers.order_item_id < 3);
SELECT Customers.order_item_id, Customers.customer_first_name, Customers.customer_last_name FROM Customers INNER JOIN Order_items ON Customers.order_id = Order_items.order_id WHERE Order_items.order_item_id > 2 GROUP BY Customers.customer_first_name, Customers.customer_last_name HAVING COUNT(*)>2;
SELECT Orders.order_item_id, Order_Status_Code, COUNT(Order_Item_Id) AS Number_of_Products FROM Orders JOIN Order_Items ON Orders.Order_ID = Order_Items.Order_ID GROUP BY Orders.Order_ID HAVING COUNT(Order_Item_Id) > 0;
SELECT order_item_id, COUNT(*) AS num_products, ord.order_status_code, ord.order_id FROM Order_items JOIN Orders as ord ON Order_items.order_id = ord.order_id GROUP BY order_item_id;
SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders ORDER BY date_order_placed ASC LIMIT 1);
SELECT order_item_id, MIN(date_order_placed), MAX(date_order_placed)
SELECT Customers.order_item_id FROM Orders WHERE order_id = 0;
SELECT Customers.order_item_id, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name FROM Customers LEFT JOIN Order_items ON Customers.customer_id = Order_items.customer_id WHERE Order_items.order_item_id IS NULL;
SELECT order_item_id, product_id, product_name, product_price, product_color FROM Order_items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_items GROUP BY order_item_id HAVING COUNT(order_item_id)=1);
SELECT order_item_id, product_name, product_price, product_color FROM Order_items JOIN Products ON Order_items.product_id = Products.product_id WHERE Order_items.order_id IN (SELECT order_id FROM Orders GROUP BY order_id HAVING COUNT(order_id) < 2);
SELECT Orders.order_item_id, Orders.date_order_placed FROM Order_items INNER JOIN Shipments ON Order_items.shipment_id = Shipments.shipment_id WHERE Order_items.product_id IN (SELECT product_id FROM Products WHERE parent_product_id IS NOT NULL);
SELECT order_item_id, date_order_placed FROM Order_items WHERE product_id IN (SELECT product_id FROM Order_items GROUP BY product_id HAVING COUNT(*) > 1);
SELECT Products.order_item_id, Products.product_name, Products.product_price FROM Order_items INNER JOIN Products ON Order_items.product_id = Products.product_id ORDER BY Order_items.order_item_id DESC LIMIT 5;
SELECT order_item_id, product_name, product_price FROM Order_items JOIN Products ON Order_items.product_id = Products.product_id WHERE order_item_id IN (SELECT order_item_id FROM Shipment_items GROUP BY order_item_id ORDER BY COUNT(*) DESC LIMIT 5);
SELECT order_item_id, SUM(product_price) FROM Order_items GROUP BY order_item_id ORDER BY SUM(product_price) ASC LIMIT 1;
SELECT order_item_id, product_id, product_name, product_price, order_item_status_code, shipment_id, shipment_date, shipment_tracking_number FROM Order_items JOIN Shipments ON Order_items.order_id = Shipments.order_id WHERE order_item_status_code = 'Delivered' AND shipment_date IS NOT NULL ORDER BY product_price ASC;
SELECT shipment_id, COUNT(*) AS total_orders FROM Shipment_Items GROUP BY shipment_id ORDER BY total_orders DESC LIMIT 1;
SELECT shipment_id, COUNT(*) AS num_shipment_items FROM Shipment_Items GROUP BY shipment_id ORDER BY num_shipment_items DESC LIMIT 1;
SELECT Customers.order_item_id, COUNT(*) AS num_products FROM Orders JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id JOIN Shipments ON Orders.order_id = Shipments.order_id JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id JOIN Order_items ON Shipment_items.order_item_id = Order_items.order_item_id JOIN Products ON Order_items.product_id = Products.product_id GROUP BY Customers.gender_code;
SELECT Customers.order_item_id, Products.product_id, COUNT(*) AS num_products FROM Orders INNER JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id INNER JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY Customers.gender_code, Products.product_id ORDER BY Customers.gender_code ASC, Products.product_id ASC;
SELECT Customers.order_item_id, COUNT(*) AS order_count FROM Orders INNER JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Customers ON Customer_Payment_Methods.customer_id = Customers.customer_id GROUP BY Customers.gender_code ORDER BY order_count DESC;
SELECT Customers.order_item_id, COUNT(*) AS order_count FROM Orders INNER JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id GROUP BY Customers.gender_code;
SELECT Customers.order_item_id, Customer_Payment_Methods.customer_id, Products.product_id FROM Orders INNER JOIN Order_items ON Orders.order_id = Order_items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id INNER JOIN Products ON Order_items.product_id = Products.product_id WHERE Orders.order_id = 2;
SELECT Customers.order_item_id, Products.product_name, Orders.order_id, Shipments.shipment_id FROM Customer_Payment_Methods INNER JOIN Customers ON Customer_Payment_Methods.customer_id = Customers.customer_id INNER JOIN Order_Items ON Customers.customer_id = Order_Items.customer_id INNER JOIN Products ON Order_Items.product_id = Products.product_id INNER JOIN Shipments ON Order_Items.order_id = Shipments.order_id WHERE Customers.gender_code = 'M' AND Customers.customer_first_name LIKE '%John%' ORDER BY Customers.customer_first_name ASC;
SELECT Invoices.order_item_id, Shipments.shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number;
SELECT Invoices.order_item_id, Order_items.invoice_number, Shipments.shipment_date FROM Invoices INNER JOIN Order_items ON Invoices.invoice_number = Order_items.invoice_number INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number;
SELECT Products.shipment_id, Shipment_Items.order_item_id, Order_Items.product_id, Products.product_name, Shipments.shipment_date FROM Products INNER JOIN Shipment_Items ON Products.product_id = Shipment_Items.order_item_id INNER JOIN Orders ON Shipment_Items.order_id = Orders.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Order_Items ON Shipments.invoice_number = Order_Items.invoice_number WHERE Shipments.shipment_date IS NOT NULL;
SELECT Products.shipment_id, Shipments.shipment_date FROM Shipment_items INNER JOIN Shipments ON Shipment_items.shipment_id = Shipments.shipment_id INNER JOIN Order_items ON Shipment_items.order_item_id = Order_items.order_item_id INNER JOIN Orders ON Order_items.order_id = Orders.order_id INNER JOIN Customers ON Orders.customer_id = Customers.customer_id INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number INNER JOIN Products ON Order_items.product_id = Products.product_id WHERE (Products.product_name LIKE '%shirt%') AND (Products.product_color LIKE 'blue') AND (Products.product_size LIKE 'large') AND (Products.product_description LIKE '%red%') AND (Customers.gender_code LIKE 'F') AND (Customer_Payment_Methods.payment_method_code LIKE 'credit card') AND (Invoices.invoice_status_code LIKE 'paid') AND (Orders.order_status_code LIKE'shipped
SELECT order_item_id, product_id, order_id, order_item_status_code, shipment_tracking_number FROM Order_items JOIN Shipment_items ON Order_items.order_item_id = Shipment_items.order_item_id WHERE shipment_id IS NOT NULL;
SELECT order_item_id, product_id, order_item_status_code, shipment_tracking_number FROM Order_items JOIN Shipment_items ON Order_items.order_item_id = Shipment_items.order_item_id WHERE order_item_status_code = 'SHIPPED' AND shipment_tracking_number IS NOT NULL;
SELECT order_item_id, product_name, product_color FROM Order_items JOIN Shipment_items ON Order_items.order_item_id = Shipment_items.order_item_id JOIN Shipments ON Shipment_items.shipment_id = Shipments.shipment_id WHERE shipment_date IS NOT NULL;
SELECT Products.order_item_id, Products.product_name, Products.product_color FROM Shipments INNER JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id INNER JOIN Order_items ON Shipment_items.order_item_id = Order_items.order_item_id INNER JOIN Products ON Order_items.product_id = Products.product_id;
SELECT Products.order_item_id, Products.product_name, Products.product_price, Products.product_description FROM Customers INNER JOIN Order_items ON Customers.customer_id = Order_items.order_id WHERE Customers.gender_code = 'F' AND Order_items.order_item_id = Products.product_id;
SELECT Products.order_item_id, Products.product_name, Products.product_price, Products.product_description FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id INNER JOIN Products ON Order_Items.product_id = Products.product_id WHERE Customers.gender_code = 'F' GROUP BY Products.product_name, Products.product_price, Products.product_description;
SELECT Invoices.order_item_id FROM Invoices WHERE InvoiceStatus ='shipped' AND ShipmentDate IS NULL;
SELECT Invoices.order_item_id, Invoices.invoice_status_code FROM Shipments INNER JOIN Order_items ON Shipments.order_item_id = Order_items.order_item_id WHERE Shipment_items.shipment_id IS NULL;
SELECT order_item_id, order_id, sum(product_price) as total_cost FROM Order_items GROUP BY order_id ORDER BY order_id ASC;
SELECT order_item_id, date_order_placed, sum(product_price) as total_amount_paid FROM Order_items JOIN Orders ON Order_items.order_id = Orders.order_id GROUP BY order_id;
SELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE customer_id = 2;
SELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE Customer_Payment_Methods.customer_id = Orders.customer_id AND Order_Items.order_id = Shipments.invoice_number AND Shipment_items.shipment_id = Shipments.shipment_id
SELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'New' OR order_item_status_code = 'Cancelled' OR order_item_status_code = 'Returned';
SELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'Ordered' AND product_id IN (SELECT product_id FROM Products WHERE parent_product_id IS NULL);
SELECT shipment_id, COUNT(DISTINCT payment_method_code) AS num_payment_methods FROM Shipments GROUP BY shipment_id HAVING COUNT(DISTINCT payment_method_code) > 1;
SELECT shipment_id, COUNT(DISTINCT payment_method_code) AS num_payment_methods FROM Shipments JOIN Customer_Payment_Methods ON Shipments.customer_id = Customer_Payment_Methods.customer_id GROUP BY shipment_id HAVING COUNT(DISTINCT payment_method_code) > 1;
SELECT Customers.order_item_id FROM Customer_Payment_Methods WHERE customer_id = 'customer_id' AND payment_method_code = 'payment_method_code'
SELECT Customers.order_item_id, Customer_Payment_Methods.login_name, Customer_Payment_Methods.login_password FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id WHERE Customers.phone_number LIKE '%+12%';
SELECT Products.order_item_id FROM Products WHERE Products.product_name LIKE '%Dell%';
SELECT Products.order_item_id FROM Products WHERE Products.product_name LIKE '%Dell%';
SELECT Products.order_item_id, Products.product_price, Products.product_size FROM Order_items INNER JOIN Shipments ON Order_items.order_item_id = Shipment_items.order_item_id WHERE Order_items.product_id = Products.product_id AND Order_items.order_item_status_code = 'SHIPPED' AND Shipment_items.shipment_id = Shipments.shipment_id AND Shipments.invoice_number = Invoices.invoice_number AND Invoices.invoice_status_code = 'PAID' AND Orders.customer_id = Customers.customer_id AND Customers.gender_code = 'F' AND Orders.date_order_placed BETWEEN '2019-01-01' AND '2020-12-31' GROUP BY Products.product_id HAVING AVG(Products.product_price) > (SELECT AVG(Products.product_price) FROM Products);
SELECT Products.order_item_id, Products.product_price, Products.product_size FROM Order_items INNER JOIN Products ON Order_items.order_item_id = Products.product_id WHERE Product.price > (SELECT AVG(Product.price) FROM Products);
SELECT Products.order_item_id FROM Products WHERE order_item_id IS NULL;
SELECT Products.order_item_id FROM Products WHERE order_item_id IS NULL;
SELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE customer_id = 2;
SELECT Customer_Payment_Methods.order_item_id FROM Customers WHERE customer_id = 'Customer_Payment_Methods.customer_id' AND Customer_Payment_Methods.payment_method_code IS NULL;
SELECT order_item_id, product_id, order_id, order_item_status_code, date_order_placed FROM Order_items ORDER BY order_item_id ASC;
SELECT order_item_id, product_id, order_id, order_item_status_code, date_order_placed FROM Order_items INNER JOIN Orders ON Order_items.order_id = Orders.order_id;
SELECT Customers.order_item_id, Products.product_name, Orders.order_id, Shipments.shipment_id, Shipment_items.shipment_tracking_number FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_items ON Orders.order_id = Order_items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id WHERE Customers.country = 'USA' ORDER BY Customers.customer_id ASC;
SELECT Customers.order_item_id, Products.product_name, Shipments.shipment_date, Shipment_items.order_item_id FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_items ON Orders.order_id = Order_items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id INNER JOIN Products ON Order_items.product_id = Products.product_id WHERE Customers.country = 'United States' ORDER BY Customers.customer_id ASC;
SELECT Customers.order_item_id, Products.product_name FROM Customer_Payment_Methods INNER JOIN Orders ON Customer_Payment_Methods.customer_id = Orders.customer_id INNER JOIN Order_items ON Orders.order_id = Order_items.order_id INNER JOIN Products ON Order_items.product_id = Products.product_id;
SELECT Customers.order_item_id, Products.product_name FROM Orders INNER JOIN Customer_Payment_Methods ON Orders.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Order_items ON Orders.order_id = Order_items.order_id INNER JOIN Products ON Order_items.product_id = Products.product_id WHERE Orders.order_status_code = 'Completed' AND Customer_Payment_Methods.payment_method_code = 'Credit Card';
SELECT shipment_id, COUNT(*) AS num_items_shipped FROM Shipment_Items GROUP BY shipment_id;
SELECT Products.order_item_id FROM Products WHERE Products.product_id = Shipment_items.shipment_id;
SELECT Products.order_item_id, AVG(Product.price) FROM Products INNER JOIN Order_items ON Products.product_id = Order_items.product_id GROUP BY Products.order_item_id;
SELECT Products.order_item_id, AVG(Product.price) FROM Products INNER JOIN Order_items ON Products.product_id = Order_items.product_id GROUP BY Order_items.order_item_id;
SELECT order_item_id, AVG(product_price) AS avg_price FROM Order_items GROUP BY order_item_id;
SELECT order_item_id, product_id, AVG(product_price) AS avg_price FROM Order_items GROUP BY order_item_id, product_id;
SELECT Customers.order_item_id, Customers.email_address, Customers.town_city, Customers.county FROM Customers INNER JOIN Order_items ON Customers.customer_id = Order_items.order_id WHERE Customers.gender_code IN (SELECT MIN(Customers.gender_code) FROM Customers GROUP BY Customers.gender_code);
SELECT Customers.order_item_id, Customer_Payment_Methods.email_address, Shipments.town_city, Shipment_Items.county FROM Customers INNER JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_Items ON Shipments.shipment_id = Shipment_Items.shipment_id WHERE (Orders.order_status_code = 'Cancelled') AND (Orders.date_order_placed > '2019-01-01' OR Orders.date_order_placed < '2020-12-31');
SELECT Orders.order_item_id FROM Order_Items WHERE Customer_Payment_Methods.customer_id = Customers.customer_id AND Customer_Payment_Methods.payment_method_code IN (SELECT Customer_Payment_Methods.payment_method_code FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.customer_id HAVING COUNT(Customer_Payment_Methods.payment_method_code)>1);
SELECT order_item_id FROM Order_Items WHERE product_id = 100 AND order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(*) >= 2));
SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE order_status_code = 'Cancelled') ORDER BY order_item_id ASC;
SELECT order_item_id FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE order_status_code = 'Cancelled') ORDER BY order_item_id ASC LIMIT 1;
SELECT order_item_id, product_description FROM Order_items JOIN Shipment_items ON Order_items.order_item_id = Shipment_items.order_item_id WHERE shipment_id IN (SELECT shipment_id FROM Shipments JOIN Orders ON Shipments.order_id = Orders.order_id WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods JOIN Customers ON Customer_Payment_Methods.customer_id = Customers.customer_id WHERE payment_method_code = 'credit card')) AND product_id IN (SELECT product_id FROM Products JOIN Order_items ON Products.product_id = Order_items.product_id WHERE parent_product_id IS NULL) GROUP BY order_item_id HAVING COUNT(order_item_id) > 3;
SELECT order_item_id, product_description FROM Order_items WHERE order_item_id IN (SELECT order_item_id FROM Shipment_items GROUP BY order_item_id HAVING COUNT(*) > 3);
SELECT Invoices.shipment_id, Invoices.invoice_date FROM Shipments INNER JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number WHERE (Shipments.shipment_id IN (SELECT Shipment_items.shipment_id FROM Shipment_items GROUP BY Shipment_items.shipment_id HAVING COUNT(*) >= 2));
SELECT Invoices.shipment_id, Shipments.invoice_number, Shipments.shipment_date FROM Invoices INNER JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number WHERE (SELECT COUNT(*) FROM Shipment_items GROUP BY shipment_id HAVING COUNT(*) > 1);
SELECT shipment_id, shipment_tracking_number, shipment_date FROM Shipments;
SELECT shipment_id, shipment_tracking_number, shipment_date FROM Shipments;
SELECT Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Order_items INNER JOIN Products ON Order_items.order_item_id = Products.product_id WHERE Order_items.order_item_id IN (SELECT Order_items.order_item_id FROM Order_items INNER JOIN Orders ON Order_items.order_id = Orders.order_id INNER JOIN Shipments ON Orders.order_id = Shipments.order_id INNER JOIN Shipment_items ON Shipments.shipment_id = Shipment_items.shipment_id INNER JOIN Invoices ON Shipments.invoice_number = Invoices.invoice_number INNER JOIN Customer_payment_methods ON Invoices.customer_id = Customer_payment_methods.customer_id INNER JOIN Customers ON Customer_payment_methods.customer_id = Customers.customer_id WHERE Customers.gender_code = 'F' AND Customers.email_address LIKE '%@gmail.com') AND Order_items.order_item_id IN (SELECT Order_items.order_item_id FROM Order_items INNER JOIN Products ON Order_items.product_id = Products.product_id WHERE Products.product_price < (SELECT MAX(Product.price) FROM
SELECT Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Order_items INNER JOIN Products ON Order_items.order_item_id = Products.product_id WHERE Order_items.order_item_status_code!= 'MAX' ORDER BY Product_color ASC, Product_description ASC, Product_size ASC;
SELECT director.Director_ID, director.Name FROM director WHERE director.Age > (SELECT AVG(director.Age) FROM director);
SELECT director.Director_ID, director.Name, director.Age FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE program.Start_Year < 2000 ORDER BY director.Age DESC LIMIT 1;
SELECT Channel_ID FROM channel WHERE Internet LIKE '%bbc%'
SELECT channel.Channel_ID FROM program WHERE program.Start_Year > 2000 AND program.Director_ID IN (SELECT director.Director_ID FROM director WHERE director.Age < 50) GROUP BY channel.Channel_ID HAVING COUNT(DISTINCT program.Program_ID) = 1;
SELECT program.Channel_ID, program.Title FROM program ORDER BY Start_Year DESC;
SELECT director.Director_ID, Name, Age FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE Channel_ID IN ( SELECT channel.Channel_ID FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE Is_first_director = 1 ) GROUP BY Director_ID ORDER BY COUNT(Director_ID) DESC LIMIT 1;
SELECT director.Director_ID, director.Name, director.Age FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE program.Channel_ID IN ( SELECT channel.Channel_ID FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE director_admin.Is_first_director = 1 ) GROUP BY director.Director_ID ORDER BY COUNT(director.Director_ID) DESC LIMIT 1;
SELECT program.Channel_ID, channel.Name, director.Administered_Channel_ID, director.Age, director.Name, program.Start_Year, program.Title FROM program INNER JOIN channel ON program.Channel_ID = channel.Channel_ID INNER JOIN director_admin ON director_admin.Director_ID = program.Director_ID WHERE director_admin.Is_first_director = 1 ORDER BY Start_Year DESC LIMIT 1;
SELECT channel.Channel_ID, channel.Name, channel.Internet FROM channel JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE director_admin.Is_first_director = 1 AND (SELECT COUNT(*) FROM program WHERE program.Channel_ID = channel.Channel_ID) > 1;
SELECT channel.Channel_ID, channel.Name, COUNT(program.Program_ID) AS num_programs FROM program JOIN director_admin ON program.Director_ID = director_admin.Director_ID AND program.Channel_ID = director_admin.Channel_ID JOIN channel ON program.Channel_ID = channel.Channel_ID GROUP BY channel.Channel_ID ORDER BY channel.Channel_ID ASC;
SELECT Channel_ID FROM channel WHERE NOT EXISTS ( SELECT * FROM program WHERE program.Channel_ID = channel.Channel_ID );
SELECT director.Director_ID, Name FROM director INNER JOIN program ON director.Director_ID = program.Director_ID WHERE Title = 'Dracula'
SELECT channel.Channel_ID, channel.Name, channel.Internet FROM director_admin JOIN channel ON director_admin.Channel_ID = channel.Channel_ID WHERE director_admin.Is_first_director = 1 GROUP BY channel.Channel_ID ORDER BY COUNT(director_admin.Director_ID) DESC LIMIT 1;
SELECT director.Director_ID, director.Name FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE Start_Year > 2000 AND Start_Year < 2015 ORDER BY Director_ID ASC;
SELECT channel.Channel_ID, channel.Name FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID JOIN director_admin ON channel.Channel_ID = director_admin.Channel_ID WHERE (director_admin.Is_first_director = true) AND ((director_admin.Director_ID IN (SELECT Director_ID FROM director WHERE Age < 40)) OR (director_admin.Director_ID IN (SELECT Director_ID FROM director WHERE Age > 60)))
SELECT Channel_ID, Name FROM channel WHERE NOT EXISTS (SELECT * FROM director_admin WHERE Director_ID = 1 AND Channel_ID = channel.Channel_ID);
SELECT radio.City_channel_ID, COUNT(*) AS num_radios FROM city_channel_radio JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID GROUP BY radio.City_channel_ID;
SELECT radio.tv_show_ID FROM city_channel_radio WHERE City_channel_ID = 1 AND Is_online = true;
SELECT tv_show.tv_show_ID, tv_show.tv_show_name, tv_show.Original_Airdate FROM city_channel_tv_show INNER JOIN tv_show ON city_channel_tv_show.tv_show_ID = tv_show.tv_show_ID WHERE Is_online = 1 AND Is_free = 0;
SELECT City_channel_ID, Station_name FROM city_channel WHERE Affiliation!= 'ABC';
SELECT radio.tv_show_ID FROM city_channel_radio WHERE radio.ERP_kW > 150 OR radio.ERP_kW < 30;
SELECT radio.tv_show_ID FROM city_channel_radio WHERE City_channel_ID = 1 AND Radio_ID = 3;
SELECT radio.City_channel_ID, AVG(radio.ERP_kW) AS avg_ERP FROM city_channel_radio JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID GROUP BY radio.City_channel_ID;
SELECT City_channel_ID, Affiliation, COUNT(*) AS Count FROM city_channel GROUP BY Affiliation ORDER BY Count DESC;
SELECT City_channel_ID, COUNT(*) AS count FROM city_channel GROUP BY City_channel_ID ORDER BY count DESC LIMIT 1;
SELECT city_channel.City_channel_ID, Affiliation FROM city_channel JOIN city_channel_radio ON city_channel.ID = city_channel_radio.City_channel_ID GROUP BY Affiliation HAVING COUNT(*) > 3;
SELECT City_channel_ID, Station_name FROM city_channel ORDER BY Station_name ASC;
SELECT radio.City_channel_ID, city_channel.City, radio.Transmitter FROM city_channel JOIN city_channel_radio ON city_channel.ID = City_channel_radio.City_channel_ID JOIN radio ON City_channel_radio.Radio_ID = Radio.Radio_ID;
SELECT radio.tv_show_ID, city_channel.tv_show_ID FROM city_channel JOIN tv_show ON city_channel.tv_show_ID = tv_show.tv_show_ID WHERE city_channel.ID = 1;
SELECT radio.City_channel_ID, radio.Transmitter, COUNT(city_channel.ID) AS num_city_channels
SELECT radio.tv_show_ID FROM tv_show WHERE tv_show.tv_show_ID NOT IN (SELECT DISTINCT city_channel.ID FROM city_channel JOIN city_channel_radio ON city_channel.ID = city_channel_radio.City_channel_ID JOIN radio ON city_channel_radio.Radio_ID = radio.Radio_ID);
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Top_Speed > (SELECT MAX(vehicle_top_speed) FROM (SELECT vehicle.Top_Speed FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID GROUP BY vehicle.Vehicle_ID)) AND vehicle.Power > 6000;
SELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Top_Speed FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Power > 6000 ORDER BY vehicle.Top_Speed DESC LIMIT 1;
SELECT driver.Driver_ID, driver.Name FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Citizenship = 'United States';
SELECT driver.Driver_ID, driver.Name FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE driver.Citizenship = 'United States'
SELECT Driver_ID, COUNT(Vehicle_ID) AS num_driven FROM vehicle_driver GROUP BY Driver_ID ORDER BY num_driven DESC LIMIT 1;
SELECT Driver_ID, COUNT(Vehicle_ID) AS num_driven FROM vehicle_driver GROUP BY Driver_ID ORDER BY num_driven DESC LIMIT 1;
SELECT Vehicle_ID, MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'
SELECT vehicle.Driver_ID, MAX(vehicle.Power), AVG(vehicle.Power) FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Builder = 'Zhuzhou' GROUP BY vehicle.Driver_ID;
SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Racing_Series = 'F1') GROUP BY Vehicle_ID HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver WHERE Racing_Series = 'F1'));
SELECT Vehicle_ID FROM vehicle_driver WHERE Driver_ID IN (SELECT Driver_ID FROM driver GROUP BY Driver_ID HAVING COUNT(*) = 1) ORDER BY Total_Production DESC LIMIT 1;
SELECT vehicle.Vehicle_ID, vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = '1996'
SELECT vehicle.Vehicle_ID, vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = '1996'
SELECT vehicle.Vehicle_ID, vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle INNER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Driver_ID IN ( SELECT driver.Driver_ID FROM driver WHERE driver.Racing_Series = 'F1' ) ORDER BY vehicle.Vehicle_ID ASC;
SELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Build_Year, vehicle.Builder FROM vehicle INNER JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Driver_ID = 1;
SELECT driver.Driver_ID FROM vehicle_driver
SELECT driver.Driver_ID FROM vehicle_driver
SELECT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR';
SELECT Driver_ID FROM driver WHERE Racing_Series = 'NASCAR';
SELECT Vehicle_ID, AVG(Top_Speed) AS Average_Top_Speed FROM vehicle GROUP BY Vehicle_ID;
SELECT vehicle.Driver_ID, vehicle.Model, AVG(vehicle.Top_Speed) AS Average_Top_Speed FROM vehicle GROUP BY vehicle.Driver_ID, vehicle.Model;
SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Power > 5000) GROUP BY Driver_ID HAVING COUNT(Driver_ID)=1;
SELECT driver.Driver_ID, driver.Name FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE vehicle.Power > 5000;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE (vehicle.Total_Production > 100 OR vehicle.Top_Speed > 150);
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE (vehicle.Total_Production > 100) OR (vehicle.Top_Speed > 150);
SELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Build_Year FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Model LIKE '%DJ%';
SELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Build_Year FROM vehicle WHERE vehicle.Model LIKE '%DJ%';
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Driver_ID IS NULL;
SELECT vehicle.Driver_ID FROM vehicle WHERE NOT EXISTS (SELECT * FROM driver WHERE driver.Driver_ID = vehicle.Driver_ID);
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) >= 2 OR Builder = 'Ziyang');
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE (SELECT COUNT(*) FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) = 2)) > 0 OR (SELECT COUNT(*) FROM builder WHERE builder.Builder_ID IN (SELECT builder.Builder_ID FROM builder JOIN vehicle ON builder.Builder_ID = vehicle.Builder_ID GROUP BY builder.Builder_ID HAVING COUNT(builder.Builder_ID) = 1 AND builder.Builder_ID = 'Ziyang')) > 0;
SELECT Vehicle_ID, Model FROM vehicle WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID HAVING COUNT(Driver_ID) > 2 OR Driver_ID = (SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon'));
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE (SELECT COUNT(*) FROM driver WHERE driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) > 2)) OR (SELECT COUNT(*) FROM driver WHERE driver.Name = 'Jeff Gordon') > 0;
SELECT Vehicle_ID FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT Vehicle_ID FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT driver.Driver_ID, driver.Name FROM driver ORDER BY Name ASC;
SELECT driver.Driver_ID, driver.Name FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE vehicle_driver.Vehicle_ID = 1 ORDER BY Name ASC;
SELECT driver.Driver_ID, COUNT(driver.Racing_Series) AS Count_of_drivers FROM driver GROUP BY driver.Racing_Series;
SELECT driver.Driver_ID, COUNT(driver.Racing_Series) AS num_drivers FROM driver GROUP BY driver.Racing_Series;
SELECT driver.Driver_ID, driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID WHERE vehicle.Model = 'DJ1'
SELECT driver.Driver_ID, driver.Name, driver.Citizenship FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID WHERE vehicle.Model = 'DJ1';
SELECT Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver);
SELECT Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM vehicle_driver);
SELECT Exams.Student_Answer_ID FROM Student_Answers WHERE Student_Answer_ID = 'A00001' AND Satisfactory_YN = 'Y'
SELECT Exams.Student_Answer_ID, COUNT(*) AS Total_Students FROM Student_Answers GROUP BY Exam_ID HAVING COUNT(*) > 0;
SELECT Exams.Student_Answer_ID, Valid_Answers.Valid_Answer_Text FROM Student_Answers INNER JOIN Student_Assessments ON Student_Answers.Student_Answer_ID = Student_Assessments.Student_Answer_ID INNER JOIN Valid_Answers ON Student_Assessments.Valid_Answer_ID = Valid_Answers.Valid_Answer_ID WHERE Student_Answers.Question_ID = 2 AND Student_Answers.Exam_ID = 3 ORDER BY Student_Answers.Student_Answer_ID ASC
SELECT Exams.Student_Answer_ID FROM Student_Answers WHERE Student_Answer_ID = 'A00001' AND Satisfactory_YN = 'Y'
SELECT Exams.Student_Answer_ID, Exam_Date FROM Student_Answers INNER JOIN Questions_in_Exams ON Student_Answers.Question_ID = Questions_in_Exams.Question_ID INNER JOIN Exams ON Questions_in_Exams.Exam_ID = Exams.Exam_ID WHERE Subject_Code!= 'Database' ORDER BY Exam_Date DESC;
SELECT Exams.Student_Answer_ID, Exam_Date, Exam_Name FROM Student_Answers INNER JOIN Questions_in_Exams ON Student_Answers.Student_Answer_ID = Questions_in_Exams.Question_ID INNER JOIN Exams ON Questions_in_Exams.Exam_ID = Exams.Exam_ID WHERE Subject_Code!= 'Database' ORDER BY Exam_Date ASC;
SELECT Exams.Student_Answer_ID, Student_Answers.Student_Answer_Text, Student_Answers.Satisfactory_YN, Student_Answers.Assessment FROM Student_Answers INNER JOIN Student_Assessments ON Student_Answers.Student_Answer_ID = Student_Assessments.Student_Answer_ID WHERE Student_Answers.Question_ID IN (SELECT Questions_in_Exams.Question_ID FROM Questions_in_Exams INNER JOIN Questions ON Questions_in_Exams.Question_ID = Questions.Question_ID WHERE Questions.Type_of_Question_Code = 'MC') AND Student_Answers.Exam_ID IN (SELECT Questions_in_Exams.Exam_ID FROM Questions_in_Exams INNER JOIN Questions ON Questions_in_Exams.Question_ID = Questions.Question_ID WHERE Questions.Type_of_Question_Code = 'MC') ORDER BY Student_Answers.Date_of_Answer DESC;
SELECT Exams.Student_Answer_ID, Student_Answers.Student_Answer_Text, Student_Answers.Satisfactory_YN, Student_Answers.Assessment FROM Student_Answers INNER JOIN Student_Assessments ON Student_Answers.Student_Answer_ID = Student_Assessments.Student_Answer_ID WHERE Student_Answers.Question_ID IN (SELECT Questions_in_Exams.Question_ID FROM Questions_in_Exams INNER JOIN Questions ON Questions_in_Exams.Question_ID = Questions.Question_ID WHERE Questions.Type_of_Question_Code = 'MCQ') AND Student_Answers.Exam_ID IN (SELECT Questions_in_Exams.Exam_ID FROM Questions_in_Exams INNER JOIN Questions ON Questions_in_Exams.Question_ID = Questions.Question_ID WHERE Questions.Type_of_Question_Code = 'MCQ') ORDER BY Student_Answers.Date_of_Answer DESC;
SELECT Questions_in_Exams.Student_Answer_ID, Questions.Type_of_Question_Code, COUNT(*) AS Count FROM Questions_in_Exams JOIN Questions ON Questions.Question_ID = Questions_in_Exams.Question_ID GROUP BY Type_of_Question_Code ORDER BY Count DESC;
SELECT Questions_in_Exams.Student_Answer_ID, Questions.Type_of_Question_Code, COUNT(Questions_in_Exams.Question_ID) AS Count
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text HAVING COUNT(*) > 1;
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' GROUP BY Student_Answer_Text HAVING COUNT(*) > 1;
SELECT Student_Answer_ID, COUNT(DISTINCT Comments) AS Comment_Count FROM Student_Answers GROUP BY Student_Answer_ID HAVING COUNT(DISTINCT Comments)>1 ORDER BY Comment_Count DESC;
SELECT Student_Answer_ID, COUNT(DISTINCT Comments) AS Comment_Count FROM Student_Answers GROUP BY Student_Answer_ID ORDER BY Comment_Count DESC;
SELECT Student_Answer_Text FROM Student_Answers WHERE Satisfactory_YN = 'Y' GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC;
SELECT Student_Answer_Text FROM Student_Answers WHERE Satisfactory_YN = 'Y' ORDER BY COUNT(*) DESC;
SELECT Students.Student_Answer_ID, Students.First_Name, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Students.Student_Answer_ID ASC;
SELECT Students.Student_Answer_ID, Students.First_Name, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Students.Student_Answer_ID ASC;
SELECT Students.Student_Answer_ID, Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC;
SELECT Students.Student_Answer_ID, Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Date_of_Answer DESC;
SELECT Assessment FROM Student_Assessments WHERE Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers GROUP BY Student_Answer_ID HAVING COUNT(*) = 1)
SELECT Assessment, COUNT(*) AS Frequency_Count FROM Student_Assessments GROUP BY Assessment ORDER BY Frequency_Count ASC LIMIT 1;
SELECT Students.Student_Answer_ID, Students.First_Name FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID WHERE Student_Answers.Student_Answer_ID IN (SELECT Student_Answers.Student_Answer_ID FROM Student_Answers GROUP BY Student_Answers.Student_Answer_ID HAVING COUNT(Student_Answers.Student_Answer_ID)>1);
SELECT Students.Student_Answer_ID, First_Name FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID WHERE Student_Answers.Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers GROUP BY Student_Answer_ID HAVING COUNT(Student_Answer_ID) >= 2);
SELECT Valid_Answer_ID, COUNT(*) AS Count FROM Student_Assessments GROUP BY Valid_Answer_ID ORDER BY Count DESC LIMIT 1;
SELECT Valid_Answer_ID, COUNT(*) AS Count FROM Student_Assessments GROUP BY Valid_Answer_ID ORDER BY Count DESC LIMIT 1;
SELECT Students.Student_Answer_ID, Students.Last_Name FROM Students WHERE Students.Gender_MFU!= 'M';
SELECT Students.Student_Answer_ID, Students.Last_Name FROM Students WHERE Students.Gender_MFU!= 'M' ORDER BY Students.Student_Answer_ID DESC;
SELECT Students.Student_Answer_ID, Students.First_Name, Students.Last_Name, Students.Gender_MFU, COUNT(*) AS Number_Of_Students
SELECT Students.Student_Answer_ID, Students.Gender_MFU, COUNT(*) AS Number_Of_Students
SELECT Students.Student_Answer_ID, Students.Last_Name FROM Students WHERE Students.Gender_MFU = 'F' OR Students.Gender_MFU = 'M';
SELECT Students.Student_Answer_ID, Students.Last_Name FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID WHERE Students.Gender_MFU IN ('F', 'M') ORDER BY Students.Last_Name ASC;
SELECT Students.Student_Answer_ID FROM Students WHERE Students.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers);
SELECT Students.Student_Answer_ID FROM Students WHERE Students.Student_ID NOT IN (SELECT Student_ID FROM Student_Answers);
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Comments = 'Absent'
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments IN ('Normal', 'Absent') GROUP BY Student_Answer_Text HAVING COUNT(*) > 1;
SELECT Questions_in_Exams.Student_Answer_ID, Questions.Type_of_Question_Code FROM Questions_in_Exams JOIN Questions ON Questions.Question_ID = Questions_in_Exams.Question_ID WHERE Questions_in_Exams.Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers GROUP BY Student_Answer_ID HAVING COUNT(*) >= 3);
SELECT Questions_in_Exams.Student_Answer_ID, Questions.Type_of_Question_Code FROM Questions_in_Exams JOIN Questions ON Questions.Question_ID = Questions_in_Exams.Question_ID WHERE Questions_in_Exams.Student_Answer_ID IN (SELECT Student_Answer_ID FROM Student_Answers GROUP BY Student_Answer_ID HAVING COUNT(*) >= 3);
SELECT Students.Student_Answer_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Students.Gender_MFU, Students.Student_Address, Students.Email_Adress, Students.Cell_Mobile_Phone, Students.Home_Phone FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Students.Student_ID ASC;
SELECT Students.Student_Answer_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Students.Gender_MFU, Students.Student_Address, Students.Email_Adress, Students.Cell_Mobile_Phone, Students.Home_Phone FROM Students INNER JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID
SELECT Addresses.order_id FROM Addresses WHERE Addresses.address_id = Customers.address_id;
SELECT Addresses.order_id FROM Addresses WHERE Addresses.address_id = Customers.address_id;
SELECT Addresses.order_id, Addresses.address_details FROM Customer_Orders INNER JOIN Addresses ON Customer_Orders.customer_id = Addresses.customer_id;
SELECT Addresses.order_id, Addresses.address_details FROM Customer_Orders INNER JOIN Addresses ON Customer_Orders.customer_id = Addresses.customer_id;
SELECT product_id FROM Products
SELECT product_id FROM Products
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_id FROM Products WHERE product_name = 'Monitor';
SELECT product_id FROM Products WHERE product_name = 'Monitor';
SELECT product_id, MIN(product_price), AVG(product_price), MAX(product_price) FROM Products GROUP BY product_id;
SELECT product_id, MIN(product_price), AVG(product_price), MAX(product_price) FROM Products GROUP BY product_id;
SELECT product_id, AVG(product_price) FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_id;
SELECT product_id, AVG(product_price) AS avg_price FROM Products WHERE product_type_code = 'Clothes' GROUP BY product_id;
SELECT product_id FROM Products WHERE product_type_code = 'hardware';
SELECT product_id FROM Products WHERE product_type_code = 'Hardware';
SELECT product_id, product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_id, product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware');
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware');
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price = (SELECT MIN(product_price) FROM Products WHERE product_type_code = 'Hardware');
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT product_id, product_name FROM Products ORDER BY product_price DESC;
SELECT product_id, product_name FROM Products ORDER BY product_price DESC;
SELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_id, product_type_code FROM Products;
SELECT product_id, COUNT(*) AS num_products FROM Products GROUP BY product_type_code;
SELECT product_id, AVG(product_price) FROM Products GROUP BY product_type_code;
SELECT product_id, AVG(product_price) AS avg_product_price FROM Products GROUP BY product_type_code;
SELECT product_id FROM Products WHERE product_type_code IN (SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_type_code) > 1);
SELECT product_id FROM Products WHERE product_type_code IN (SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_type_code) > 1);
SELECT product_id FROM Products WHERE product_type_code = 'P1' ORDER BY product_id ASC;
SELECT product_id, product_type_code FROM Products ORDER BY product_id ASC;
SELECT Customers.order_id FROM Customers WHERE order_id = '1' AND customer_id = '2';
SELECT Customers.order_id FROM Customers WHERE order_id = (SELECT COUNT(*) FROM Customer_Orders);
SELECT Customer_Orders.order_id, Customers.customer_id, Customers.customer_name FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id;
SELECT Customer_Orders.order_id, Customers.customer_name FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id;
SELECT Addresses.order_id, Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customers.customer_name = 'Jeromy' AND Customer_Orders.order_id = 1;
SELECT Addresses.order_id, Customer_Orders.customer_id, Customers.address_id, Customers.payment_method_code, Customers.customer_number, Customers.customer_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id INNER JOIN Addresses ON Customers.address_id = Addresses.address_id WHERE Customers.customer_name = 'Jeromy';
SELECT product_id, product_name FROM Products WHERE product_price IS NULL;
SELECT Customers.order_id, COUNT(*) AS num_customers FROM Customer_Orders GROUP BY order_id;
SELECT Customers.order_id, Customers.payment_method_code FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customers.payment_method_code ORDER BY COUNT(Customers.payment_method_code) DESC LIMIT 1;
SELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'P' ORDER BY product_price DESC LIMIT 1;
SELECT Customers.order_id, Customer_Orders.customer_id, Customer_Orders.order_date, Customer_Orders.order_status_code, Products.product_id, Order_items.order_quantity, Addresses.address_id, Addresses.address_details, Customers.payment_method_code, Customers.customer_number, Customers.customer_name, Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers INNER JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id INNER JOIN Order_items ON Customer_Orders.order_id = Order_items.order_id INNER JOIN Products ON Order_items.product_id = Products.product_id INNER JOIN Addresses ON Customers.address_id = Addresses.address_id WHERE (Customers.payment_method_code) IN (SELECT MIN(Customers.payment_method_code) FROM Customers GROUP BY Customers.payment_method_code);
SELECT Customers.order_id, Customers.customer_name FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Customer_Orders.order_status_code = 'Shipped' AND Customers.payment_method_code IN (SELECT DISTINCT payment_method_code FROM Customers GROUP BY payment_method_code HAVING COUNT(*) < 2) ORDER BY Customers.customer_name ASC;
SELECT product_id, product_name, order_quantity FROM Order_items WHERE order_id = 1;
SELECT product_id FROM Products WHERE product_name = 'Jeromy';
SELECT Customers.order_id, Customers.payment_method_code FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customers.payment_method_code HAVING COUNT(*) > 1;
SELECT Customers.order_id, Customers.payment_method_code FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id;
SELECT Products.product_id, Products.product_type_code FROM Products ORDER BY Products.product_name;
SELECT product_id, product_type_code FROM Products ORDER BY product_name ASC;
SELECT product_id FROM Products WHERE product_type_code = 'P1' AND product_name = 'Product 1';
SELECT product_id FROM Products WHERE product_type_code = 'A' UNION SELECT product_id FROM Products WHERE product_type_code = 'B' UNION SELECT product_id FROM Products WHERE product_type_code = 'C' UNION SELECT product_id FROM Products WHERE product_type_code = 'D' UNION SELECT product_id FROM Products WHERE product_type_code = 'E' UNION SELECT product_id FROM Products WHERE product_type_code = 'F' UNION SELECT product_id FROM Products WHERE product_type_code = 'G' UNION SELECT product_id FROM Products WHERE product_type_code = 'H' UNION SELECT product_id FROM Products WHERE product_type_code = 'I' UNION SELECT product_id FROM Products WHERE product_type_code = 'J' UNION SELECT product_id FROM Products WHERE product_type_code = 'K' UNION SELECT product_id FROM Products WHERE product_type_code = 'L' UNION SELECT product_id FROM Products WHERE product_type_code = 'M' UNION SELECT product_id FROM Products WHERE product_type_code = 'N' UNION SELECT product_id FROM
SELECT Customers.order_id FROM Customers WHERE Customers.customer_id = Customer_Orders.customer_id;
SELECT Customers.order_id FROM Customers WHERE Customers.customer_id = Customer_Orders.customer_id;
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy');
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy');
SELECT Customers.order_id, Customers.customer_id, COUNT(Customer_Orders.order_id) AS order_count FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customers.customer_id ORDER BY order_count DESC;
SELECT Customers.order_id, Customers.customer_name, COUNT(Order_Items.order_id) AS order_count FROM Customer_Orders INNER JOIN Order_Items ON Customer_Orders.order_id = Order_Items.order_id INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id GROUP BY Customers.customer_name ORDER BY order_count DESC;
SELECT Customers.order_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id ORDER BY COUNT(Customer_Orders.order_id) DESC LIMIT 1;
SELECT Customers.order_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customer_Orders INNER JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id ORDER BY COUNT(Customer_Orders.order_id) DESC LIMIT 1;
SELECT Order_Items.order_id, Customer_Orders.order_status_code, COUNT(Customer_Orders.order_status_code) AS 'Number of Orders'
SELECT order_id, COUNT(*) AS num_orders FROM Customer_Orders GROUP BY order_status_code;
SELECT Order_Items.order_id, Customer_Orders.order_status_code FROM Order_Items JOIN Customer_Orders ON Order_Items.order_id = Customer_Orders.order_id GROUP BY Order_Items.order_id ORDER BY COUNT(Order_Items.order_id) DESC LIMIT 1;
SELECT Order_Items.order_id, Customer_Orders.order_status_code FROM Order_Items JOIN Customer_Orders ON Order_Items.order_id = Customer_Orders.order_id GROUP BY Order_Items.order_id ORDER BY COUNT(Customer_Orders.order_status_code) DESC LIMIT 1;
SELECT Customers.order_id FROM Customers WHERE Customer_orders.customer_id IS NULL;
SELECT Customers.order_id FROM Customers WHERE Customer_Orders.order_id IS NULL;
SELECT product_id, product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_items);
SELECT product_id FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_items);
SELECT product_id FROM Products WHERE product_name = 'Monitor';
SELECT product_id FROM Products WHERE product_type_code = 'Monitor';
SELECT Customers.order_id FROM Customers WHERE Customers.customer_id = Order_items.order_id AND Order_items.product_id = Products.product_id AND Products.product_name = 'Monitor' GROUP BY Customers.customer_id HAVING COUNT(*) > 1;
SELECT Customers.order_id FROM Customers WHERE Customers.customer_id = Customer_Orders.customer_id AND Products.product_id = Order_items.product_id AND Products.product_name = 'Monitor' GROUP BY Customers.customer_id HAVING COUNT(*) > 1;
SELECT Customers.order_id FROM Customers WHERE Customer_orders.order_id = '1' AND Customer_orders.customer_id = '2';
SELECT Customers.order_id FROM Customers WHERE Customer_orders.order_id = '1' AND Customer_orders.customer_id = '2'
SELECT Customer_Orders.order_id FROM Customers WHERE Customer_Orders.customer_id = 1;
SELECT Customer_Orders.order_id FROM Customers WHERE Customers.customer_id = Customer_Orders.customer_id AND Customer_Orders.order_id IS NULL;
SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_items WHERE order_quantity > 6 OR order_quantity > 3);
SELECT order_id, order_date FROM Customer_Orders WHERE order_id IN (SELECT order_id FROM Order_items WHERE order_quantity > '6' OR order_quantity > '3') ORDER BY order_id ASC;
SELECT building.Name FROM building WHERE building.Number_of_Stories > 10;
SELECT building.Name FROM building WHERE building.Number_of_Stories > 10;
SELECT Name FROM building WHERE Number_of_Stories = (SELECT MIN(Number_of_Stories) FROM building);
SELECT Name FROM building WHERE Number_of_Stories IN (SELECT MIN(Number_of_Stories) FROM building GROUP BY Region_ID ORDER BY MIN(Number_of_Stories)) ORDER BY Number_of_Stories ASC;
SELECT building.Name, building.Address FROM building ORDER BY Completed_Year DESC;
SELECT building.Name FROM building WHERE building.Completed_Year = (SELECT MAX(building2.Completed_Year) FROM building AS building2);
SELECT Name FROM building WHERE Completed_Year!= 1980 ORDER BY Number_of_Stories DESC LIMIT 1;
SELECT Name FROM building WHERE Completed_Year!= 1980 ORDER BY Number_of_Stories DESC LIMIT 1;
SELECT Region_ID, AVG(Population) AS Average_Population FROM region GROUP BY Region_ID;
SELECT Region_ID, AVG(Population) AS Average_Population FROM region GROUP BY Region_ID;
SELECT Name FROM region WHERE Region_ID IN (SELECT Region_ID FROM building ORDER BY Building_ID ASC);
SELECT Name FROM region
SELECT region.Capital FROM building
SELECT region.Capital FROM building
SELECT Capital FROM region WHERE Region_ID IN (SELECT Region_ID FROM building GROUP BY Region_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT Capital FROM region WHERE Region_ID = (SELECT Region_ID FROM region ORDER BY Population DESC LIMIT 1);
SELECT Name FROM region WHERE Area IN (SELECT MAX(Area) FROM region GROUP BY Region_ID LIMIT 5);
SELECT Name FROM region WHERE Area IN (SELECT MAX(Area) FROM region GROUP BY Region_ID LIMIT 5);
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT Name FROM region WHERE Region_ID IN (SELECT DISTINCT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1);
SELECT Name FROM region WHERE Region_ID IN (SELECT DISTINCT Region_ID FROM building GROUP BY Region_ID HAVING COUNT(*) > 1);
SELECT region.Capital FROM building
SELECT region.Capital FROM building
SELECT building.Name, region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Name, building.Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo';
SELECT building.Name, building.Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name = 'Abruzzo';
SELECT building.Region_ID, building.Completed_Year, COUNT(*) AS num_buildings
SELECT building.Region_ID, building.Completed_Year, COUNT(*) AS num_buildings
SELECT building.Region_ID, building.Completed_Year, COUNT(*) AS num_buildings
SELECT building.Region_ID, region.Name, COUNT(*) AS num_buildings, MAX(Completed_Year) AS max_year
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building);
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT DISTINCT Region_ID FROM building);
SELECT building.Region_ID, building.Name, building.Address, building.Number_of_Stories, building.Completed_Year FROM building WHERE (building.Number_of_Stories > 20) OR (building.Number_of_Stories < 15);
SELECT building.Region_ID, region.Name, building.Completed_Year FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE (building.Number_of_Stories > 20) AND (building.Number_of_Stories < 15);
SELECT building.Name, building.Address FROM building GROUP BY building.Address HAVING COUNT(*) = 1;
SELECT building.Name, building.Address FROM building GROUP BY building.Address HAVING COUNT(*) = 1;
SELECT building.Region_ID, building.Name, building.Number_of_Stories, building.Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT building.Region_ID, building.Name, building.Completed_Year FROM building ORDER BY Number_of_Stories DESC;
SELECT Channels.Customers_and_Services_ID, Channel_Details FROM Channels INNER JOIN Customer_Interactions ON Channels.Channel_ID = Customer_Interactions.Channel_ID ORDER BY Channel_Details ASC;
SELECT Channels.Customers_and_Services_ID FROM Customers_and_Services WHERE Customers_and_Services.Customer_ID = 1 ORDER BY Channel_Details ASC;
SELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID = 1;
SELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID = 1;
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer WHERE Pattern_Recognition = 'Most Common' GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer WHERE Pattern_Recognition = 'Most Common' ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Services.Customers_and_Services_ID FROM Customers_and_Services WHERE Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Service_ID IN (SELECT Service_ID FROM Services);
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') ORDER BY Service_ID ASC;
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_ID IN (SELECT Customers_and_Services.Customers_and_Services_ID FROM Customers_and_Services GROUP BY Customers_and_Services.Customers_and_Services_ID HAVING COUNT(*) > 3);
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_ID IN (SELECT Customers_and_Services.Customers_and_Services_ID FROM Customers_and_Services GROUP BY Customers_and_Services.Customers_and_Services_ID HAVING COUNT(*) > 3);
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, COUNT(*) AS Count FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customer_Interaction.Customer_ID ORDER BY Count DESC LIMIT 1;
SELECT Customers_and_Services.Customers_and_Services_ID, Customers_and_Services.Customers_and_Services_Details, COUNT(*) AS Count_of_used_services FROM Customers_and_Services INNER JOIN Customer_Interactions ON Customers_and_Services.Customer_ID = Customer_Interactions.Customer_ID GROUP BY Customers_and_Services.Customer_ID ORDER BY Count_of_used_services DESC LIMIT 1;
SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(*) AS Count FROM Customer_Interactions JOIN Customers ON Customer_Interactions.Customer_ID = Customers.Customer_ID GROUP BY Customer_Interaction.Customer_ID ORDER BY Count DESC LIMIT 1;
SELECT Customer_Interactions.Customers_and_Services_ID, COUNT(*) AS Count FROM Customer_Interactions JOIN Customers ON Customer_Interactions.Customer_ID = Customers.Customer_ID GROUP BY Customer_Interaction.Customer_ID ORDER BY Count DESC LIMIT 1;
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_Details FROM Customer_Interaction INNER JOIN Customers_and_Services ON Customer_Interaction.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID WHERE Customer_Interaction.Status_Code!= 'Used' AND Customers_and_Services.Customer_ID = 1;
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, Customers.Customer_Details FROM Customers INNER JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID LEFT OUTER JOIN Customer_Interactions ON Customers_and_Services.Customers_and_Services_ID = Customer_Interactions.Services_and_Channels_Details WHERE Customer_Interactions.Status_Code IS NULL;
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, Customers.Customer_Details, Services.Service_Details FROM Customers_and_Services INNER JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID INNER JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID INNER JOIN Customer_Interactions ON Customers_and_Services.Customers_and_Services_ID = Customer_Interactions.Services_and_Channels_Details WHERE Customer_Interactions.Status_Code = 'Completed' ORDER BY COUNT(Customer_Interactions.Services_and_Channels_Details) ASC LIMIT 1;
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID WHERE Service_ID IN (SELECT Service_ID FROM Services GROUP BY Service_ID HAVING COUNT(*)=1);
SELECT Customers_and_Services.Customers_and_Services_ID, COUNT(DISTINCT Customers_and_Services.Customers_and_Services_Details), COUNT(DISTINCT Customers_and_Services.Service_ID) FROM Customers_and_Services GROUP BY Customers_and_Services.Customer_ID HAVING COUNT(*) > 1;
SELECT Services.Customers_and_Services_ID, COUNT(*) AS Total_Number_of_Available_Customers_and_Services_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID GROUP BY Customers_and_Services.Customers_and_Services_ID HAVING COUNT(*) > 1;
SELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interaction_ID IN (SELECT Customer_Interaction_ID FROM Customer_Interactions WHERE Channel_ID = 1 AND Status_Code = 'Completed' AND Service_ID IN (SELECT Service_ID FROM Services WHERE Service_Details LIKE '%Kutch%'));
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID WHERE Customer_Interactions.Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details LIKE '%Kutch%') AND Customer_Interactions.Status_Code='Success' ORDER BY Customer_Interaction.Customer_ID ASC;
SELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') OR Service_ID IN (SELECT Service_ID FROM Customer_Interactions WHERE Status_Code = 'Good'));
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details LIKE 'Hardy%') OR Status_Code = 'Good' ORDER BY Service_Details ASC;
SELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID = (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch') AND Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Pattern_Recognition LIKE '%bad%'));
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details LIKE 'Hardy%') AND Customers_and_Services.Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Analytical_Layer WHERE Pattern_Recognition LIKE '%bad%' AND Analytical_Layer_Type_Code='Rating');
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details LIKE '%15%ij%') AND Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Customer_Interactions WHERE Status_Code='Active' AND Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details LIKE '%15%ij%')) ORDER BY Service_Details ASC;
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij') AND Customers_and_Services_ID IN (SELECT Customers_and_Services_ID FROM Customer_Interactions INNER JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Status_Code = 'Completed' AND Integration_Platform_ID IN (SELECT Integration_Platform_ID FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Google%')) ORDER BY Service_ID ASC;
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, Customer_Interactions.Services_and_Channels_Details, Customer_Interactions.Status_Code FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customer_ID = Customers_and_Services.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details LIKE '%bad%';
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, Customers.Customer_Details FROM Customer_Interactions INNER JOIN Customers_and_Services ON Customer_Interactions.Customer_ID = Customers_and_Services.Customer_ID WHERE Customer_Interactions.Status_Code = 'Stuck' AND Customer_Interactions.Services_and_Channels_Details LIKE '%bad%';
SELECT Integration_Platform.Customers_and_Services_ID FROM Integration_Platform WHERE Integration_Platform.Status_Code = 'Successful' GROUP BY Integration_Platform.Customeer_ID HAVING COUNT(*) > 1;
SELECT Integration_Platform.Analytical_Layer_Type_Code FROM Integration_Platform WHERE Integration_Platform.Integration_Platform_Details LIKE '%Success%';
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_ID, Customers_and_Services.Service_ID, Customers_and_Services.Customers_and_Services_Details, Customers.Customer_Details, Services.Service_Details, Integration_Platform.Integration_Platform_Details FROM Customers_and_Services INNER JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID INNER JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID INNER JOIN Customer_Interaction ON Customers_and_Services.Customers_and_Services_ID = Customer_Interaction.Services_and_Channels_Details INNER JOIN Integration_Platform ON Customer_Interaction.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform_Integration_Platform_Details LIKE '%failed%' ORDER BY Customers_and_Services_Customers_and_Services_ID ASC;
SELECT Customer_Interactions.Customers_and_Services_ID, Customers_and_Services.Customer_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customers_and_Services_ID = Customers_and_Services.Customers_and_Services_ID WHERE Integration_Platform.Integration_Platform_Details = 'Fail' AND Customer_Interactions.Status_Code = 'Success';
SELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID IN ( SELECT Service_ID FROM Customers_and_Services GROUP BY Service_ID HAVING COUNT(*) = 0 )
SELECT Services.Customers_and_Services_ID FROM Services WHERE Service_ID IN (SELECT Service_ID FROM Customers_and_Services WHERE Customer_ID IS NULL);
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Usage_Count DESC;
SELECT Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY Count DESC;
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%unsatisfied%';
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services INNER JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details LIKE '%unsatisfied%';
SELECT vehicles_id FROM Renting_history
SELECT id FROM Vehicles
SELECT Vehicles.id, Vehicles.name FROM Vehicles ORDER BY Model_year DESC;
SELECT Vehicles.id, Vehicles.name FROM Vehicles ORDER BY Model_year DESC;
SELECT vehicles_id, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain;
SELECT vehicles_id, Type_of_powertrain FROM Vehicles GROUP BY vehicles_id HAVING COUNT(*) > 1 ORDER BY vehicles_id ASC;
SELECT Vehicles.id, Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE (Vehicles.Model_year = 2013 OR Vehicles.Model_year = 2014);
SELECT Vehicles.id, Vehicles.name, Vehicles.Type_of_powertrain, Vehicles.Annual_fuel_cost FROM Vehicles WHERE Vehicles.Model_year = 2013 OR Vehicles.Model_year = 2014;
SELECT Vehicles.id, Vehicles.name, Type_of_powertrain FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Model_year IN (2014, 2013) GROUP BY Type_of_powertrain HAVING COUNT(*) > 1
SELECT total_hours FROM Renting_history WHERE customer_id = 1 AND discount_id = 2 AND vehicles_id = 5;
SELECT Vehicles.id, Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Vehicles.id, Type_of_powertrain, COUNT(*) AS num_vehicles
SELECT vehicles_id FROM Vehicles WHERE Type_of_powertrain = 'Gasoline' ORDER BY id DESC LIMIT 1;
SELECT vehicles_id FROM Renting_history WHERE customer_id = 1 GROUP BY vehicles_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Vehicles.id, MIN(Vehicles.Annual_fuel_cost), MAX(Vehicles.Annual_fuel_cost), AVG(Vehicles.Annual_fuel_cost) FROM Vehicles GROUP BY Vehicles.id;
SELECT vehicles_id, MIN(annual_fuel_cost) AS min_annual_fuel_cost, MAX(annual_fuel_cost) AS max_annual_fuel_cost, AVG(annual_fuel_cost) AS avg_annual_fuel_cost FROM Renting_history GROUP BY vehicles_id;
SELECT Vehicles.id, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate;
SELECT Vehicles.id, Vehicles.Model_year FROM Vehicles WHERE Vehicles.City_fuel_economy_rate <= Vehicles.Highway_fuel_economy_rate;
SELECT Vehicles.id, Type_of_powertrain, AVG(Annual_fuel_cost) AS Average_Annual_Fuel_Cost FROM Vehicles JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2 ORDER BY Average_Annual_Fuel_Cost DESC;
SELECT total_hours, Type_of_powertrain, AVG(Annual_fuel_cost) FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Type_of_powertrain HAVING COUNT(*) >= 2 ORDER BY Type_of_powertrain ASC;
SELECT Customers.id, Customers.name, Customers.age, Discount.membership_credit FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id JOIN Discount ON Renting_history.discount_id = Discount.id
SELECT Customers.id, name, age, membership_credit FROM Customers;
SELECT Customers.id, Customers.name, Customers.age FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id WHERE Renting_history.discount_id IN (SELECT Discount.id FROM Discount WHERE Discount.membership_credit > 0) GROUP BY Customers.id ORDER BY MAX(Customers.membership_credit);
SELECT Customers.id, Customers.name, Customers.age FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id WHERE Renting_history.discount_id IS NULL ORDER BY Customers.membership_credit DESC LIMIT 1;
SELECT Customers.id, Customers.name, Customers.age, Discount.membership_credit FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id JOIN Discount ON Renting_history.discount_id = Discount.id WHERE Discount.membership_credit > (SELECT AVG(Discount.membership_credit) FROM Discount);
SELECT Customers.id, AVG(Customers.age) AS avg_age FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.id HAVING AVG(Customers.membership_credit) > (SELECT AVG(Customers.membership_credit) FROM Customers);
SELECT Discount.id, Discount.name, Discount.membership_credit FROM Discount;
SELECT discount_id, name, membership_credit FROM Discount;
SELECT Vehicles.id, Vehicles.name, SUM(Renting_history.total_hours) AS Total_Hours FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.id ORDER BY Total_Hours DESC;
SELECT Vehicles.id, Vehicles.name, SUM(Renting_history.total_hours) AS Total_rental_hours FROM Renting_history JOIN Customers ON Renting_history.customer_id = Customers.id JOIN Discount ON Renting_history.discount_id = Discount.id JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.id ORDER BY Vehicles.id ASC;
SELECT Vehicles.id, Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL;
SELECT Vehicles.id, Vehicles.name FROM Vehicles LEFT JOIN Renting_history ON Vehicles.id = Renting_history.vehicles_id WHERE Renting_history.vehicles_id IS NULL;
SELECT Customers.id, Customers.name FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.id HAVING COUNT(*) >= 2;
SELECT Customers.id, Customers.name FROM Customers JOIN Renting_history ON Customers.id = Renting_history.customer_id GROUP BY Customers.id HAVING COUNT(*) >= 2;
SELECT Vehicles.id, Vehicles.Model_year FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Vehicles.id, Vehicles.Model_year FROM Renting_history INNER JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id GROUP BY Vehicles.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Vehicles.id, Vehicles.name FROM Renting_history INNER JOIN Customers ON Renting_history.customer_id = Customers.id INNER JOIN Discount ON Renting_history.discount_id = Discount.id INNER JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id ORDER BY total_hours DESC;
SELECT Vehicles.id, Vehicles.name FROM Renting_history INNER JOIN Customers ON Renting_history.customer_id = Customers.id INNER JOIN Discount ON Renting_history.discount_id = Discount.id INNER JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id WHERE Customers.age > 30 AND Discount.membership_credit >= 1000 ORDER BY total_hours DESC;
SELECT Discount.id, Discount.name FROM Renting_history JOIN Customers ON Renting_history.customer_id = Customers.id JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id JOIN Discount ON Renting_history.discount_id = Discount.id GROUP BY Discount.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Discount.id, Discount.name FROM Renting_history JOIN Discount ON Renting_history.discount_id = Discount.id GROUP BY Discount.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Vehicles.id, Vehicles.name, Vehicles.Type_of_powertrain FROM Renting_history JOIN Customers ON Renting_history.customer_id = Customers.id JOIN Discount ON Renting_history.discount_id = Discount.id JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id WHERE Renting_history.total_hours > 30 AND Discount.membership_credit >= 1000
SELECT Vehicles.id, Vehicles.name, Vehicles.Type_of_powertrain FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id WHERE Renting_history.total_hours > 30;
SELECT vehicles_id, AVG(City_fuel_economy_rate) AS avg_city_fuel_rate, AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_rate FROM Vehicles GROUP BY Type_of_powertrain;
SELECT vehicles_id, AVG(City_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(Highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM Vehicles GROUP BY Type_of_powertrain;
SELECT Students.student_id, AVG(Student_Loans.amount_of_loan) AS avg_amount_of_student_loan
SELECT Student_Loans.student_id, AVG(Student_Loans.amount_of_loan) AS avg_amount_of_student_loans FROM Student_Loans GROUP BY Student_Loans.student_id;
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2) OR student_id IN (SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2);
SELECT Students.student_id, Students.bio_data FROM Students WHERE Students.student_id IN (SELECT DISTINCT Students.student_id FROM Students INNER JOIN Classes ON Students.student_id = Classes.student_id GROUP BY Students.student_id HAVING COUNT(*) >= 2) OR Students.student_id IN (SELECT DISTINCT Students.student_id FROM Students INNER JOIN Detention ON Students.student_id = Detention.student_id GROUP BY Students.student_id HAVING COUNT(*) < 2);
SELECT Teachers.achievement_details FROM Teachers WHERE Teachers.class_details LIKE '%data%' AND Teachers.class_details NOT LIKE 'net%';
SELECT Teachers.achievement_details FROM Teachers WHERE Teachers.teacher_id IN (SELECT Classes.teacher_id FROM Classes WHERE Classes.class_details LIKE '%data%' AND Classes.class_details NOT LIKE 'net%') ORDER BY TeacherDetails ASC;
SELECT Students.student_id, Students.bio_data FROM Students LEFT JOIN Detention ON Students.student_id = Detention.student_id WHERE Detention.student_id IS NULL OR Detention.detention_id IS NULL LEFT JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.student_id IS NULL OR Student_Loans.student_loan_id IS NULL;
SELECT Students.student_id, Students.bio_data FROM Students LEFT JOIN Detention ON Students.student_id = Detention.student_id WHERE Detention.student_id IS NULL AND Students.student_id IN (SELECT Student_Loans.student_id FROM Student_Loans WHERE Student_Loans.student_id IS NULL);
SELECT student_id, amount_of_loan, date_of_loan FROM Student_Loans JOIN Students ON Student_Loans.student_id = Students.student_id WHERE Students.student_id IN (SELECT student_id FROM Achievements GROUP BY student_id HAVING COUNT(*) >= 2);
SELECT student_id, SUM(amount_of_loan), MAX(date_of_loan) FROM Student_Loans GROUP BY student_id HAVING COUNT(*) >= 2;
SELECT Teachers.achievement_type_code, Teacher.id FROM Teacher INNER JOIN Courses ON Teacher.id = Courses.teacher_id GROUP BY Teacher.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Teachers.achievement_type_code, Teacher.id FROM Teacher INNER JOIN Courses ON Teacher.id = Courses.teacher_id GROUP BY Teacher.id ORDER BY COUNT(Courses.id) DESC LIMIT 1;
SELECT achievement_details FROM Achievements WHERE achievement_type_code = 'A1' AND date_achievement > '2019-01-01';
SELECT achievement_details FROM Achievements WHERE achievement_type_code = 'A1' AND date_achievement > '2019-01-01';
SELECT student_id, bio_data, student_details, address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id INNER JOIN Ref_Address_Types ON Addresses.address_type_code = Ref_Address_Types.address_type_code;
SELECT Students.student_id, Students.bio_data, Students.student_details, Ref_Address_Types.address_type_description FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code;
SELECT student_id, bio_data, address_details FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id;
SELECT student_id, bio_data, address_details FROM Students INNER JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id INNER JOIN Addresses ON Students_Addresses.address_id = Addresses.address_id;
SELECT Students.student_id, Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id;
SELECT Students.student_id, Students.bio_data, Transcripts.date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id;
SELECT student_id, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY student_id ORDER BY count DESC LIMIT 1;
SELECT Behaviour_Monitoring.achievement_details, COUNT(*) AS Count FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.achievement_details ORDER BY Count DESC LIMIT 1;
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)) AND student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 2));
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1));
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1));
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Behaviour_Monitoring GROUP BY student_id));
SELECT student_id, bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id;
SELECT Students.student_id, Students.bio_data, Student_Events.event_date FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id;
SELECT Students.student_id, COUNT(*) AS num_students, Ref_Event_Types.event_type_description FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id INNER JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY Students.student_id ORDER BY num_students DESC LIMIT 1;
SELECT Students.student_id, COUNT(*) AS num_students, Ref_Event_Types.event_type_code, Ref_Event_Types.event_type_description FROM Students INNER JOIN Student_Events ON Students.student_id = Student_Events.student_id INNER JOIN Ref_Event_Types ON Student_Events.event_type_code = Ref_Event_Types.event_type_code GROUP BY Students.student_id ORDER BY num_students DESC LIMIT 1;
SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code;
SELECT achievement_details, achievement_type_description FROM Achievements INNER JOIN Ref_Achievement_Type ON Achievements.achievement_type_code = Ref_Achievement_Type.achievement_type_code;
SELECT Teachers.achievement_type_code FROM Teachers WHERE EXISTS(SELECT * FROM Achievements WHERE Achievements.student_id = Teachers.student_id AND Achievements.achievement_type_code IS NULL);
SELECT Teachers.achievement_type_code FROM Teachers WHERE Teachers.teacher_id IN (SELECT Classes.teacher_id FROM Classes INNER JOIN Students ON Classes.student_id = Students.student_id WHERE Students.student_id NOT IN (SELECT Achievements.student_id FROM Achievements));
SELECT date_achievement, achievement_details FROM Achievements;
SELECT date_achievement, achievement_details FROM Achievements;
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;
SELECT date_achievement FROM Detention
SELECT Students.student_id, 
SELECT student_id, bio_data FROM Students WHERE student_details LIKE '%Suite%';
SELECT student_id, bio_data FROM Students WHERE bio_data LIKE '%Suite%';
SELECT Teachers.achievement_type_code, Students.student_id FROM Teachers INNER JOIN Classes ON Teachers.teacher_id = Classes.teacher_id INNER JOIN Students ON Classes.student_id = Students.student_id
SELECT Teachers.achievement_type_code, Students.achievement_type_code FROM Teachers INNER JOIN Students ON Teachers.student_id = Students.student_id WHERE Teachers.class_id = Students.class_id;
SELECT Teachers.achievement_type_code, COUNT(*) AS num_courses FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id GROUP BY Teacher.achievement_type_code ORDER BY num_courses DESC LIMIT 1;
SELECT Teachers.achievement_id, COUNT(*) AS num_courses FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id GROUP BY achieve_id ORDER BY num_courses DESC LIMIT 1;
SELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1;
SELECT student_id, COUNT(*) AS num_courses FROM Classes GROUP BY student_id ORDER BY num_courses DESC LIMIT 1;
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2);
SELECT student_id, class_details FROM Classes WHERE student_id IN (SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) = 2);
SELECT date_achievement, achievement_details FROM Achievements WHERE student_id = 1 ORDER BY date_achievement DESC;
SELECT date_achievement, achievement_type_code, achievement_type_description FROM Achievements WHERE student_id = 1 ORDER BY date_achievement ASC;
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans GROUP BY student_id HAVING SUM(amount_of_loan) > (SELECT AVG(amount_of_loan) FROM Student_Loans));
SELECT Students.student_id, Students.bio_data, Students.student_details FROM Students INNER JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE Student_Loans.amount_of_loan > (SELECT AVG(Student_Loans.amount_of_loan) FROM Student_Loans);
SELECT student_id, MIN(date_of_loan) AS min_date FROM Student_Loans GROUP BY student_id;
SELECT student_id, MIN(date_of_loan) AS min_date FROM Student_Loans GROUP BY student_id;
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1);
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan ASC LIMIT 1);
SELECT date_achievement FROM Achievements WHERE achievement_type_code = 'MAX_LOAN' AND student_id IN (SELECT student_id FROM Student_Loans ORDER BY amount_of_loan DESC LIMIT 1);
SELECT date_achievement FROM Achievements WHERE achievement_type_code = 'A1' ORDER BY date_achievement DESC LIMIT 1;
SELECT Teachers.achievement_type_code FROM Teachers WHERE Teachers.teacher_id = (SELECT Students.student_id FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id ORDER BY Transcripts.date_of_transcript ASC LIMIT 1);
SELECT Teachers.achievement_details FROM Teachers WHERE Teachers.teacher_id IN (SELECT Classes.teacher_id FROM Classes WHERE Classes.student_id = (SELECT Transcripts.student_id FROM Transcripts ORDER BY Transcripts.date_of_transcript ASC LIMIT 1));
SELECT student_id, SUM(amount_of_loan) AS TotalLoan FROM Student_Loans GROUP BY student_id;
SELECT student_id, SUM(amount_of_loan) AS TotalLoan FROM Student_Loans GROUP BY student_id;
SELECT student_id, bio_data, COUNT(*) AS course_count FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id;
SELECT student_id, bio_data, COUNT(class_id) AS num_courses FROM Students JOIN Classes ON Students.student_id = Classes.student_id GROUP BY student_id;
SELECT student_id FROM Detention
SELECT student_id FROM Detention
SELECT Ref_Address_Types.achievement_type_code, Ref_Address_Types.address_type_description 
SELECT Ref_Address_Types.achievement_type_code, Ref_Address_Types.address_type_description FROM Students_Addresses INNER JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code GROUP BY Ref_Address_Types.address_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events WHERE event_id NOT IN (SELECT student_id FROM Student_Loans)) ORDER BY student_id ASC;
SELECT student_id, bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Events WHERE student_id NOT IN (SELECT student_id FROM Student_Loans));
SELECT student_id, address_id, date_from AS'start_time', date_to AS 'end_time'
SELECT student_id, address_id, date_from, date_to FROM Students_Addresses WHERE student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(*) = 2);
SELECT date_achievement FROM Detention WHERE datetime_detention_start = '2022-01-01 00:00:00'
SELECT date_achievement FROM Detention
SELECT Author.IdOrder FROM Author WHERE Author.Name = 'John Doe'
SELECT Author.IdOrder FROM Author WHERE Author.Name = 'John Doe'
SELECT Client.IdOrder, Client.Name, Client.Address FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient
SELECT Client.IdOrder, Client.Name, Client.Address FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient
SELECT Book.ISBN, Title, SalePrice FROM Book WHERE SalePrice IS NOT NULL;
SELECT Book.ISBN, Title, SalePrice FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'J.K. Rowling' AND SalePrice IS NOT NULL ORDER BY SalePrice DESC;
SELECT ISBN FROM Book
SELECT ISBN FROM Book WHERE SalePrice = 0;
SELECT Author.IdOrder FROM Author WHERE Author.Name = 'John Doe'
SELECT Author.IdOrder FROM Author WHERE Author.Name = 'John Doe' AND Author.IdOrder IN (SELECT Orders.IdOrder FROM Orders WHERE Orders.DateOrder BETWEEN '2019-01-01' AND '2020-12-31') ORDER BY Author.IdOrder ASC;
SELECT IdOrder FROM Orders WHERE DateExped IS NULL;
SELECT IdOrder FROM Orders WHERE IdClient = 'C0001' AND DateOrder < '2019-01-01';
SELECT Client.IdOrder, Client.Name, Client.Address FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient ORDER BY Client.Name ASC;
SELECT Client.IdOrder, Client.Name, Client.Address FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient ORDER BY Client.Name ASC;
SELECT Book.ISBN, Title, Author.Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Book.ISBN = '978-84-376-0487-8' AND Author.idAuthor = 1;
SELECT Book.ISBN, Title, Name FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author;
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient;
SELECT Orders.IdOrder, Client.Name FROM Orders INNER JOIN Client ON Orders.IdClient = Client.IdClient;
SELECT Author.IdOrder, Author.Name, COUNT(*) AS numBooks FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.IdOrder ORDER BY numBooks DESC;
SELECT Author.IdOrder, Author.Name, COUNT(*) AS numBooks FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.Author GROUP BY Author.IdOrder, Author.Name ORDER BY Author.IdOrder ASC;
SELECT ISBN, COUNT(*) FROM Books_Order GROUP BY ISBN;
SELECT ISBN, COUNT(*) AS num_orders FROM Books_Order GROUP BY ISBN;
SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN;
SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN;
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY ISBN ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Book.ISBN, Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder WHERE amount = (SELECT MAX(amount) FROM Books_Order);
SELECT Book.ISBN, Title, PurchasePrice FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.amount = (SELECT MAX(amount) FROM Books_Order);
SELECT Book.ISBN, Title, PurchasePrice FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.amount = (SELECT MAX(amount) FROM Books_Order);
SELECT Book.ISBN, Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder
SELECT Book.ISBN, Book.Title FROM Book INNER JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.IdOrder IN (SELECT IdOrder FROM Orders WHERE DateExped < '2019-01-01')
SELECT Client.IdOrder, Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdOrder IS NOT NULL;
SELECT Client.IdOrder FROM Client WHERE EXISTS(SELECT * FROM Orders WHERE Client.IdOrder = Orders.IdOrder);
SELECT Client.IdOrder, COUNT(*) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdOrder;
SELECT Client.IdOrder, COUNT(*) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient;
SELECT Client.IdOrder FROM Client WHERE Client.Name = 'John Doe' AND Client.Address = '123 Main St.' AND Client.NumCC = '1234567890123456'
SELECT Client.IdOrder FROM Client WHERE Client.IdOrder = (SELECT MAX(Client.IdOrder) FROM Client);
SELECT Client.IdOrder, Client.Name, SUM(Book.amount) AS TotalAmounts
SELECT Client.IdOrder, Client.Name, SUM(Book.SalePrice * Books_Order.amount) AS TotalAmount
SELECT Client.IdOrder, Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.DateExped IS NULL ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Client.IdOrder, SUM(Book.amount) FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient INNER JOIN Books_Order ON Orders.IdOrder = Books_Order.IdOrder GROUP BY Client.IdClient ORDER BY SUM(Book.amount) DESC LIMIT 1;
SELECT Book.ISBN, Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order);
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author_Book.ISBN NOT IN (SELECT ISBN FROM Books_Order);
SELECT Client.IdOrder, Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdOrder IS NULL;
SELECT Client.IdOrder FROM Client WHERE Client.IdOrder IS NULL;
SELECT ISBN, MAX(SalePrice), MIN(SalePrice)
SELECT ISBN, MAX(SalePrice), MIN(SalePrice)
SELECT Author.IdOrder, AVG(Book.PurchasePrice), AVG(Book.SalePrice)
SELECT Author.IdOrder, AVG(Book.PurchasePrice), AVG(Book.SalePrice)
SELECT ISBN, Title, Author, PurchasePrice, SalePrice FROM Book WHERE SalePrice-PurchasePrice = (SELECT MAX(SalePrice-PurchasePrice) FROM Book);
SELECT ISBN, Title, Author, PurchasePrice, SalePrice, 
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book);
SELECT Book.ISBN, Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN WHERE SalePrice IN (SELECT MIN(SalePrice) FROM Book);
SELECT Book.ISBN, Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author WHERE SalePrice IN (SELECT MIN(SalePrice) FROM Book);
SELECT Book.ISBN, Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN WHERE PurchasePrice IN (SELECT MAX(PurchasePrice) FROM Book);
SELECT Book.ISBN, Title FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN WHERE PurchasePrice IN (SELECT MAX(PurchasePrice) FROM Book);
SELECT Author.IdOrder, AVG(Book.SalePrice) FROM Author JOIN Author_Book ON Author.IdAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Author.Name = 'George Orwell' GROUP BY Author.IdOrder;
SELECT Author.IdOrder, AVG(Book.SalePrice) FROM Author JOIN Author_Book ON Author.IdAuthor = Author_Book.Author JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Author.Name = 'George Orwell' GROUP BY Author.IdOrder;
SELECT Book.ISBN, Book.Title, Book.SalePrice FROM Book INNER JOIN Author_Book ON Book.ISBN = Author_Book.ISBN INNER JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'Plato';
SELECT Books_Order.ISBN, SalePrice FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato' AND SalePrice IS NOT NULL;
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'George Orwell' AND SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'George Orwell' AND SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'Plato' AND SalePrice < (SELECT AVG(SalePrice) FROM Book);
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name = 'Plato' AND SalePrice < (SELECT AVG(SalePrice) FROM Book);
SELECT Author.IdOrder, Author.Name FROM Author INNER JOIN Author_Book ON Author.idAuthor = Author_Book.Author INNER JOIN Book ON Author_Book.ISBN = Book.ISBN WHERE Book.Title = 'Pride and Prejudice' AND Author.Name IS NOT NULL;
SELECT Author.IdOrder FROM Author_Book WHERE Author.ISBN = '978-1-101-16396-5' AND Author.Name = 'Jane Austen'
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name LIKE '%Plato%';
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author.idAuthor = Author_Book.Author WHERE Author.Name LIKE '%Plato%';
SELECT IdOrder FROM Orders WHERE ISBN = '978-1-101-16396-5' AND amount > 0;
SELECT IdOrder FROM Orders WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Jane Austen') AND IdOrder IN (SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice'))
SELECT IdOrder FROM Orders WHERE IdOrder IN (
SELECT IdOrder FROM Orders WHERE ISBN IN (
SELECT ISBN FROM Book WHERE EXISTS(SELECT * FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name='Peter Doe') AND EXISTS(SELECT * FROM Books_Order JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name='James Smith');
SELECT ISBN FROM Book WHERE Title IN (
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.IdOrder = Orders.IdOrder WHERE Orders.IdClient = 'PETER DOE' AND Orders.IdClient!= 'JAMES SMITH';
SELECT Book.ISBN, Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Orders ON Author_Book.Author = Orders.IdClient WHERE Orders.IdClient = 'Peter Doe' AND Orders.IdClient!= 'James Smith';
SELECT Client.IdOrder, Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')
SELECT Client.IdOrder, Client.Name FROM Client INNER JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice')
SELECT Book_ID FROM book
SELECT book.Book_ID, book.Title FROM book ORDER BY Title ASC;
SELECT book.Book_ID, book.Title FROM book ORDER BY Pages DESC;
SELECT book.Book_ID, book.Title, book.Release FROM book WHERE book.Type = 'Fiction' AND book.Pages > 500 ORDER BY book.Chapters DESC;
SELECT Book_ID, MAX(Chapters), MIN(Chapters) FROM book GROUP BY Book_ID;
SELECT book.Book_ID, book.Title FROM book WHERE book.Type!= 'Poet'
SELECT Rating FROM review
SELECT book.Book_ID, book.Title, review.Rating FROM book INNER JOIN review ON book.Book_ID = review.Book_ID;
SELECT Rating FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Chapters DESC LIMIT 1);
SELECT Rank FROM review WHERE Book_ID = (SELECT Book_ID FROM book ORDER BY Pages ASC LIMIT 1);
SELECT book.Book_ID, book.Title FROM book JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rank = (SELECT MAX(review.Rank) FROM review);
SELECT Rating, AVG(Readers_in_Million) AS Average_Readers FROM review WHERE Type = 'Novel' GROUP BY Rating;
SELECT book.Book_ID, book.Title, book.Type, COUNT(*) AS num_books FROM book GROUP BY book.Type ORDER BY book.Type ASC;
SELECT book.Book_ID, COUNT(*) AS count FROM review JOIN book ON review.Book_ID = book.Book_ID GROUP BY book.Book_ID ORDER BY count DESC LIMIT 1;
SELECT book.Book_ID, book.Title, book.Type FROM book INNER JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rating > 3.5 AND review.Chapters < 10 GROUP BY book.Book_ID HAVING COUNT(*) >= 3 ORDER BY book.Book_ID ASC;
SELECT book.Book_ID, book.Title FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC;
SELECT book.Book_ID, book.Title, review.Rating, review.Readers_in_Million, review.Rank, book.Audio FROM book INNER JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC;
SELECT Book_ID FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review);
SELECT book.Book_ID, book.Title, book.Type FROM book WHERE book.Chapters > 75 OR book.Chapters < 50;
SELECT book.Book_ID, COUNT(DISTINCT book.Type) AS num_types FROM book GROUP BY book.Book_ID HAVING COUNT(DISTINCT book.Type) > 1;
SELECT book.Book_ID, book.Title FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rating IS NULL;
SELECT Customer_ID FROM customer
SELECT Customer_ID FROM customer
SELECT customer.Customer_ID, Name FROM customer ORDER BY Level_of_Membership ASC;
SELECT customer.Customer_ID, Name FROM customer ORDER BY Level_of_Membership ASC;
SELECT customer.Customer_ID, customer.Name, customer.Nationality, customer.Card_Credit FROM customer WHERE customer.Level_of_Membership = 1;
SELECT customer.Customer_ID, customer.Name, customer.Nationality, customer.Card_Credit FROM customer ORDER BY customer.Customer_ID;
SELECT customer.Customer_ID, Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia';
SELECT customer.Customer_ID, Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia';
SELECT Customer_ID, AVG(Card_Credit) AS Average_Card_Credit FROM customer WHERE Level_of_Membership > 1 GROUP BY Customer_ID;
SELECT Customer_ID, AVG(Card_Credit) AS Average_Card_Credit FROM customer WHERE Level_of_Membership > 1 GROUP BY Customer_ID;
SELECT Customer_ID, Name, Nationality, Card_Credit, Level_of_Membership FROM customer ORDER BY Level_of_Membership DESC LIMIT 1;
SELECT customer.Customer_ID, customer.Name, customer.Card_Credit, branch.Location_of_office FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID INNER JOIN branch ON customer.Order_ID = branch.Branch_ID WHERE customer.Level_of_Membership = (SELECT MAX(customer.Level_of_Membership) FROM customer);
SELECT customer.Customer_ID, customer.Name, customer.Nationality, COUNT(customer.Nationality) AS num_customers FROM customer GROUP BY customer.Nationality ORDER BY num_customers DESC;
SELECT customer.Customer_ID, customer.Nationality, COUNT(customer.Customer_ID) AS num_customers FROM customer GROUP BY customer.Nationality;
SELECT customer.Customer_ID, customer.Name, customer.Nationality, COUNT(customer.Nationality) AS Count FROM customer GROUP BY customer.Nationality ORDER BY Count DESC LIMIT 1;
SELECT customer.Customer_ID, customer.Name, customer.Nationality FROM customer ORDER BY COUNT(customer.Nationality) DESC LIMIT 1;
SELECT customer.Customer_ID, customer.Name, customer.Nationality, customer.Card_Credit, customer.Level_of_Membership FROM customer WHERE customer.Card_Credit < 50 AND customer.Card_Credit > 75;
SELECT customer.Customer_ID, customer.Name, customer.Nationality FROM customer WHERE customer.Card_Credit > 50 AND customer.Card_Credit < 75;
SELECT customer.Customer_ID, branch.Branch_ID, customer_order.Dish_Name FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID INNER JOIN branch ON customer.Order_ID = branch.Branch_ID;
SELECT customer.Customer_ID, branch.Branch_ID, customer_order.Dish_Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID JOIN branch ON customer_order.Branch_ID = branch.Branch_ID;
SELECT customer.Customer_ID, branch.Branch_ID, customer_order.Dish_Name, customer_order.Quantity FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID INNER JOIN branch ON customer.Order_ID = branch.Branch_ID ORDER BY customer_order.Quantity DESC;
SELECT customer.Customer_ID, branch.Branch_ID, customer_order.Dish_Name, customer_order.Quantity FROM customer INNER JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID INNER JOIN branch ON customer_order.Branch_ID = branch.Branch_ID ORDER BY customer_order.Quantity DESC;
SELECT customer.Customer_ID, Name, SUM(Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY Customer_ID;
SELECT customer.Customer_ID, Name, SUM(Quantity) AS Total_Quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY Customer_ID;
SELECT customer.Customer_ID, Name, Nationality, Card_Credit, Level_of_Membership FROM customer WHERE (SELECT SUM(Quantity) FROM customer_order WHERE Customer_ID = customer.Customer_ID) > 1;
SELECT customer.Customer_ID, Name FROM customer ORDER BY Customer_ID ASC;
SELECT branch.Branch_ID, branch.Manager FROM customer_order JOIN branch ON customer_order.Branch_ID = branch.Branch_ID GROUP BY branch.Branch_ID HAVING COUNT(DISTINCT branch.Manager) > 1;
SELECT branch.Branch_ID, branch.Manager FROM customer_order JOIN branch ON customer_order.Branch_ID = branch.Branch_ID GROUP BY branch.Branch_ID HAVING COUNT(branch.Branch_ID) > 1;
SELECT customer.Customer_ID, Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Dish_Name IS NULL;
SELECT customer.Customer_ID, Name FROM customer LEFT JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL;
SELECT Member_ID FROM member
SELECT member.Member_ID, member.Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club.Overall_Ranking > 100 ORDER BY member.Age ASC;
SELECT member.Member_ID, member.Name, member.Nationality FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID
SELECT member.Member_ID, member.Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID WHERE member.Nationality!= 'England' ORDER BY member.Member_ID ASC;
SELECT member.Member_ID, member.Name FROM member WHERE member.Age = 19 OR member.Age = 20;
SELECT member.Member_ID, Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE Year_Join = (SELECT MIN(Year_Join) FROM club_leader);
SELECT member.Member_ID, member.Name, member.Nationality, COUNT(member.Member_ID) AS num_members FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID GROUP BY member.Nationality ORDER BY num_members DESC;
SELECT member.Member_ID, member.Name, member.Nationality, club.Club_ID, club.Overall_Ranking, club.Team_Leader, club.Club_Name, club_leader.Year_Join FROM member INNER JOIN club ON member.Member_ID = club.Team_Leader INNER JOIN club_leader ON club.Club_ID = club_leader.Club_ID WHERE (club_leader.Year_Join = '2019') GROUP BY member.Member_ID HAVING COUNT(member.Member_ID) > 1 ORDER BY member.Member_ID ASC;
SELECT member.Member_ID, member.Name, member.Nationality FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID GROUP BY member.Nationality HAVING COUNT(member.Nationality) >= 2;
SELECT member.Member_ID, member.Name, club.Club_ID, club.Club_Name FROM club JOIN club_leader ON club.Club_ID = club_leader.Club_ID JOIN member ON club_leader.Member_ID = member.Member_ID
SELECT member.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club.club_id = club_leader.Club_ID AND club.Overall_Ranking > 100;
SELECT member.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club_leader.Year_Join < '2018' AND club_leader.Club_ID IN (SELECT Club_ID FROM club WHERE Team_Leader IS NOT NULL) ORDER BY member.Member_ID ASC;
SELECT club_leader.Member_ID, member.Name FROM club_leader JOIN member ON club_leader.Member_ID = member.Member_ID WHERE club_leader.Club_ID IN (SELECT Club_ID FROM club WHERE Club_Name = 'Houston') AND club_leader.Year_Join = '2019' ORDER BY club_leader.Member_ID ASC;
SELECT member.Member_ID, member.Name FROM member LEFT JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.Member_ID IS NULL;
SELECT member.Member_ID, member.Name, member.Nationality, club.Club_ID, club.Overall_Ranking, club.Team_Leader, club.Club_Name FROM member INNER JOIN club ON member.Member_ID = club.Club_ID WHERE (member.Age > 22) AND (member.Age < 19);
SELECT member.Member_ID, member.Name, member.Nationality, member.Age, club.Club_ID, club.Overall_Ranking, club.Team_Leader, club.Club_Name, club_leader.Year_Join FROM member INNER JOIN club ON member.Member_ID = club.Team_Leader INNER JOIN club_leader ON club.Club_ID = club_leader.Club_ID WHERE club_leader.Member_ID = 1 ORDER BY member.Member_ID ASC;
SELECT Club_ID FROM club WHERE Club_Name LIKE '%state%';
SELECT Collection_Subset_Members.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Document_Subset_ID;
SELECT Collection_Subset_Members.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Document_Subset_ID;
SELECT Collection_Subset_Members.Collection_Subset_ID, Collection_Subset_Members.Collection_Subset_Name, Collection_Subset_Members.Collection_Subset_Details FROM Collection_Subset_Members JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collection_Subset_Members.Collection_Subset_Name = 'Top collection';
SELECT Collection_ID, Collection_Name, Collection_Description FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_ID IN (SELECT Collection_ID FROM
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Members.Document_Object_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Documents_in_Collections.Collection_ID IN (SELECT Collections.Collection_ID FROM Collections JOIN Collection_Subset_Members ON Collections.Collection_ID = Collection_Subset_Members.Collection_ID WHERE Collection_Subset_Members.Collection_Subset_ID IN (SELECT Collection_Subsets.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Subset 1')))
SELECT Document_Subset_Members.Related_Collection_ID, Collection_Subset_Members.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, Collection_Subsets.Collection_Subset_Details FROM Document_Subset_Members JOIN Collection_Subset_Members ON Document_Subset_Members.Document_Object_ID = Collection_Subset_Members.Collection_ID JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Document_Subset_Members.Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Collection_Subset_Members.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Best for 2000')
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Details FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Members.Owner = 'Best for 2000';
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 1;
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Marlin' AND Parent_Document_Object_ID IS NULL;
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin') GROUP BY Document_Subset_Members.Related_Document_Object_ID HAVING COUNT(*) > 0
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID = Document_Object_ID AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Braeden Collection')))
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Object_ID = 1 AND Owner = 'Marlin';
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin') GROUP BY Document_Subset_Members.Related_Document_Object_ID HAVING COUNT(*) > 0
SELECT Document_Objects.Related_Collection_ID, Document_Object_Description.Description FROM Document_Object_Description JOIN Document_Object ON Document_Object_Description.Document_Object_ID = Document_Object.Document_Object_ID WHERE Document_Object.Parent_Document_Object_ID IS NOT NULL;
SELECT Document_Objects.Related_Collection_ID, Document_Object_Description.Description FROM Document_Object_Description JOIN Document_Object ON Document_Object_Description.Document_Object_ID = Document_Object.Document_Object_ID WHERE Document_Object.Parent_Document_Object_ID IS NOT NULL;
SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Object_ID) AS Count
SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Objects.Document_Object_ID) AS Count_of_documents_owned_by_Marlin
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1;
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 1 AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 2)
SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Subset_Members.Related_Document_Object_ID) AS Child_Count FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Object_ID;
SELECT Document_Objects.Related_Collection_ID, COUNT(*) AS Child_Count FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Object_ID HAVING COUNT(*) > 1;
SELECT Collection_ID, Collection_Name FROM Collections;
SELECT Collection_ID FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Collection_Subset_Members.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, Collection_Subsets.Collection_Subset_Details, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name, Document_Subsets.Document_Subset_Details FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID JOIN Document_Subset_Members ON Collection_Subset_Members.Collection_Subset_ID = Document_Subset_Members.Collection_Subset_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Best' AND Document_Subsets.Document_Subset_Name = 'Best' ORDER BY Collection_Subsets.Collection_Subset_Name ASC, Document_Subsets.Document_Subset_Name ASC;
SELECT Collection_ID, Collection_Description FROM Collections WHERE Collection_Name = 'Best';
SELECT Collection_Subset_Members.Collection_ID, Collections.Parent_Collection_ID, Collections.Collection_Name FROM Collection_Subset_Members JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collection_Subset_Members.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Nice') AND Collection_Subset_Members.Related_Collection_ID IS NULL;
SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Nice'
SELECT Collection_ID FROM Collections WHERE Parent_Collection_ID IS NULL;
SELECT Collection_ID FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 2)
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 2)
SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom') GROUP BY Document_Subset_Members.Related_Document_Object_ID HAVING COUNT(*) > 0
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Number_of_Collections FROM Collection_Subsets LEFT JOIN Collection_Subset_Members ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID GROUP BY Collection_Subset_ID ORDER BY Collection_Subset_ID ASC;
SELECT Collection_Subset_ID, Collection_Subset_Name, COUNT(Collection_ID) AS Number_of_Collections FROM Collection_Subset_Members GROUP BY Collection_Subset_ID, Collection_Subset_Name;
SELECT Document_Objects.Related_Collection_ID, COUNT(*) AS Child_Count FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Object_ID ORDER BY Child_Count DESC LIMIT 1;
SELECT Document_Objects.Related_Collection_ID, COUNT(Collection_Subset_Members.Collection_Subset_ID) AS Count FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Collection_Subset_Members ON Collection_Subset_Members.Related_Collection_ID = Document_Objects.Parent_Document_Object_ID GROUP BY Document_Object_ID;
SELECT Document_Objects.Related_Collection_ID, COUNT(Collection_Subset_Members.Collection_Subset_ID) AS Number_of_Related_Documents FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subset_Members ON Document_Subset_Members.Related_Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subset_Members ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID JOIN Document_Subset_Members ON Document_Subset_Members.Related_Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subset_Members ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID JOIN Document_Subset_Members ON Document_Subset_Members.Related_Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subset_Members ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Sub
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 1 AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 2)
SELECT Document_Objects.Related_Collection_ID, COUNT(Collection_Subset_Members.Collection_Subset_ID) AS Number_of_Related_Documents FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID JOIN Collection_Subset_Members ON Document_Subset_Members.Related_Document_Object_ID = Collection_Subset_Members.Collection_ID JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID GROUP BY Document_Subset_Members.Document_Object_ID HAVING COUNT(Collection_Subset_Members.Collection_Subset_ID) BETWEEN 2 AND 4;
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 1 AND Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 1 GROUP BY Document_Object_ID HAVING COUNT(*) BETWEEN 2 AND 4)
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Braeden') GROUP BY Document_Subset_Members.Related_Document_Object_ID HAVING COUNT(*) > 0
SELECT Document_Objects.Related_Collection_ID, Document_Object_Owners.Owner
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Members.Owner = 'Braeden' AND Document_Subset_Members.Document_Object_ID = 1 GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID HAVING COUNT(*)=1;
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subset_Members.Owner = 'Braeden' GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name HAVING COUNT(*) > 1
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, COUNT(DISTINCT Document_Objects.Owner) AS num_docs FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID ORDER BY Document_Subset_Members.Related_Collection_ID ASC, Document_Subset_Members.Document_Subset_ID ASC;
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subset_Members.Document_Subset_Name, COUNT(DISTINCT Document_Objects.Owner) AS Number_of_Different_Documents FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subset_Members.Document_Subset_Name ORDER BY Document_Subset_Members.Related_Collection_ID ASC, Document_Subset_Members.Document_Subset_ID ASC;
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, COUNT(DISTINCT Document_Objects.Owner) AS num_docs FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID ORDER BY num_docs DESC LIMIT 1;
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS num_docs FROM Document_Subset_Members GROUP BY Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID ORDER BY num_docs DESC LIMIT 1;
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subsets.Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Document_Subset_Members.Related_Document_Object_ID = Document_Object_ID
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subsets.Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Document_Subset_Members.Related_Document_Object_ID = Document_Object_ID;
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Object_ID = 1;
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subset_Members.Document_Subset_ID, Document_Subset_Members.Document_Object_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID WHERE Document_Subset_Members.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID = 1);
SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom')
SELECT Collection_ID FROM Documents_in_Collections WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom') AND Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Parent_Collection_ID IS NULL)
SELECT Document_Objects.Collection_ID, COUNT(Collection_ID) AS Count FROM Documents_in_Collections JOIN Document_Objects ON Documents_in_Collections.Document_Object_ID = Document_Objects.Document_Object_ID GROUP BY Document_Object_ID;
SELECT Document_Objects.Related_Collection_ID, COUNT(Collection_Subset_Members.Collection_ID) AS Count FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Document_Object_ID = Document_Objects.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID JOIN Collection_Subset_Members ON Document_Subsets.Document_Subset_ID = Collection_Subset_Members.Collection_Subset_ID JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID GROUP BY Document_Subset_Members.Document_Object_ID HAVING COUNT(Collection_Subset_Members.Collection_ID) > 1;
SELECT Document_Objects.Collection_ID, COUNT(DISTINCT Document_Object_ID) AS Count
SELECT Document_Objects.Collection_ID
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'));
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Collection_ID = 1;
SELECT Collection_ID, Collection_Name, COUNT(DISTINCT Document_Object_ID) AS NumDocs FROM Documents_in_Collections GROUP BY Collection_ID ORDER BY NumDocs DESC LIMIT 1;
SELECT Collection_ID, Collection_Name, COUNT(DISTINCT Document_Object_ID) AS num_docs FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best' GROUP BY Collection_ID HAVING COUNT(DISTINCT Document_Object_ID) > ALL ( SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collection_Name = 'Best' ) ORDER BY num_docs DESC LIMIT 1;
SELECT Document_Objects.Collection_ID FROM Document_Subset_Members
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'John Doe') UNION SELECT Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'John Doe' AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000')) UNION SELECT Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Jane Doe' AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')) AND Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best') AND Related_Document_Object_ID = (SELECT Document_Object_ID FROM Document_Objects WHERE Owner = '2000'));
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 1 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Best') EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = 2 AND Document_Subset_Members.Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Best')
SELECT Document_Objects.Collection_ID FROM Document_Subset_Members
SELECT Document_Objects.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000') UNION SELECT Document_Object_ID FROM Documents_in_Collections WHERE Documents_in_Collections.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collections.Collection_Name = 'Best')
SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_Subset_Members.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Best in' AND Collection_Subset_Members.Collection_ID IN (SELECT Collections.Collection_ID FROM Collections WHERE Collections.Collection_Name = 'Best in') GROUP BY Collection_Subset_Members.Collection_Subset_ID HAVING COUNT(Collection_Subset_Members.Collection_ID) > 1
SELECT Collection_Subset_Members.Collection_Subset_ID FROM Collections
SELECT songs_id FROM performance_score WHERE participant_id = 1;
SELECT songs.songs_id FROM performance_score WHERE participant_id = 1 ORDER BY songs.name ASC;
SELECT songs.songs_id, songs.name, songs.language FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE participant_id = 1;
SELECT voice_sound_quality FROM performance_score WHERE participant_id = (SELECT id FROM participants ORDER BY popularity DESC LIMIT 1) UNION SELECT voice_sound_quality FROM performance_score WHERE participant_id = (SELECT id FROM participants ORDER BY popularity ASC LIMIT 1);
SELECT performance_score.voice_sound_quality, performance_score.rhythm_tempo, performance_score.stage_presence FROM participants INNER JOIN performance_score ON participants.id = performance_score.participant_id WHERE name='Freeway';
SELECT songs_id, language, original_artist FROM performance_score WHERE participant_id = 1 AND songs_id IN (SELECT id FROM songs WHERE name!= 'Love');
SELECT songs.songs_id, songs.name, songs.original_artist FROM performance_score INNER JOIN participants ON performance_score.participant_id = participants.id INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.english_translation = 'All the streets of love';
SELECT stage_presence FROM performance_score WHERE songs_id IN (SELECT id FROM songs WHERE language = 'English') GROUP BY stage_presence HAVING COUNT(*) > 1;
SELECT participants.participant_id, participants.name FROM performance_score INNER JOIN participants ON participants.id = performance_score.participant_id GROUP BY participant_id HAVING COUNT(participant_id) >= 2;
SELECT participants.participant_id, participants.name, participants.popularity FROM performance_score INNER JOIN participants ON performance_score.participant_id = participants.id GROUP BY participant_id ORDER BY COUNT(participant_id) DESC;
SELECT participants.participant_id, participants.name FROM performance_score INNER JOIN participants ON performance_score.participant_id = participants.id WHERE voice_sound_quality = 5 OR rhythm_tempo = 5;
SELECT performance_score.voice_sound_quality FROM songs WHERE songs.name = 'The Balkan Girls' AND songs.english_translation IS NOT NULL AND songs.language = 'English' INNER JOIN performance_score ON performance_score.songs_id = songs.id;
SELECT songs_id, name FROM performance_score GROUP BY songs_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT performance_score.songs_id FROM performance_score WHERE (performance_score.stage_presence < 7 OR performance_score.stage_presence > 9) GROUP BY performance_score.songs_id HAVING COUNT(*) = 1;
SELECT songs_id FROM performance_score WHERE participant_id IS NULL;
SELECT songs_id, AVG(rhythm_tempo) AS avg_rhythm FROM performance_score GROUP BY songs_id HAVING COUNT(*) > 1 ORDER BY avg_rhythm DESC;
SELECT participants.participant_id, participants.name FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English';
SELECT participants.participant_id, participants.name, participants.popularity FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language IN ('Croatian', 'English') GROUP BY participant_id HAVING COUNT(*) > 1 ORDER BY participant_id ASC;
SELECT songs_id FROM performance_score WHERE participant_id = 1 AND voice_sound_quality > 0.5;
SELECT songs.songs_id, songs.original_artist FROM performance_score INNER JOIN songs ON performance_score.songs_id = songs.id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC;
SELECT country FROM City
SELECT country FROM City
SELECT state FROM City WHERE state NOT IN (SELECT DISTINCT state FROM City);
SELECT state FROM City
SELECT country FROM City
SELECT country FROM City
SELECT city_name, city_code, state, country FROM City;
SELECT city_name, city_code, state, country FROM City;
SELECT latitude,longitude FROM City WHERE city_name = 'Baltimore';
SELECT latitude,longitude FROM City WHERE city_name = 'Baltimore';
SELECT city_name FROM City WHERE state = 'PA';
SELECT city_name FROM City WHERE state = 'PA';
SELECT country FROM City WHERE country = 'Canada';
SELECT country FROM City WHERE country = 'Canada';
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC;
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude ASC;
SELECT state, COUNT(*) AS num_cities FROM City GROUP BY state ORDER BY state ASC;
SELECT country,state,count(*) as num_cities FROM City GROUP BY state ORDER BY num_cities DESC;
SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY num_cities DESC;
SELECT country, COUNT(*) AS num_cities FROM City GROUP BY country ORDER BY country ASC;
SELECT state FROM City WHERE city_code IN (SELECT DISTINCT city1_code FROM Direct_distance UNION SELECT DISTINCT city2_code FROM Direct_distance) GROUP BY state HAVING COUNT(*)>1;
SELECT state FROM City WHERE city_code IN (SELECT DISTINCT city1_code FROM Direct_distance UNION SELECT DISTINCT city2_code FROM Direct_distance);
SELECT state FROM City WHERE city_code IN (SELECT city_code FROM City GROUP BY city_code HAVING COUNT(*)>1);
SELECT state FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance UNION SELECT city2_code FROM Direct_distance) GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = 'NYC') AND city_code NOT IN (SELECT city1_code FROM Direct_distance WHERE city2_code = 'NYC')
SELECT country FROM City WHERE city_code IN (SELECT city_code FROM City GROUP BY city_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM City GROUP BY city_code));
SELECT Student.latitude,Student.longitude FROM Student WHERE Student.city_code = 'MD';
SELECT Student.state,Student.city_code,City.city_name FROM Student INNER JOIN City ON Student.city_code=City.city_code WHERE Student.state='MD' AND Student.city_code=City.city_code;
SELECT country FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE city_code = 'CHN')
SELECT country FROM City WHERE city_name = 'China'
SELECT Student.state,Sudent.major FROM Student WHERE Student.city_code = 'BAL' ORDER BY Student.Fname ASC;
SELECT Student.state,Student.Fname,Student.Major FROM Student,City WHERE Student.city_code=City.city_code AND City.state='MD' ORDER BY Student.sta_id ASC;
SELECT country, COUNT(*) AS num_students FROM (SELECT DISTINCT city.country as country FROM Student JOIN City ON Student.city_code = City.city_code ) GROUP BY country ORDER BY num_students DESC;
SELECT country, COUNT(*) AS num_students FROM Student GROUP BY country ORDER BY num_students DESC;
SELECT city_name, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city_name ORDER BY num_students DESC;
SELECT city_name, COUNT(*) AS num_students FROM Student JOIN City ON Student.city_code = City.city_code GROUP BY city_name ORDER BY num_students DESC;
SELECT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*)>1);
SELECT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM Student GROUP BY StuID));
SELECT country FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY city_code));
SELECT country FROM City WHERE city_code IN (SELECT city_code FROM Student GROUP BY city_code HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Student GROUP BY city_code));
SELECT city_name FROM City WHERE city_code IN (SELECT DISTINCT city_code FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) >= 3))
SELECT city_name FROM City WHERE city_code IN (SELECT DISTINCT city_code FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) >= 3))
SELECT state FROM Student WHERE state IN (SELECT state FROM Student GROUP BY state HAVING COUNT(*) > 5);
SELECT state FROM Student WHERE StuID IN (SELECT StuID FROM Student GROUP BY StuID HAVING COUNT(*) > 5);
SELECT Student.state FROM Student WHERE Student.state!= 'USA'
SELECT Student.state FROM Student WHERE Student.state!= 'USA'
SELECT Student.state FROM Student WHERE sex = 'F' AND state = 'PA';
SELECT Student.state FROM Student WHERE sex = 'F' AND state = 'PA'
SELECT Student.state FROM Student WHERE sex = 'M' AND state!= 'USA'
SELECT Student.state FROM Student WHERE sex = 'M' AND state!= 'USA'
SELECT Direct_distance.city_code, Direct_distance.distance FROM Direct_distance WHERE Direct_distance.city1_code = 'BAL' AND Direct_distance.city2_code = 'CHI';
SELECT Direct_distance.city_code, Direct_distance.distance FROM Direct_distance WHERE Direct_distance.city1_code = 'BAL' AND Direct_distance.city2_code = 'CHI';
SELECT Direct_distance.city_code FROM City WHERE City.city_name = 'Boston' AND City.state = 'MA';
SELECT Direct_distance.city_code FROM City WHERE City.city_name = 'Boston' AND City.state = 'MA';
SELECT city_name, AVG(distance), MIN(distance), MAX(distance)
SELECT city_name, AVG(distance), MIN(distance), MAX(distance)
SELECT city_code FROM City WHERE (city_code,city_code) IN (SELECT city1_code,city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1);
SELECT city_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance);
SELECT city_code FROM City WHERE (city_code, city_code) IN (SELECT city1_code, city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance))
SELECT city_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT city_code FROM Direct_distance WHERE distance < 1000;
SELECT city_code FROM Direct_distance WHERE distance < 1000;
SELECT city_name, SUM(distance) AS Total_Distance FROM Direct_distance JOIN City ON Direct_distance.city1_code = City.city_code WHERE city_name='BAL' GROUP BY city_name;
SELECT city_name, SUM(distance) AS total_distance FROM Direct_distance WHERE city1_code = 'BAL' OR city2_code = 'BAL' GROUP BY city_name;
SELECT city_name, AVG(distance) AS avg_dist FROM Direct_distance JOIN City ON Direct_distance.city1_code = City.city_code WHERE city_name='Boston' GROUP BY city_name;
SELECT city_name, AVG(distance) AS avg_dist FROM City NATURAL JOIN Direct_distance WHERE city_code = 'BOS' GROUP BY city_name;
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' AND distance = (SELECT MIN(distance) FROM Direct_distance WHERE city1_code = 'CHI'));
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' ORDER BY distance LIMIT 1);
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' AND distance = (SELECT MAX(distance) FROM Direct_distance WHERE city1_code = 'BOS'));
SELECT city_name FROM City WHERE city_code IN (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS') ORDER BY distance DESC LIMIT 1;
SELECT city_code, SUM(distance) AS Total_Distance FROM Direct_distance GROUP BY city_code;
SELECT city_code, SUM(distance) FROM Direct_distance GROUP BY city_code;
SELECT city_name, AVG(distance) AS avg_dist FROM City NATURAL JOIN Direct_distance GROUP BY city_name;
SELECT city_name, AVG(distance) FROM City NATURAL JOIN Direct_distance GROUP BY city_name;
SELECT city_name FROM City WHERE latitude = (SELECT latitude FROM City WHERE city_name = 'Linda' AND last_name = 'Smith') AND longitude = (SELECT longitude FROM City WHERE city_name = 'Tracy' AND last_name = 'Kim')
SELECT Direct_distance.city_code, Direct_distance.distance FROM Student INNER JOIN Direct_distance ON Student.city_code = Direct_distance.city1_code WHERE Student.LName = 'Smith' AND Student.Fname = 'Linda' UNION SELECT Direct_distance.city_code, Direct_distance.distance FROM Student INNER JOIN Direct_distance ON Student.city_code = Direct_distance.city2_code WHERE Student.LName = 'Kim' AND Student.Fname = 'Tracy';
SELECT Student.latitude,Student.longitude,City.city_name FROM Student INNER JOIN City ON Student.city_code=City.city_code WHERE Student.Fname='Linda' AND Student.LName='Smith';
SELECT Student.state,Student.city_name,Student.LName,Student.Fname FROM Student INNER JOIN Direct_distance ON Student.city_code=Direct_distance.city1_code WHERE Student.LName='Smith' AND Student.Fname='Linda' ORDER BY Direct_distance.distance DESC LIMIT 1;
SELECT state FROM Student WHERE Fname = 'Linda';
SELECT state FROM City WHERE city_code IN (SELECT city_code FROM Student WHERE Fname = 'Linda') 
SELECT sid, name, rating, age FROM Sailors WHERE age > 30;
SELECT sid, name FROM Sailors WHERE age > 30;
SELECT sid, name, age FROM Sailors WHERE age < 30;
SELECT sid, name, age FROM Sailors WHERE age < 30;
SELECT bid FROM Reserves WHERE sid = 1;
SELECT bid FROM Reserves WHERE sid = 1;
SELECT Reserves.sid FROM Reserves WHERE Reserves.bid = 102;
SELECT sid FROM Sailors WHERE rating = 8;
SELECT bid FROM Reserves
SELECT bid FROM Reserves
SELECT sid, name FROM Sailors WHERE name LIKE '%e%';
SELECT sid FROM Sailors WHERE name LIKE '%e%';
SELECT sid FROM Sailors WHERE age > ALL(SELECT age FROM Sailors);
SELECT sid FROM Sailors WHERE age = (SELECT MIN(age) FROM Sailors);
SELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.age > ALL(SELECT Sailors2.age FROM Sailors as Sailors2 WHERE Sailors2.rating > 7);
SELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.age > (SELECT Sailors2.age FROM Sailors as Sailors2 WHERE Sailors2.rating > 7)
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves);
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) > 1);
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) > 1);
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(*) >= 2);
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));
SELECT sid FROM Sailors WHERE rating > 7 AND age < 50;
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red') AND sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue')))
SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color ='red' OR color = 'blue'));
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT sid, name FROM Sailors WHERE NOT EXISTS(SELECT * FROM Reserves r WHERE r.sid = s.sid);
SELECT sid, name FROM Sailors WHERE NOT EXISTS (SELECT * FROM Reserves r WHERE r.sid = s.sid);
SELECT sid FROM Sailors WHERE NOT EXISTS(SELECT * FROM Reserves WHERE Reserves.sid = Sailors.sid);
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves);
SELECT sid, name FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid = 103);
SELECT sid FROM Reserves WHERE bid = 103;
SELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.rating > (SELECT Sailors.rating FROM Sailors WHERE Sailors.name = 'Luis');
SELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.rating > ALL(SELECT Sailors2.rating FROM Sailors as Sailors2 WHERE Sailors2.name = 'Luis');
SELECT sid, name FROM Sailors AS s WHERE s.rating > ALL(SELECT r.rating FROM Sailors as r WHERE r.name = 'Luis');
SELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.rating > (SELECT Sailors.rating FROM Sailors WHERE Sailors.name = 'Luis') ORDER BY Sailors.sid ASC;
SELECT sid, name FROM Sailors WHERE rating > 2 AND EXISTS(SELECT * FROM Reserves r WHERE r.sid = s.sid);
SELECT sid, name FROM Sailors WHERE rating >= 3 AND EXISTS(SELECT * FROM Reserves r WHERE r.sid = s.sid);
SELECT sid, name, age FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors);
SELECT sid, name, age FROM Sailors WHERE rating = (SELECT MAX(rating) FROM Sailors);
SELECT sid FROM Sailors
SELECT sid FROM Sailors
SELECT sid, AVG(age) FROM Sailors WHERE rating = 7 GROUP BY sid;
SELECT sid, AVG(age) FROM Sailors WHERE rating = 7 GROUP BY sid;
SELECT sid FROM Sailors WHERE name LIKE 'D%';
SELECT sid FROM Sailors WHERE name LIKE 'D%';
SELECT sid, AVG(rating), MAX(age)
SELECT sid, AVG(rating), MAX(age) FROM Sailors GROUP BY sid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid ORDER BY num_reservations DESC;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid ORDER BY bid ASC;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE bid > 50 GROUP BY bid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves GROUP BY bid HAVING COUNT(*) > 1;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE sid > 1 GROUP BY bid;
SELECT bid, COUNT(*) AS num_reservations FROM Reserves WHERE sid > 1 GROUP BY bid ORDER BY num_reservations DESC;
SELECT sid, rating, avg(age) FROM Sailors as s JOIN Reserves as r ON s.sid = r.sid WHERE r.bid IN (SELECT bid from Boats where color='red') GROUP BY rating ORDER BY rating ASC;
SELECT sid, rating, avg(age) FROM Sailors as s JOIN Reserves as r ON s.sid = r.sid WHERE r.bid IN (SELECT bid from Boats where color='red') GROUP BY rating ORDER BY rating ASC;
SELECT sid, name, rating, age FROM Sailors ORDER BY rating DESC, age ASC;
SELECT sid, name, rating, age FROM Sailors ORDER BY rating DESC, age ASC;
SELECT Boats.bid FROM Boats
SELECT Boats.bid FROM Boats
SELECT Boats.bid FROM Boats WHERE Boats.color ='red';
SELECT Boats.bid FROM Boats WHERE Boats.color ='red';
SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age BETWEEN 20 AND 30);
SELECT bid FROM Reserves WHERE sid IN (SELECT sid FROM Sailors WHERE age >= 20 AND age <= 30);
SELECT Sailors.sid, Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color ='red') AND Sailors.rating > ALL(SELECT Sailors2.rating FROM Sailors AS Sailors2 JOIN Reserves ON Sailors2.sid = Reserves.sid WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.color ='red'));
SELECT Sailors.sid, Sailors.name FROM Sailors WHERE Sailors.rating > ALL(SELECT rating FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ='red');
SELECT sid, MAX(rating) FROM Sailors GROUP BY sid;
SELECT sid, MAX(rating) FROM Sailors GROUP BY sid;
SELECT Sailors.sid, Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.name = 'Melon') ORDER BY Sailors.sid ASC;
SELECT Sailors.sid, Sailors.name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid IN (SELECT Boats.bid FROM Boats WHERE Boats.name = 'Melon') ORDER BY Sailors.sid ASC;
SELECT sid, name, age FROM Sailors ORDER BY rating DESC;
SELECT Sailors.sid, Sailors.name, Sailors.age FROM Sailors ORDER BY Sailors.rating DESC;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone WHERE headphone.Price = (SELECT MAX(headphone.Price) FROM headphone);
SELECT headphone.Headphone_ID, headphone.Model, headphone.Price FROM headphone WHERE headphone.Price = (SELECT MAX(headphone.Price) FROM headphone);
SELECT Headphone_ID, Model FROM headphone GROUP BY Model ORDER BY Model ASC;
SELECT Headphone_ID, Model FROM headphone ORDER BY Model ASC;
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class FROM headphone WHERE headphone.Class = (SELECT MAX(headphone.Class) FROM headphone);
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class, COUNT(*) AS num_headphones FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY num_headphones DESC LIMIT 1;
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class FROM headphone WHERE headphone.Class IN (SELECT headphone.Class FROM headphone GROUP BY headphone.Class HAVING COUNT(headphone.Class) > 2);
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class FROM headphone WHERE headphone.Class NOT IN (SELECT headphone.Class FROM headphone GROUP BY headphone.Class HAVING COUNT(headphone.Class) > 2);
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Price FROM headphone WHERE headphone.Price > 200;
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Price FROM headphone WHERE headphone.Price > 200;
SELECT Headphone_ID, Model, Earpads FROM headphone GROUP BY Headphone_ID HAVING COUNT(DISTINCT Earpads) = 1;
SELECT headphone.Headphone_ID, COUNT(DISTINCT headphone.Earpads) AS num_earpads FROM headphone GROUP BY headphone.Headphone_ID HAVING num_earpads > 1 ORDER BY headphone.Headphone_ID ASC;
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Driver_matched_db, headphone.Construction, headphone.Earpads, headphone.Price, store.Name, store.Neighborhood, store.Parking, store.Date_opened, stock.Quantity FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID INNER JOIN store ON stock.Store_ID = store.Store_ID ORDER BY headphone.Earpads DESC LIMIT 2;
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Driver_matched_db, headphone.Construction, headphone.Earpads, headphone.Price, store.Name, store.Neighborhood, store.Parking, store.Date_opened, stock.Quantity FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID INNER JOIN store ON stock.Store_ID = store.Store_ID ORDER BY headphone.Earpads DESC LIMIT 2;
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Construction FROM headphone WHERE headphone.Price = (SELECT MIN(headphone.Price) FROM headphone);
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Construction FROM headphone WHERE headphone.Price = (SELECT MIN(headphone.Price) FROM headphone);
SELECT headphone.Headphone_ID, headphone.Construction, AVG(headphone.Price) AS Average_Price FROM headphone GROUP BY headphone.Headphone_ID, headphone.Construction;
SELECT Headphone_ID, Model, Class, Driver_matched_dB, Construction, Earpads, Price, AVG(Price) AS Average_Price FROM headphone GROUP BY Headphone_ID;
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Driver_matched_db, headphone.Construction, headphone.Earpads, headphone.Price FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE headphone.Earpads LIKE '%Bowls%' AND headphone.Earpads LIKE '%Comfort Pads%';
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE (earpads = 'Bowls' AND earpads = 'Comfort Pads') GROUP BY headphone.Headphone_ID, headphone.Model, headphone.Class HAVING COUNT(*) > 1;
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Driver_matched_db, headphone.Construction, headphone.Earpads, headphone.Price, store.Store_ID, store.Name, store.Neighborhood, store.Parking, store.Date_opened FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE headphone.Construction!= 'plastic' AND headphone.Earpads IS NOT NULL;
SELECT headphone.Headphone_ID, headphone.Model, headphone.Class, headphone.Driver_matched_db, headphone.Construction, headphone.Earpads, headphone.Price, store.Store_ID, store.Name, store.Neighborhood, store.Parking, store.Date_opened FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID INNER JOIN store ON stock.Store_ID = store.Store_ID WHERE headphone.Construction!= 'plastic' AND headphone.Earpads IS NOT NULL;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone WHERE headphone.Price < (SELECT AVG(headphone.Price) FROM headphone);
SELECT headphone.Headphone_ID, headphone.Model FROM headphone WHERE headphone.Price < (SELECT AVG(headphone.Price) FROM headphone);
SELECT store.Store_ID, store.Name FROM store ORDER BY Date_Opened ASC;
SELECT store.Store_ID, store.Name FROM store ORDER BY Date_Opened ASC;
SELECT store.Store_ID, store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'
SELECT store.Store_ID, store.Name, store.Parking FROM store WHERE store.Neighborhood = 'Tarzana'
SELECT Store_ID, Neighborhood FROM store GROUP BY Neighborhood;
SELECT store.Store_ID, COUNT(DISTINCT store.Neighborhood) AS num_neighborhoods FROM store GROUP BY store.Store_ID;
SELECT store.Store_ID, store.Neighborhood, COUNT(*) AS num_stores
SELECT store.Store_ID, store.Neighborhood, COUNT(*) AS num_stores
SELECT store.Store_ID, COUNT(*) AS num_headphones FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY store.Store_ID ORDER BY num_headphones DESC LIMIT 1;
SELECT store.Store_ID, sum(stock.Quantity) as Total_Quantity FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY store.Store_ID;
SELECT store.Store_ID, store.Name FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Headphone_ID IS NULL;
SELECT store.Store_ID, store.Name FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Headphone_ID IS NULL;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone LEFT JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE stock.Headphone_ID IS NULL;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone LEFT JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE stock.Headphone_ID IS NULL;
SELECT headphone.Headphone_ID, headphone.Model, SUM(stock.Quantity) AS Total_Stock FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY Total_Stock DESC LIMIT 1;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone INNER JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID GROUP BY headphone.Headphone_ID ORDER BY SUM(stock.Quantity) DESC LIMIT 1;
SELECT headphone.Headphone_ID FROM headphone 
SELECT Quantity FROM stock WHERE Store_ID = (SELECT Store_ID FROM store WHERE Name = 'Woodman');
SELECT store.Store_ID, store.Name, store.Neighborhood FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Headphone_ID IS NULL;
SELECT store.Store_ID, store.Name, store.Neighborhood FROM store LEFT JOIN stock ON store.Store_ID = stock.Store_ID WHERE stock.Headphone_ID IS NULL;
SELECT Author.venue FROM Paper WHERE Paper.year = 2010 AND Paper.title LIKE '%SQL%';
SELECT Author.venue, COUNT(Author.author_id) AS num_authors FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id JOIN Author_list ON Paper.paper_id = Author_list.paper_id GROUP BY Author.venue ORDER BY num_authors DESC;
SELECT paper_id FROM Paper
SELECT paper_id FROM Paper
SELECT Affiliation.venue FROM Affiliation WHERE Affiliation.year = 2019;
SELECT Affiliation.venue FROM Paper WHERE Paper.year = 2010 AND Paper.title LIKE '%machine learning%' ORDER BY Affiliation.venue ASC;
SELECT paper_id FROM Paper WHERE year = '2000' AND venue = 'NAACL';
SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2000;
SELECT paper_id FROM Paper WHERE year = '2009' AND venue IN (SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE email LIKE '%@columbia.edu')))
SELECT paper_id FROM Paper WHERE year = 2009 AND venue IN (SELECT name FROM Affiliation WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE email LIKE '%@columbia.edu')))
SELECT Affiliation.venue FROM Affiliation WHERE Affiliation.name = 'University of California, Berkeley';
SELECT Affiliation.venue, Affiliation.address FROM Affiliation INNER JOIN Paper ON Affiliation.venue = Paper.venue;
SELECT venue, year FROM Paper ORDER BY year ASC;
SELECT venue FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation UNION SELECT paper_id FROM Citation) GROUP BY venue ORDER BY year DESC;
SELECT Paper.paper_id, Paper.title FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University' JOIN Paper ON Author_list.paper_id = Paper.paper_id;
SELECT Paper.paper_id, Paper.title FROM Author_list JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Affiliation.name = 'Harvard University' JOIN Paper ON Author_list.paper_id = Paper.paper_id
SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE name = 'Mckeown';
SELECT Paper.paper_id, Paper.title FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Paper.paper_id = Author_list.paper_id WHERE Author.name = 'Mckeown';
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT DISTINCT paper_id FROM Author_list WHERE affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Stanford University') OR affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University'));
SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation AS Stanford ON Author_list.affiliation_id = Stanford.affiliation_id JOIN Affiliation AS Columbia ON Author_list.affiliation_id = Columbia.affiliation_id WHERE Stanford.name = 'Stanford' AND Columbia.name = 'Columbia';
SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE author_id IN (SELECT author_id FROM Author WHERE name='Mckeown, Kathleen') AND author_id IN (SELECT author_id FROM Author WHERE name='Rambow, Owen');
SELECT paper_id, title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE author_id IN (SELECT author_id FROM Author WHERE name='Mckeown, Kathleen') AND author_id IN (SELECT author_id FROM Author WHERE name='Rambow, Owen');
SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.author_id IN (SELECT Author.author_id FROM Author WHERE Author.name = 'Mckeown') AND Author_list.author_id NOT IN (SELECT Author.author_id FROM Author WHERE Author.name = 'Rambow');
SELECT title,paper_id FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown') AND affiliation_id IS NULL) AND paper_id NOT IN (SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow')))
SELECT Paper.paper_id, Paper.title FROM Author_list JOIN Author ON Author.author_id = Author_list.author_id WHERE Author.name IN ('Mckeown, Kathleen', 'Rambow, Owen') JOIN Paper ON Paper.paper_id = Author_list.paper_id;
SELECT Paper.paper_id, Paper.title FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author_list.author_id IN (SELECT Author.author_id FROM Author WHERE Author.name LIKE '%Mckeown%' OR Author.name LIKE '%Rambow%') ORDER BY Paper.year DESC;
SELECT Author.venue, COUNT(Paper.paper_id) AS num_papers FROM Paper JOIN Author ON Paper.author_id = Author.author_id GROUP BY Author.venue ORDER BY num_papers DESC;
SELECT Author.venue, COUNT(Paper.paper_id) AS num_papers FROM Paper JOIN Author ON Paper.author_id = Author.author_id GROUP BY Author.venue ORDER BY num_papers DESC;
SELECT Affiliation.venue FROM Affiliation WHERE Affiliation.name = 'University of California, Berkeley' ORDER BY Affiliation.year DESC;
SELECT Affiliation.venue FROM Affiliation WHERE Affiliation.year = '2019' ORDER BY Affiliation.year DESC;
SELECT Author.venue FROM Author WHERE Author.author_id IN (SELECT Author_list.author_id FROM Author_list GROUP BY Author_list.author_id HAVING COUNT(Author_list.paper_id)>50);
SELECT Author.venue FROM Author WHERE Author.author_id IN (SELECT Author_list.author_id FROM Author_list GROUP BY Author_list.author_id HAVING COUNT(Author_list.paper_id)>50);
SELECT Author.venue FROM Author WHERE Author.author_id IN (SELECT Author_list.author_id FROM Author_list GROUP BY Author_list.author_id HAVING COUNT(Author_list.paper_id)=1);
SELECT Author.venue FROM Author WHERE Author.author_id IN (SELECT Author_list.author_id FROM Author_list GROUP BY Author_list.author_id HAVING COUNT(Author_list.paper_id)=1);
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT venue FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Citation GROUP BY cited_paper_id));
SELECT venue FROM Paper WHERE paper_id IN (SELECT DISTINCT cited_paper_id FROM Citation);
SELECT paper_id FROM Paper WHERE paper_id = 'A00-1002';
SELECT Paper.paper_id FROM Paper WHERE Paper.paper_id IN (SELECT Citation.cited_paper_id FROM Citation WHERE Citation.paper_id = 'A00-1002');
SELECT paper_id FROM Paper WHERE paper_id = 'D12-1027';
SELECT paper_id, COUNT(*) AS num_citations FROM Citation WHERE cited_paper_id = 'D12-1027' GROUP BY paper_id;
SELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1;
SELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 1;
SELECT paper_id FROM Paper WHERE year = (SELECT MAX(year) FROM Paper);
SELECT Paper.title FROM Paper WHERE Paper.paper_id IN ( SELECT Citation.cited_paper_id FROM Citation GROUP BY Citation.cited_paper_id ORDER BY COUNT(Citation.cited_paper_id) DESC LIMIT 1 );
SELECT paper_id, COUNT(*) AS num_citations FROM Citation GROUP BY paper_id ORDER BY num_citations DESC LIMIT 10;
SELECT title, COUNT(*) AS num_citations FROM Paper JOIN Citation USING (paper_id) GROUP BY paper_id ORDER BY num_citations DESC LIMIT 10;
SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL;
SELECT paper_id FROM Author_list WHERE author_id = (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND affiliation_id IS NULL;
SELECT paper_id FROM Paper WHERE title = 'How many papers does Mckeown, Kathleen cite?' AND venue = 'How many papers does Mckeown, Kathleen cite?' AND year = 2020;
SELECT paper_id FROM Paper WHERE title = 'Mckeown' AND author_id = (SELECT author_id FROM Author WHERE name = 'Kathleen') UNION SELECT cited_paper_id FROM Citation WHERE paper_id IN (SELECT paper_id FROM Paper WHERE title = 'Mckeown' AND author_id = (SELECT author_id FROM Author WHERE name = 'Kathleen')) ORDER BY paper_id ASC;
SELECT Author.venue, COUNT(Citation.cited_paper_id) AS num_citations FROM Author JOIN Citation ON Author.author_id = Citation.paper_id GROUP BY Author.venue ORDER BY num_citations DESC LIMIT 1;
SELECT Author.venue, COUNT(Citation.cited_paper_id) AS num_citations FROM Author JOIN Citation ON Author.author_id = Citation.paper_id GROUP BY Author.venue ORDER BY num_citations DESC LIMIT 1;
SELECT venue, year FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Author_list WHERE author_id = ( SELECT author_id FROM Author WHERE name = 'Mckeown' ) AND affiliation_id IS NULL )
SELECT venue, year FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Author_list WHERE author_id = ( SELECT author_id FROM Author WHERE name = 'Mckeown' ) AND affiliation_id IS NULL ) ORDER BY venue ASC, year DESC;
SELECT venue, year FROM Paper WHERE affiliation_id IN (SELECT affiliation_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Columbia University'));
SELECT venue, year FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE name = 'Columbia University' GROUP BY venue, year ORDER BY venue ASC, year DESC;
SELECT Author.venue FROM Paper WHERE Paper.year = 2009 ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1;
SELECT Author.venue FROM Paper WHERE year = 2009 ORDER BY count(Paper.paper_id) DESC LIMIT 1;
SELECT Affiliation.venue FROM Affiliation WHERE Affiliation.year = '2009' ORDER BY Affiliation.year DESC LIMIT 3;
SELECT Affiliation.venue, COUNT(Affiliation.paper_id) AS num_papers FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Paper.year = '2009' GROUP BY Affiliation.venue ORDER BY num_papers DESC LIMIT 3;
SELECT paper_id FROM Paper WHERE year <= 2009 AND affiliation_id = (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University');
SELECT paper_id FROM Paper WHERE year <= 2009 AND venue = 'Columbia University';
SELECT paper_id FROM Paper WHERE year BETWEEN 2000 AND 2009;
SELECT paper_id FROM Paper WHERE year BETWEEN 2000 AND 2009;
SELECT title FROM Paper WHERE paper_id IN (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT Paper.title FROM Paper WHERE Paper.paper_id IN ( SELECT Author_list.paper_id FROM Author_list GROUP BY Author_list.paper_id HAVING COUNT(Author_list.author_id) = ( SELECT MAX(COUNT(Author_list.author_id)) FROM Author_list ) );
SELECT Author_list.paper_id, COUNT(Author_list.author_id) AS num_collaborators FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Author_list.author_id IN ( SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' ) GROUP BY Author_list.paper_id HAVING COUNT(Author_list.author_id) > 1;
SELECT Author_list.venue FROM Paper WHERE Paper.paper_id = 'journals/cogsci/1994.cogsci-94-0017.html' AND Paper.year = 1994;
SELECT Author.venue, COUNT(*) AS num_papers FROM Paper JOIN Citation ON Paper.paper_id = Citation.cited_paper_id JOIN Author_list ON Paper.paper_id = Author_list.paper_id WHERE Author.name = 'Mckeown' AND Author.email = 'kathleen@cs.stanford.edu' GROUP BY Author.venue ORDER BY num_papers DESC LIMIT 10;
SELECT Author.venue FROM Paper WHERE Paper.paper_id IN ( SELECT Citation.cited_paper_id FROM Citation WHERE Citation.paper_id = 'journals/cogsci/Charniak.McKeown-92' ) AND Paper.year > 1990 ORDER BY Paper.year DESC LIMIT 10;
SELECT paper_id FROM Paper WHERE title LIKE '%translation%';
SELECT paper_id FROM Paper WHERE title LIKE '%translation%';
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT DISTINCT cited_paper_id FROM Citation);
SELECT paper_id, title FROM Paper WHERE paper_id NOT IN (SELECT DISTINCT cited_paper_id FROM Citation);
SELECT Affiliation.venue FROM Author_list 
SELECT Affiliation.venue FROM Author_list 
SELECT venue, year, COUNT(*) AS num_papers FROM Paper GROUP BY venue, year ORDER BY year ASC;
SELECT paper_id, title, venue, year FROM Paper WHERE paper_id IN (SELECT DISTINCT cited_paper_id FROM Citation UNION SELECT DISTINCT paper_id FROM Citation);
SELECT Affiliation.venue, COUNT(Paper.paper_id) AS num_papers FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id GROUP BY Affiliation.venue;
SELECT Affiliation.venue, COUNT(Paper.paper_id) AS num_papers FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id GROUP BY Affiliation.venue ORDER BY num_papers DESC;
SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50);
SELECT title FROM Paper WHERE paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50);
SELECT Author.venue FROM Author WHERE Author.email = 'johndoe@acm.org' AND Author.name = 'John Doe';
SELECT Author.venue FROM Author WHERE Author.email = 'johndoe@acm.org' AND Author.name = 'John Doe';
SELECT Author.venue FROM Author WHERE Author.name IN (SELECT Author.name FROM Author JOIN Paper ON Author.author_id = Paper.author_id WHERE Paper.year = '2009' AND Paper.title LIKE '%NAACL%' OR Paper.title LIKE '%ACL%') ORDER BY Author.venue ASC;
SELECT Author.venue FROM Author WHERE Author.author_id IN ( SELECT Author_list.author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.year = '2009' AND Paper.venue IN ('NAACL', 'ACL') GROUP BY Author_list.author_id HAVING COUNT(*) > 1 ) ORDER BY Author.venue ASC;
SELECT Author.venue FROM Author WHERE Author.name IN (SELECT Author_list.author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue!= 'ACL') AND Author.email IS NOT NULL;
SELECT Author.venue FROM Author WHERE Author.name IN (SELECT Author_list.author_id FROM Author_list JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE Paper.venue!= 'ACL') GROUP BY Author.venue HAVING COUNT(*)=0;
SELECT Conference_ID FROM conference
SELECT Conference_ID FROM conference
SELECT Conference_ID, Conference_Name FROM conference GROUP BY Conference_Name HAVING COUNT(Conference_Name) = 1;
SELECT Conference_ID, Conference_Name FROM conference GROUP BY Conference_Name HAVING COUNT(Conference_Name) > 1;
SELECT Conference_ID, Conference_Name, Year, Location FROM conference;
SELECT conference.Conference_ID, conference.Year, conference.Location FROM conference;
SELECT Conference_ID, COUNT(Conference_ID) AS num_conferences FROM conference GROUP BY Conference_ID;
SELECT Conference_ID, COUNT(Conference_ID) AS num_occurrences FROM conference GROUP BY Conference_ID;
SELECT Conference_ID, Year FROM conference GROUP BY Year;
SELECT Conference_ID FROM conference WHERE Year = (SELECT MIN(Year) FROM conference);
SELECT Conference_ID FROM conference WHERE Year = (SELECT MIN(Year) FROM conference);
SELECT Conference_ID FROM conference WHERE Year = (SELECT MIN(Year) FROM conference);
SELECT Conference_ID, Location FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference GROUP BY Conference_ID HAVING COUNT(Conference_ID) > 1);
SELECT Conference_ID, Location FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference GROUP BY Conference_ID HAVING COUNT(Conference_ID) >= 2);
SELECT institution.role, conference.location, conference.year FROM staff INNER JOIN conference ON staff.staff_id = conference.staff_id WHERE staff.role = 'chair' AND conference.year > 2010 ORDER BY conference.year DESC;
SELECT institution.role, conference.location, institution.founded FROM staff INNER JOIN conference ON staff.staff_id = conference.conference_id WHERE staff.role = 'chair' AND conference.year > 2000 ORDER BY conference.year ASC;
SELECT institution.role FROM conference_participation WHERE staff_id = '1' AND Conference_ID = '2'
SELECT institution.role FROM conference_participation WHERE Conference_ID = 1 AND staff_ID = 2;
SELECT institution.role, conference.location FROM staff INNER JOIN conference ON staff.staff_id = conference.staff_id WHERE conference.year = 2019 AND conference.role = 'chair' ORDER BY conference.year DESC LIMIT 1;
SELECT institution.role, conference.location FROM staff INNER JOIN conference ON staff.staff_id = conference.staff_id WHERE staff.institution_id = 1 ORDER BY conference.year DESC LIMIT 1;
SELECT institution.role, count(staff.staff_id) as num_staff FROM conference_participation JOIN staff ON conference_participation.staff_id = staff.staff_id JOIN institution ON staff.institution_id = institution.institution_id WHERE conference_participation.role = 'chair' GROUP BY institution.institution_id HAVING institution.founded > 1800 ORDER BY num_staff DESC;
SELECT institution.staff_ID, count(staff.staff_ID) as num_staff FROM conference_participation JOIN staff ON conference_participation.staff_ID = staff.staff_ID JOIN institution ON staff.Institution_ID = institution.Institution_ID WHERE institution.Founded > 1800 GROUP BY institution.Institution_ID;
SELECT institution.role FROM conference_participation WHERE staff_id IS NULL;
SELECT institution.role FROM conference_participation WHERE staff_id IS NULL;
SELECT staff.staff_ID, staff.name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE staff.Age > (SELECT AVG(Age) FROM staff);
SELECT staff.staff_ID, name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff);
SELECT Conference_ID, MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM conference_participation WHERE Nationality = 'United States' GROUP BY Conference_ID;
SELECT Conference_ID, MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM conference_participation GROUP BY Conference_ID;
SELECT Conference_ID, Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'));
SELECT Conference_ID, Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation WHERE staff_ID IN (SELECT staff_ID FROM staff WHERE Nationality = 'Canada'));
SELECT staff.staff_ID, name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE role ='speaker' AND staff.staff_ID IN (SELECT staff_ID FROM conference_participation WHERE role ='sponsor') ORDER BY staff.staff_ID ASC;
SELECT staff.staff_ID, name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE role IN ('speaker','sponsor') GROUP BY staff.staff_ID HAVING COUNT(*) > 1;
SELECT staff.staff_ID, name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') AND Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'NACCL')
SELECT staff.staff_ID, name FROM conference_participation JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name IN ('ACL', 'NACCL')) GROUP BY staff.staff_ID HAVING COUNT(*) > 1;
SELECT staff.staff_ID, name FROM staff INNER JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year=2003 OR Year=2004) ORDER BY staff_ID ASC;
SELECT staff.staff_ID, name FROM conference_participation JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year BETWEEN 2003 AND 2004) GROUP BY staff.staff_ID HAVING COUNT(*) > 1;
SELECT Conference_ID, Conference_Name, Year, COUNT(*) AS num_of_participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_ID;
SELECT Conference_ID, Conference_Name, Year, COUNT(*) AS num_of_participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY Conference_ID;
SELECT Conference_ID, COUNT(*) AS num_attendants FROM conference_participation GROUP BY Conference_ID ORDER BY num_attendants DESC LIMIT 2;
SELECT Conference_ID, Conference_Name FROM conference WHERE Conference_ID IN (SELECT Conference_ID FROM conference_participation GROUP BY Conference_ID ORDER BY COUNT(*) DESC LIMIT 2);
SELECT staff.staff_ID, staff.name, staff.Nationality FROM staff WHERE staff.staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = 1 OR Conference_ID = 2 OR Conference_ID = 3)
SELECT staff.staff_ID, name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID = 1 OR Conference_ID = 2)
SELECT institution.role, institution.location FROM institution INNER JOIN staff ON institution.institution_id = staff.institution_id WHERE staff.staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE year=2004) AND institution.founded < 1990;
SELECT institution.role, conference.location FROM conference INNER JOIN staff ON conference.conference_id = staff.staff_id WHERE conference.year = '2004' AND staff.institution_id = institution.institution_id;
SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
SELECT plane_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills);
SELECT plane_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills);
SELECT plane_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills);
SELECT plane_name, pilot_name, age FROM PilotSkills WHERE age < 30;
SELECT plane_name, pilot_name, age FROM PilotSkills WHERE age < 30;
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35);
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub') GROUP BY pilot_name HAVING COUNT(*) > 1;
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) > 1);
SELECT location FROM Hangar
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age > 40);
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING COUNT(*) > 1);
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John Doe' AND age < 35;
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'B-52') GROUP BY plane_name HAVING COUNT(*) > 1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John Doe' AND plane_name = 'Piper Cub';
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John Doe' AND plane_name = 'Piper Cub';
SELECT plane_name FROM Hangar WHERE COUNT(pilot_name)>1 ORDER BY COUNT(pilot_name) DESC LIMIT 1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John Doe' ORDER BY COUNT(*) DESC LIMIT 1;
SELECT plane_name FROM Hangar WHERE COUNT(pilot_name) = MIN(COUNT(pilot_name));
SELECT plane_name FROM PilotSkills WHERE COUNT(pilot_name) = MIN(COUNT(pilot_name));
SELECT PilotSkills.plane_name, COUNT(PilotSkills.plane_name) AS num_pilots
SELECT PilotSkills.plane_name, COUNT(PilotSkills.plane_name) AS num_pilots FROM PilotSkills JOIN Hangar ON PilotSkills.plane_name = Hangar.plane_name WHERE Hangar.location = 'Chicago' GROUP BY PilotSkills.plane_name HAVING COUNT(PilotSkills.plane_name) > 1;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT DISTINCT pilot_name FROM PilotSkills);
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John' UNION SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jane'
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith';
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' GROUP BY plane_name HAVING COUNT(*) > 1;
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age > 40);
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age > 40);
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING COUNT(*) > 1);
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC);
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John' AND plane_name = 'Cessna'
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John' ORDER BY age DESC;
SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills ORDER BY plane_name);
SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills GROUP BY plane_name HAVING COUNT(*) > 1);
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT DISTINCT pilot_name FROM PilotSkills);
SELECT plane_name FROM Hangar
SELECT plane_name FROM PilotSkills WHERE pilot_name IN 
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills GROUP BY pilot_name HAVING COUNT(*) > 1);
SELECT plane_name, pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30;
SELECT plane_name, pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30;
SELECT plane_name FROM PilotSkills WHERE pilot_name IN 
SELECT plane_name FROM PilotSkills WHERE pilot_name IN 
SELECT plane_name FROM PilotSkills WHERE pilot_name IN 
SELECT plane_name FROM PilotSkills WHERE pilot_name IN 
SELECT plane_name, AVG(age), MIN(age)
SELECT plane_name, AVG(age), MIN(age)
SELECT plane_name FROM Hangar WHERE location = 'Austin' OR location = 'Boston';
SELECT plane_name FROM PilotSkills WHERE pilot_name IN 
SELECT plane_name FROM PilotSkills WHERE pilot_name IN 
SELECT PilotSkills.plane_name FROM PilotSkills WHERE PilotSkills.plane_name IN ('Piper Cub', 'F-14 Fighter');
SELECT plane_name, AVG(age) AS avg_age FROM PilotSkills GROUP BY plane_name;
SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name;
SELECT plane_name, COUNT(*) AS num_planes FROM Hangar GROUP BY plane_name;
SELECT plane_name, COUNT(*) AS num_entries FROM PilotSkills GROUP BY plane_name;
SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name
SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills GROUP BY plane_name ORDER BY plane_name);
SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills GROUP BY plane_name);
SELECT plane_name, pilot_name FROM PilotSkills WHERE age = (SELECT MAX(age) FROM PilotSkills);
SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY pilot_name;
SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY pilot_name;
SELECT location, COUNT(pilot_name), AVG(age)
SELECT location, COUNT(pilot_name), AVG(age)
SELECT plane_name, COUNT(pilot_name) AS num_pilots FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35;
SELECT plane_name, COUNT(pilot_name) AS num_pilots FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35;
SELECT location FROM Hangar WHERE plane_name IN (
SELECT location FROM Hangar WHERE plane_name IN (SELECT plane_name FROM PilotSkills WHERE pilot_name = 'John' AND age = (SELECT MIN(age) FROM PilotSkills));
SELECT plane_name, age FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Austin') AND age > 30;
SELECT plane_name, pilot_name, age FROM PilotSkills WHERE location = 'Austin';
SELECT plane_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC;
SELECT plane_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC;
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14 Fighter') AND age < ALL(SELECT age FROM PilotSkills WHERE plane_name = 'F-14 Fighter')
SELECT plane_name FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name = 'F-14' AND age < ALL(SELECT age FROM PilotSkills WHERE plane_name = 'F-14'));
SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
SELECT plane_name FROM PilotSkills WHERE age > (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub') GROUP BY plane_name HAVING COUNT(*)>1;
SELECT plane_name FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills);
SELECT district.District_ID, district.Name FROM district WHERE district.Area_km = (SELECT MAX(district.Area_km) FROM district);
SELECT district.District_ID, district.Area_km, district.Government_website FROM district WHERE district.Population = (SELECT MIN(district.Population) FROM district);
SELECT district.District_ID, district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(district.Area_km) FROM district);
SELECT district.District_ID, MAX(district.Area_km), AVG(district.Area_km) FROM district GROUP BY district.District_ID;
SELECT district.District_ID, SUM(district.Population) AS Total_Population FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE district.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3) GROUP BY district.District_ID;
SELECT district.District_ID, district.Name, district.Government_website FROM district ORDER BY Population DESC;
SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.Start_year >= 2010 AND spokesman_district.Start_year <= 2020 AND spokesman_district.Spokesman_ID IN (SELECT spokesman.Spokesman_ID FROM spokesman JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID WHERE spokesman.Speach_title LIKE '%Minister%' OR spokesman.Speach_title LIKE '%Secretary%') AND district.Government_website LIKE '%.gov%'
SELECT district.District_ID, district.Name FROM district WHERE (population > 4000) OR (area > 3000);
SELECT spokesman.Spokesman_ID, spokemans.Name, spokemans.Speach_title FROM spokesman spokemans INNER JOIN spokesman_district spokedist ON spokemans.Spokema_ID = spokedist.Spokema_ID WHERE spokedist.District_ID = 1
SELECT district.District_ID, district.Name, spokesman.Speach_title, spokesman.Age, spokesman.Points FROM district INNER JOIN spokesman ON district.District_ID = spokesman.District_ID WHERE spokesman.Rank_position = 1 ORDER BY district.District_ID ASC;
SELECT spokesman.Spokesman_ID, Name, Points FROM spokesman WHERE Age < 40;
SELECT spokesman.Spokesman_ID FROM spokesman WHERE Age = (SELECT MAX(Age) FROM spokesman);
SELECT spokesman.Spokesman_ID FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman);
SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.Spokesman_ID IN (SELECT spokesman.Spokesman_ID FROM spokesman ORDER BY spokesman.Points DESC LIMIT 1) GROUP BY district.District_ID HAVING COUNT(*) > ALL (SELECT COUNT(*) FROM spokesman_district GROUP BY District_ID);
SELECT spokesman.Spokesman_ID, spokesman.Name FROM spokesman INNER JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesma
SELECT district.District_ID, district.Name, COUNT(spokesman.Spokesman_ID) AS num_spokesmen FROM spokesman JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID JOIN district ON spokesman_district.District_ID = district.District_ID GROUP BY district.District_ID;
SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID WHERE spokesman_district.Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position=1) AND spokesman_district.Spokesman_ID IN (SELECT Spokesman_ID FROM spokesman WHERE Rank_position=2);
SELECT district.District_ID, district.Name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID HAVING COUNT(*) > 1;
SELECT District_ID FROM district WHERE District_ID NOT IN (SELECT DISTINCT(District_ID) FROM spokesman_district);
SELECT spokesman.Spokesman_ID, spokesman.Name FROM spokesman LEFT JOIN spokesman_district ON spokesman.Spokesmam_ID = spokesman_district.Spokesmam_ID WHERE spokesman_district.District_ID IS NULL;
SELECT district.District_ID, SUM(district.Population) AS Total_Population, AVG(district.Population) AS Average_Population FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID HAVING COUNT(spokesman_spokesman_district.Spokesman_ID) > 0;
SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures);
SELECT title FROM Sculptures WHERE year = (SELECT MAX(year) FROM Sculptures);
SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings);
SELECT title, location FROM Paintings WHERE year = (SELECT MIN(year) FROM Paintings);
SELECT sculptureID FROM Sculptures WHERE location = 'gallery 226';
SELECT sculptureID, title FROM Sculptures WHERE location = 'gallery 226';
SELECT title, location FROM Paintings;
SELECT Paintings.title, Paintings.location FROM Paintings WHERE Paintings.painterID = 1;
SELECT sculptureID, title, location FROM Sculptures;
SELECT Sculptures.title, Sculptures.location FROM Sculptures;
SELECT medium FROM Paintings WHERE paintingID = 80;
SELECT medium FROM Paintings WHERE paintingID = 80;
SELECT Artists.location FROM Artists WHERE Artists.birthYear > 1850;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850;
SELECT sculptorID, title, year FROM Sculptures WHERE location!= 'gallery 226' ORDER BY sculptorID ASC;
SELECT sculptorID, title, year FROM Sculptures WHERE location!= 'gallery 226' ORDER BY sculptorID ASC;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year < 1900 GROUP BY Artists.location, Artists.fname, Artists.lname HAVING COUNT(*) > 1 ORDER BY Artists.location ASC;
SELECT Artists.location FROM Artists WHERE Artists.artistID IN (SELECT Sculptors.sculptorID FROM Sculptors WHERE Sculptors.year > 1920);
SELECT Artists.location, Artists.birthYear FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.year > 1920 GROUP BY Artists.location HAVING COUNT(*)>1;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.deathYear = (SELECT MAX(Artists.deathYear) FROM Artists);
SELECT Artists.location, Artists.fname ||'' || Artists.lname AS Full_Name FROM Artists WHERE Artists.deathYear = (SELECT MAX(Artists2.deathYear) FROM Artists as Artists2);
SELECT Artists.location FROM Artists WHERE Artists.artistID = (SELECT MIN(Artists.deathYear - Artists.birthYear) FROM Artists);
SELECT Artists.location, MIN(Artists.deathYear - Artists.birthYear + 1) AS age FROM Artists GROUP BY Artists.location ORDER BY age DESC;
SELECT Artists.location, Artists.fname, Artists.birthYear, Artists.deathYear FROM Artists WHERE Artists.artistID = (SELECT MAX(Artists.artistID) FROM Artists);
SELECT Artists.location, Artists.fname, Artists.birthYear, Artists.deathYear FROM Artists WHERE Artists.deathYear = MAX(Artists.deathYear);
SELECT Paintings.title FROM Paintings WHERE Paintings.location = 'Gallery 240';
SELECT Paintings.title FROM Paintings WHERE Paintings.location = 'Gallery 240';
SELECT title FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL ORDER BY deathYear DESC LIMIT 1);
SELECT Paintings.title FROM Artists 
SELECT Artists.location, Paintings.year FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.fname = 'Mary' AND Paintings.year > 1900 ORDER BY Paintings.year DESC;
SELECT Paintings.title, Paintings.year FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.fname = 'Mary';
SELECT Paintings.title, Paintings.width_mm FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850;
SELECT Paintings.title, Painting.width_mm FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.birthYear < 1850;
SELECT location, medium FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo');
SELECT location, mediumOn FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE fname = 'Pablo') ORDER BY location ASC;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.mediumOn = 'lithograph'
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium IN ('oil', 'lithograph') GROUP BY Artists.location HAVING COUNT(DISTINCT Paintings.medium) > 1 ORDER BY Artists.location ASC;
SELECT Artists.year FROM Artists WHERE Artists.artistID = (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year = 1884 AND Paintings.medium = 'canvas') AND Artists.birthYear IS NOT NULL;
SELECT Artists.location FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year = 1884);
SELECT Artists.location FROM Artists WHERE Artists.location = 'gallery 241' AND Artists.medium = 'oil'
SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.location = 'gallery 241' AND Paintings.medium = 'oil') ORDER BY Artists.title ASC;
SELECT medium, COUNT(*) AS num_works FROM Paintings UNION ALL SELECT 'Sculpture', COUNT(*) FROM Sculptures GROUP BY medium ORDER BY medium ASC;
SELECT medium, COUNT(*) AS num_works FROM Paintings GROUP BY medium UNION SELECT medium, COUNT(*) AS num_works FROM Sculptures GROUP BY medium ORDER BY num_works DESC;
SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium;
SELECT medium, AVG(height_mm) FROM Paintings GROUP BY medium;
SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location;
SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location;
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil';
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'
SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.location = 'gallery 240' AND Paintings.medium = 'oil') GROUP BY Artists.title HAVING COUNT(*)=1;
SELECT Artists.title FROM Artists WHERE Artists.artistID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.location = 'Gallery 240' AND Paintings.medium = 'oil') ORDER BY Artists.title ASC;
SELECT title FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE medium = 'canvas');
SELECT title FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE medium = 'canvas') GROUP BY title;
SELECT Paintings.title FROM Paintings WHERE Paintings.year < (SELECT Paintings.year FROM Paintings WHERE Paintings.location = 'gallery 240') AND Paintings.location!= 'gallery 240';
SELECT Paintings.title FROM Paintings WHERE Paintings.year < (SELECT Paintings.year FROM Paintings JOIN Galleries ON Paintings.location = Galleries.name WHERE Galleries.galeryID = 240);
SELECT Paintings.title FROM Paintings WHERE Paintings.year = (SELECT MIN(Paintings.year) FROM Paintings);
SELECT Paintings.sculptureID FROM Paintings WHERE Paintings.year = (SELECT MIN(Paintings.year) FROM Paintings);
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%';
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.title LIKE '%female%';
SELECT title FROM Paintings WHERE title IS NOT NULL ORDER BY title ASC;
SELECT title FROM Paintings WHERE title NOT IN (SELECT title FROM Sculptures);
SELECT title FROM Paintings WHERE medium = 'oil' ORDER BY LENGTH(title);
SELECT title FROM Paintings WHERE height_mm = (SELECT MIN(height_mm) FROM Paintings);
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950;
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222;
SELECT Artists.title FROM Artists WHERE Artists.artistID = (SELECT MAX(Artists.artistID) FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year < 1900);
SELECT Artists.title FROM Artists WHERE Artists.artistID = (SELECT MAX(Artists.artistID) FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year < 1900);
SELECT Artists.title FROM Artists WHERE Artists.artistID = (SELECT Sculptures.sculptorID FROM Sculptures GROUP BY Sculptures.sculptorID ORDER BY COUNT(Sculptures.sculptorID) DESC LIMIT 1);
SELECT Artists.location FROM Artists WHERE Artists.artistID IN (SELECT Sculptures.sculptorID FROM Sculptures GROUP BY Sculptures.sculptorID HAVING COUNT(Sculptures.sculptorID)= (SELECT MAX(COUNT(Sculptures.sculptorID)) FROM Sculptures));
SELECT title FROM Paintings WHERE width < 600 OR height > 800;
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT Paintings.title FROM Paintings WHERE Paintings.height_mm > 500 AND Paintings.height_mm < 2000;
SELECT Paintings.title FROM Paintings WHERE Paintings.height_mm > 500 AND Paintings.height_mm < 2000;
SELECT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas';
SELECT location FROM Paintings WHERE medium = 'on panel' OR medium = 'on canvas';
SELECT location FROM Paintings WHERE year < 1885 AND year > 1930;
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm)
SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm)
SELECT Paintings.year, MAX(Height_mm), PaintingID FROM Paintings WHERE Paintings.year < 1900 GROUP BY Paintings.year;
SELECT Paintings.title, Painting.height_mm FROM Painting WHERE Painting.year < 1900 ORDER BY Painting.height_mm DESC LIMIT 1;
SELECT year, MAX(height_mm), MAX(width_mm)
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year;
SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm)
SELECT Artists.location, AVG(Paintings.height_mm), AVG(Paintings.width_mm)
SELECT Artists.location, COUNT(Paintings.title) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.location HAVING COUNT(Paintings.title) >= 2 ORDER BY num_paintings DESC;
SELECT Artists.location, COUNT(Paintings.title) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.location HAVING COUNT(Paintings.title) >= 2 ORDER BY num_paintings DESC;
SELECT Artists.year FROM Artists WHERE Artists.artistID IN (SELECT Painting.painterID FROM Painting GROUP BY Painting.painterID HAVING COUNT(Painting.painterID) <= 3);
SELECT Artists.location, Artists.fname, Artists.birthYear, Artists.deathYear FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.paintingID IN (SELECT PaintingID FROM Paintings GROUP BY PainterID HAVING COUNT(PaintingID) < 4);
SELECT Artists.year FROM Artists WHERE Artists.artistID = (SELECT Sculptures.sculptorID FROM Sculptures GROUP BY Sculptures.sculptorID HAVING COUNT(Sculptures.sculptorID) = (SELECT MIN(COUNT(Sculptures.sculptorID)) FROM Sculptures));
SELECT Artists.location, Artists.deathYear
SELECT Paintings.sculptureID, Paintings.height_mm FROM Paintings WHERE Paintings.width_mm = (SELECT MAX(Paintings.width_mm) FROM Paintings WHERE Paintings.location = 'gallery 240');
SELECT Paintings.title,Paintings.height_mm FROM Paintings WHERE Paintings.location = 'Gallery 240' ORDER BY Paintings.width_mm DESC LIMIT 1;
SELECT Paintings.title FROM Paintings WHERE Paintings.year < ALL(SELECT Paintings.year FROM Paintings JOIN Galleries ON Paintings.location = Galleries.name WHERE Galleries.galeryID = 240);
SELECT Paintings.sculptureID FROM Paintings WHERE Paintings.year < (SELECT MIN(Paintings.year) FROM Paintings JOIN Galleries ON Paintings.location = Galleries.name WHERE Galleries.galeryID = 240);
SELECT Paintings.title FROM Paintings WHERE Paintings.height_mm > (SELECT MAX(Paintings.height_mm) FROM Paintings WHERE Paintings.year > 1900);
SELECT Paintings.title FROM Paintings WHERE Paintings.height_mm > (SELECT MAX(Paintings.height_mm) FROM Paintings WHERE Paintings.year > 1900);
SELECT Artists.location, COUNT(Paintings.title) AS num_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' GROUP BY Artists.location ORDER BY num_paintings DESC LIMIT 3;
SELECT Artists.location FROM Artists WHERE Artists.artistID IN (SELECT Painting.painterID FROM Painting WHERE Painting.medium = 'oil') ORDER BY COUNT(Painting.painterID) DESC LIMIT 1;
SELECT Paintings.title,Paintings.location,Paintings.paintingID FROM Paintings WHERE Paintings.medium = 'oil' ORDER BY Paintings.year ASC;
SELECT Paintings.location, Painting.title FROM Painting ORDER BY Painting.year ASC;
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title;
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title ASC;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists INNER JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE NOT EXISTS(SELECT * FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID);
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE NOT EXISTS(SELECT * FROM Sculptures WHERE Sculptures.sculptorID = Artists.artistID);
SELECT location FROM Paintings WHERE year < 1885 AND NOT EXISTS(SELECT * FROM Paintings WHERE medium = 'canvas' AND location = Paintings.location);
SELECT Paintings.title FROM Paintings WHERE Paintings.year < 1885 AND Paintings.medium!= 'canvas' ORDER BY Painting.title ASC;
SELECT Road FROM race
SELECT Road FROM race WHERE Winning_driver IS NOT NULL;
SELECT driver.Driver_ID, driver.Driver_Name, race.Winning_driver, race.Winning_team FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Report LIKE '%win%' ORDER BY race.Winning_team ASC;
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC;
SELECT Winning_driver FROM race WHERE Pole_Position!= 'Junior Strous' AND Winning_driver = Winning_driver;
SELECT Winning_driver FROM race WHERE Driver_ID NOT IN (SELECT Driver_ID FROM driver WHERE Entrant = 'Junior Strous') AND Winning_driver IS NOT NULL;
SELECT driver.Driver_ID, driver.Driver_Name, driver.Age, constructor.Constructor FROM driver JOIN constructor ON driver.Constructor = constructor.Constructor ORDER BY driver.Age ASC;
SELECT Driver_ID, Constructor FROM driver ORDER BY Age ASC;
SELECT Driver_ID, Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant HAVING COUNT(Driver_ID) = 1;
SELECT Driver_ID, Entrant FROM driver WHERE Age >= 20 GROUP BY Entrant HAVING COUNT(Driver_ID) > 1;
SELECT Driver_ID, MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM driver GROUP BY Driver_ID;
SELECT Driver_ID, MAX(Age) AS Max_Age, MIN(Age) AS Min_Age FROM driver GROUP BY Driver_ID;
SELECT Driver_ID, Engine FROM driver WHERE Age > 30 OR Age < 20 GROUP BY Driver_ID HAVING COUNT(DISTINCT Engine) = 1;
SELECT Driver_ID, COUNT(DISTINCT Engine) AS num_engines FROM driver WHERE Age > 30 OR Age < 20 GROUP BY Driver_ID HAVING COUNT(DISTINCT Engine) = (SELECT MAX(num_engines) FROM (SELECT Driver_ID, COUNT(DISTINCT Engine) AS num_engines FROM driver WHERE Age > 30 OR Age < 20 GROUP BY Driver_ID));
SELECT Driver_ID, Driver_Name FROM driver ORDER BY Driver_Name DESC;
SELECT Driver_ID, Driver_Name FROM driver ORDER BY Driver_Name DESC;
SELECT driver.Driver_ID, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID;
SELECT driver.Driver_ID, race.Race_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID;
SELECT driver.Driver_ID, COUNT(driver.Driver_ID) AS num_races FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID;
SELECT Driver_ID, COUNT(*) AS num_races FROM race GROUP BY Driver_ID;
SELECT Driver_ID, COUNT(*) AS num_races FROM race GROUP BY Driver_ID ORDER BY num_races DESC LIMIT 1;
SELECT Driver_ID FROM race WHERE Road = (SELECT MAX(Road) FROM race);
SELECT driver.Driver_ID, driver.Driver_Name, driver.Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Road) >= 2;
SELECT driver.Driver_ID, driver.Driver_Name, driver.Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(race.Road) >= 2;
SELECT race.Race_Name FROM driver
SELECT race.Race_Name FROM driver
SELECT Driver_ID, Driver_Name FROM driver WHERE Constructor!= 'Bugatti';
SELECT Driver_ID, Driver_Name FROM driver WHERE Constructor!= 'Bugatti';
SELECT Driver_ID, Constructor FROM driver GROUP BY Driver_ID HAVING COUNT(Driver_ID) > 1;
SELECT Driver_ID, Constructor FROM driver GROUP BY Constructor;
SELECT Driver_ID, Engine FROM driver GROUP BY Driver_ID ORDER BY COUNT(Engine) DESC LIMIT 1;
SELECT Driver_ID, Engine FROM driver GROUP BY Driver_ID ORDER BY COUNT(Engine) DESC LIMIT 1;
SELECT race.Driver_ID, race.Race_Name, driver.Engine FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID GROUP BY race.Driver_ID HAVING COUNT(driver.Engine) > 1;
SELECT race.Driver_ID, driver.Engine FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID GROUP BY race.Driver_ID HAVING COUNT(*) > 1;
SELECT Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM race);
SELECT Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT DISTINCT Driver_ID FROM race);
SELECT Driver_ID FROM driver WHERE Age < 20 OR Age > 30;
SELECT Driver_ID FROM driver WHERE Age < 20 OR Age > 30;
SELECT race.Winning_team FROM race WHERE race.Road IN (SELECT road FROM race GROUP BY road HAVING COUNT(*) > 1) ORDER BY race.Road ASC;
SELECT race.Winning_team FROM driver
SELECT driver.Driver_ID, driver.Driver_Name FROM driver WHERE driver.Driver_ID IN (SELECT race.Driver_ID FROM race WHERE race.Pole_Position = 'James Hinchcliffe' OR race.Pole_Position = 'Carl Skerlong') GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) > 1;
SELECT Driver_ID FROM driver WHERE Driver_Name = 'James Hinchcliffe' AND Driver_Name = 'Carl Skerlong'
SELECT Driver_ID FROM driver WHERE Driver_Name = 'James Hinchcliffe';
SELECT Driver_ID, Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe');
SELECT countries.country_id FROM countries WHERE country_name = 'United States' AND overall_score > 0.5;
SELECT countries.country_id FROM countries WHERE country_name = 'United States' AND overall_score > 0.5
SELECT languages.language_id, languages.name FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id INNER JOIN languages ON official_languages.language_id = languages.id WHERE countries.overall_score > 0 ORDER BY languages.name ASC;
SELECT languages.language_id, languages.name FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id INNER JOIN languages ON official_languages.language_id = languages.id ORDER BY languages.name ASC;
SELECT languages.language_id, languages.name FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id INNER JOIN languages ON official_languages.language_id = languages.id WHERE countries.name LIKE '%ish%';
SELECT languages.language_id, languages.name FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id INNER JOIN languages ON official_languages.language_id = languages.id WHERE languages.name LIKE '%ish%';
SELECT countries.country_id, countries.name FROM countries ORDER BY countries.overall_score DESC;
SELECT countries.country_id, countries.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id INNER JOIN countries ON official_languages.country_id = countries.id ORDER BY countries.overall_score DESC;
SELECT countries.country_id, AVG(countries.justice_score) AS avg_justice_score FROM countries GROUP BY country_id ORDER BY avg_justice_score DESC;
SELECT languages.language_id, AVG(countries.justice_score) AS avg_justice_score FROM official_languages INNER JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.language_id;
SELECT countries.country_id, MAX(countries.health_score) AS max_health_score, MIN(countries.health_score) AS min_health_score FROM countries WHERE countries.name!= 'Norway' GROUP BY countries.country_id;
SELECT countries.country_id, MAX(countries.health_score), MIN(countries.health_score) FROM countries WHERE countries.name!= 'Norway' GROUP BY countries.country_id;
SELECT countries.country_id FROM countries WHERE country_name = 'United States' AND overall_score > 0.5;
SELECT countries.country_id FROM countries WHERE country_name = 'United States' AND overall_score > 0.5;
SELECT countries.country_id, countries.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id INNER JOIN countries ON official_languages.country_id = countries.id WHERE languages.name = 'English' ORDER BY countries.education_score DESC;
SELECT countries.country_id, countries.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id INNER JOIN countries ON official_languages.country_id = countries.id ORDER BY countries.education_score DESC;
SELECT countries.country_id, countries.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IN (SELECT languages.id FROM languages WHERE languages.name = 'English') ORDER BY countries.politics_score DESC LIMIT 1;
SELECT countries.country_id, countries.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id INNER JOIN countries ON official_languages.country_id = countries.id WHERE languages.name = 'English' AND countries.politics_score > 0 ORDER BY countries.politics_score DESC LIMIT 1;
SELECT countries.country_id, countries.name, languages.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id;
SELECT countries.country_id, languages.name FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id INNER JOIN languages ON official_languages.language_id = languages.id;
SELECT languages.language_id, COUNT(countries.country_id) AS num_countries FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.language_id ORDER BY num_countries DESC;
SELECT languages.language_id, languages.name, COUNT(countries.id) AS num_countries FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.language_id ORDER BY num_countries DESC;
SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.country_id IN (SELECT country_id FROM countries ORDER BY overall_score DESC LIMIT 1) GROUP BY languages.language_id HAVING COUNT(*) > 0;
SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.country_id IN ( SELECT countries.id FROM countries ORDER BY overall_score DESC LIMIT 1 ) GROUP BY languages.language_id HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC LIMIT 1;
SELECT languages.language_id, languages.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.language_id HAVING COUNT(official_languages.country_id) >= 2;
SELECT languages.language_id, languages.name FROM official_languages INNER JOIN languages ON official_languages.language_id = languages.id GROUP BY languages.language_id HAVING COUNT(official_languages.country_id) > 1;
SELECT countries.country_id, AVG(countries.overall_score) AS avg_overall_score FROM countries INNER JOIN official_languages ON countries.id = official_languages.country_id WHERE languages.name = 'English' GROUP BY countries.country_id;
SELECT languages.language_id, AVG(countries.overall_score) AS avg_overall_score FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id WHERE languages.name = 'English' GROUP BY languages.language_id;
SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.country_id IN ( SELECT countries.id FROM countries ORDER BY overall_score DESC LIMIT 3 ) ORDER BY languages.name ASC;
SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id WHERE official_languages.country_id IN ( SELECT countries.id FROM countries ORDER BY overall_score DESC LIMIT 3 ) GROUP BY languages.language_id HAVING COUNT(*) >= 3
SELECT languages.language_id, languages.name, AVG(countries.overall_score) AS avg_overall_score FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id INNER JOIN countries ON official_languages.country_id = countries.id GROUP BY languages.language_id ORDER BY avg_overall_score DESC;
SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.language_id ORDER BY AVG(countries.overall_score) DESC;
SELECT countries.country_id, COUNT(official_languages.language_id) AS num_of_official_languages FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.country_id ORDER BY num_of_official_languages DESC LIMIT 1;
SELECT countries.country_id FROM countries WHERE countries.id = (SELECT MAX(countries.id) FROM countries);
SELECT languages.language_id, languages.name FROM languages LEFT JOIN official_languages ON languages.language_id = official_languages.language_id WHERE official_languages.country_id IS NULL;
SELECT languages.language_id, languages.name FROM languages LEFT JOIN official_languages ON languages.language_id = official_languages.language_id WHERE official_languages.country_id IS NULL;
SELECT countries.country_id, countries.name FROM countries LEFT JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IS NULL;
SELECT countries.country_id, countries.name FROM countries LEFT JOIN official_languages ON countries.id = official_languages.country_id WHERE official_languages.language_id IS NULL;
SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.language_id = official_languages.language_id WHERE (countries.overall_score > 95) AND (countries.overall_score < 90);
SELECT languages.language_id, languages.name FROM languages INNER JOIN official_languages ON languages.language_id = official_languages.language_id WHERE official_languages.country_id IN (SELECT country_id FROM countries WHERE overall_score > 95) AND official_languages.country_id IN (SELECT country_id FROM countries WHERE overall_score < 90);
SELECT Addresses.search_string FROM Addresses WHERE Addresses.search_string LIKE '%country%' OR Addresses.search_string LIKE '%city%'
SELECT Addresses.search_string FROM User_Searches WHERE search_string LIKE '%London%';
SELECT Addresses.search_string FROM Addresses WHERE Addresses.state IN (SELECT Properties.state FROM Properties);
SELECT Addresses.search_string FROM User_Searches WHERE user_id = 100 AND search_string LIKE '%state%';
SELECT Features.search_string FROM User_Searches WHERE user_id = '1234' AND search_string LIKE '%rooftop%';
SELECT Ref_Age_Categories.user_id FROM Users WHERE age_category_code = 'A' AND user_category_code = 'B';
SELECT Features.search_string FROM User_Searches WHERE search_string LIKE '%feature%';
SELECT Features.search_string FROM User_Searches WHERE search_string ='most common feature' ORDER BY count(*) DESC LIMIT 1;
SELECT Rooms.search_seq FROM Rooms WHERE Rooms.room_size = (SELECT MIN(Rooms.room_size) FROM Rooms);
SELECT Rooms.search_seq FROM Rooms WHERE Room_count = (SELECT MIN(Room_count) FROM Rooms);
SELECT Property_Features.search_seq FROM Property_Features WHERE feature_id = (SELECT feature_id from Features where feature_name = 'Parking Lot') OR feature_id = (SELECT feature_id from Features where feature_name = 'Garage')
SELECT Properties.user_id, COUNT(*) AS num_properties
SELECT Ref_Age_Categories.user_id FROM Users WHERE middle_name LIKE '%Mother%' AND user_category_code = 'MOTHER' ORDER BY Ref_Age_Categories.age_category_code ASC;
SELECT Ref_Age_Categories.user_id FROM Users WHERE Users.user_category_code = 'Mother' AND Users.age_category_code = Ref_Age_Categories.age_category_code;
SELECT Users.user_id, Users.first_name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id GROUP BY Users.user_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Users.user_id, Users.first_name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id GROUP BY Users.user_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Rooms.search_string
SELECT Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details, Features.feature_name, Features.feature_description FROM Users INNER JOIN User_Property_History ON Users.user_id = User_Property_History.user_id INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id INNER JOIN Rooms ON Properties.property_id = Rooms.property_id INNER JOIN Property_Features ON Properties.property_id = Property_Features.property_id INNER JOIN Features ON Property_Features.feature_id = Features.feature_id WHERE Features.feature_name = 'Garden' GROUP BY Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details, Features.feature_name, Features.feature_description HAVING COUNT(*) > 0 ORDER BY Rooms.user_id ASC, Rooms.property_id ASC, Rooms.room_number ASC, Rooms.room_type_code ASC, Rooms.room_size ASC, Rooms.other_room_details ASC, Features.feature_name ASC, Features.feature
SELECT Addresses.search_string FROM User_Searches WHERE search_string LIKE '%swimming%pool%' AND search_string LIKE '%city%'
SELECT Addresses.search_string FROM User_Searches WHERE search_string LIKE '%swimming pool%'
SELECT Property_Features.user_id, Property_Features.property_id, Property_Features.feature_id, Property_Features.feature_value, Property_Features.property_feature_description FROM Property_Features INNER JOIN Users ON Property_Features.user_id = Users.user_id WHERE (Users.age_category_code = 'A') AND (Users.user_category_code = 'B') ORDER BY Users.user_id ASC LIMIT 5 OFFSET 0;
SELECT Property_Features.user_id, Property_Features.property_id, Property_Features.feature_id, Property_Features.feature_value, Property_Features.property_feature_description FROM Property_Features INNER JOIN Users ON Property_Features.user_id = Users.user_id WHERE (Users.age_category_code = 'A') AND (Users.user_category_code = 'C') ORDER BY Property_Features.property_id ASC LIMIT 5 OFFSET 0;
SELECT Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details, Properties.property_name, Properties.property_description, Properties.garage_yn, Properties.parking_lots, Properties.room_count, Properties.vendor_requested_price, Properties.price_min, Properties.price_max, Properties.other_property_details, Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.line_3_area_locality, Addresses.town_city, Addresses.zip_postcode, Addresses.county_state_province, Addresses.country, Addresses.other_address_details, Users.age_category_code, Users.user_category_code, Users.is_buyer, Users.is_seller, Users.login_name, Users.password, Users.date_registered, Users.first_name, Users.middle_name, Users.last_name, Users.other_user_details, Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description, Ref_Room_Types.room_type_code, Ref_Room_Types.room_type_description FROM
SELECT Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details, Properties.property_name, Properties.property_description, Properties.garage_yn, Properties.parking_lots, Properties.room_count, Properties.vendor_requested_price, Properties.price_min, Properties.price_max, Properties.other_property_details, Addresses.line_1_number_building, Addresses.line_2_number_street, Addresses.line_3_area_locality, Addresses.town_city, Addresses.zip_postcode, Addresses.county_state_province, Addresses.country, Addresses.other_address_details, Users.age_category_code, Users.user_category_code, Users.is_buyer, Users.is_seller, Users.login_name, Users.password, Users.date_registered, Users.first_name, Users.middle_name, Users.last_name, Users.other_user_details, Ref_Property_Types.property_type_code, Ref_Property_Types.property_type_description, Ref_Room_Types.room_type_code, Ref_Room_Types.room_type_description,
SELECT Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details FROM Users INNER JOIN User_Property_History ON Users.user_id = User_Property_History.user_id INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id INNER JOIN Rooms ON Properties.property_id = Rooms.property_id WHERE (Rooms.room_size IS NOT NULL);
SELECT Rooms.user_id, Rooms.property_id, Rooms.room_number, Rooms.room_type_code, Rooms.room_size, Rooms.other_room_details FROM Rooms WHERE Rooms.room_size IS NOT NULL GROUP BY Room_size HAVING COUNT(Rooms.room_size) > 1;
SELECT user_id FROM User_Searches WHERE search_seq > 1 GROUP BY user_id HAVING COUNT(*)>1;
SELECT user_id FROM User_Searches WHERE search_seq > 1 GROUP BY user_id HAVING COUNT(search_seq) >= 2;
SELECT Users.user_id, Users.first_name, Users.last_name, User_Searches.search_datetime
SELECT user_id, MAX(search_datetime) AS max_search_time FROM User_Searches GROUP BY user_id;
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC;
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC;
SELECT Addresses.search_string FROM User_Searches WHERE search_string = '12345' AND user_id IN (SELECT user_id FROM Users WHERE user_id NOT IN (SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING COUNT(*) > 2)) AND address_id IN (SELECT property_address_id FROM Properties WHERE property_id NOT IN (SELECT property_id FROM Property_Features WHERE feature_id IN (SELECT feature_id FROM Features WHERE feature_name = 'Zip Code')))
SELECT Addresses.search_string FROM User_Searches WHERE search_string LIKE '%two%' AND search_string LIKE '%or%fewer%'
SELECT user_id, user_category_code FROM Users WHERE user_id IN ( SELECT DISTINCT user_id FROM User_Searches )
SELECT user_id, user_category_code FROM Users WHERE user_id IN ( SELECT DISTINCT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(*) = 1 )
SELECT Ref_Age_Categories.user_id FROM Users WHERE Users.login_name = 'joe' AND Users.date_registered = (SELECT MIN(User_Searches.search_datetime) FROM User_Searches WHERE User_Searches.user_id = 1);
SELECT Ref_Age_Categories.user_id FROM Users WHERE Users.user_id = (SELECT User_Searches.user_id FROM User_Searches ORDER BY User_Searches.search_datetime ASC LIMIT 1);
SELECT Users.user_id, Users.login_name FROM Users INNER JOIN Ref_Age_Categories ON Users.age_category_code = Ref_Age_Categories.age_category_code WHERE Ref_Age_Categories.age_category_description = 'Senior Citizen' ORDER BY Users.first_name ASC;
SELECT Users.user_id, Users.login_name FROM Users WHERE Users.age_category_code = 'Senior Citizen' ORDER BY Users.first_name ASC;
SELECT Users.user_id, COUNT(User_Searches.search_seq) AS search_count FROM Users INNER JOIN User_Searches ON Users.user_id = User_Searches.user_id WHERE Users.is_buyer = 'Y' GROUP BY Users.user_id;
SELECT Users.user_id, COUNT(User_Searches.search_seq) AS search_count FROM Users INNER JOIN User_Searches ON Users.user_id = User_Searches.user_id WHERE Users.is_buyer = 'Y' GROUP BY Users.user_id ORDER BY search_count DESC;
SELECT Users.user_id, Users.login_name, Users.date_registered FROM Users WHERE Users.login_name = 'ratione';
SELECT Users.user_id, Users.date_registered FROM Users WHERE Users.login_name = 'ratione';
SELECT Users.user_id, Users.first_name, Users.middle_name, Users.last_name, Users.login_name FROM Users WHERE Users.is_seller = '1';
SELECT Users.user_id, Users.first_name, Users.middle_name, Users.last_name, Users.login_name FROM Users WHERE Users.is_seller = 'Y'
SELECT Addresses.search_string FROM Users WHERE age_category_code = 'Senior Citizen' AND user_category_code = 'Buyer';
SELECT Addresses.search_string FROM Users WHERE age_category_code = 'Senior Citizen' AND user_category_code = 'Buyer'
SELECT Property_Features.user_id, COUNT(Property_Features.property_id) AS num_properties FROM Property_Features GROUP BY Property_Features.user_id HAVING COUNT(Property_Features.property_id)>1;
SELECT Property_Features.user_id, COUNT(Property_Features.property_id) AS num_properties_with_at_least_two_features FROM Property_Features GROUP BY Property_Features.user_id HAVING COUNT(Property_Features.property_id) >= 2;
SELECT Property_Photos.user_id, COUNT(PROPERTY_PHOTOS.property_id) AS num_photos FROM Property_Photos GROUP BY user_id;
SELECT Property_Photos.user_id, COUNT(PROPERTY_PHOTOS.property_id) AS num_photos FROM Property_Photos GROUP BY user_id;
SELECT Users.user_id, COUNT(Property_Photos.photo_seq) AS num_photos FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id;
SELECT Users.user_id, COUNT(Property_Photos.property_id) AS num_photos FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id INNER JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Users.user_id HAVING COUNT(Property_Photos.property_id) > 0 ORDER BY Users.user_id ASC;
SELECT Properties.user_id, Properties.property_id, Properties.price_max FROM Users INNER JOIN Addresses ON Users.user_address_id = Addresses.address_id INNER JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE (Users.user_category_code = 'SM' OR Users.user_category_code = 'ST') AND Properties.price_max IS NOT NULL GROUP BY Properties.user_id HAVING COUNT(*) > 1 ORDER BY Properties.price_max DESC;
SELECT Properties.user_id, Properties.property_id, Properties.price_max FROM Users INNER JOIN Addresses ON Users.user_address_id = Addresses.address_id INNER JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE (Users.age_category_code = 'Single Mother' OR Users.user_category_code = 'Student') AND Properties.price_max IS NOT NULL GROUP BY Properties.user_id HAVING COUNT(Properties.user_id) = 1 ORDER BY Properties.price_max DESC;
SELECT User_Property_History.user_id, User_Property_History.property_id, User_Property_History.datestamp, Properties.property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC;
SELECT User_Property_History.user_id, User_Property_History.property_id, User_Property_History.datestamp, Properties.property_name FROM User_Property_History INNER JOIN Properties ON User_Property_History.property_id = Properties.property_id ORDER BY User_Property_History.datestamp ASC;
SELECT Ref_Property_Types.user_id FROM Users WHERE user_id = 1000;
SELECT Ref_Property_Types.user_id FROM Users WHERE user_id = 1000;
SELECT Ref_Age_Categories.user_id FROM Users WHERE age_category_code = 'Over 60';
SELECT Ref_Age_Categories.user_id FROM Users WHERE age_category_code = 'Over 60';
SELECT Rooms.search_string, COUNT(Rooms.search_string) AS count FROM Rooms GROUP BY search_string ORDER BY count DESC;
SELECT Rooms.search_string, COUNT(Rooms.search_string) AS count FROM Rooms GROUP BY search_string ORDER BY count DESC;
SELECT Addresses.user_id, Users.first_name, Addresses.country FROM User_Address INNER JOIN Addresses ON User_Address.address_id = Addresses.address_id INNER JOIN Users ON Addresses.user_id = Users.user_id WHERE Users.first_name = 'Robbie' GROUP BY Addresses.country HAVING COUNT(*) > 1;
SELECT Addresses.search_string FROM Users WHERE first_name = 'Robbie' AND seaarch_string IN (SELECT Addresses.country FROM Addresses);
SELECT Users.user_id, Users.first_name, Users.middle_name, Users.last_name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE Users.user_address_id = Properties.property_address_id;
SELECT Users.user_id, CONCAT(Users.first_name,'', Users.middle_name,'', Users.last_name) AS Full_Name FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id WHERE Properties.property_address_id IN (SELECT Addresses.address_id FROM Addresses INNER JOIN Properties ON Addresses.address_id = Properties.property_address_id);
SELECT user_id, search_string FROM User_Searches WHERE user_id NOT IN ( SELECT user_id FROM Users INNER JOIN Properties ON Users.user_id = Properties.owner_user_id GROUP BY user_id HAVING COUNT(*)=0 )
SELECT user_id, search_string FROM User_Searches WHERE user_id NOT IN (SELECT user_id FROM Users WHERE user_id IN (SELECT owner_user_id FROM Properties));
SELECT Users.user_id, Users.last_name FROM Users WHERE (SELECT COUNT(*) FROM User_Property_History WHERE User_Property_History.user_id = Users.user_id) >= 2 AND (SELECT COUNT(*) FROM User_Searches WHERE User_Searches.user_id = Users.user_id) <= 2;
SELECT Users.user_id, Users.last_name FROM Users WHERE (SELECT COUNT(*) FROM User_Searches WHERE User_Searches.user_id = Users.user_id) <= 2 AND (SELECT COUNT(*) FROM User_Property_History WHERE User_Property_History.user_id = Users.user_id) >= 2;
SELECT bike_id FROM bike WHERE weight > 780;
SELECT bike_id, product_name, weight FROM bike ORDER BY price ASC;
SELECT cyclist.cyclist_id, cyclist.name, cyclist.nation FROM cyclist
SELECT bike_id, MAX(weight) AS max_weight, MIN(weight) AS min_weight FROM cyclists_own_bikes GROUP BY bike_id;
SELECT bike_id, AVG(price) FROM cyclists_own_bikes JOIN bike ON cyclists_own_bikes.bike_id = bike.id WHERE material='Carbon CC' GROUP BY bike_id;
SELECT cyclist.cyclist_id, cyclist.name, cyclist.result FROM cyclist WHERE cyclist.nation!= 'Russia'
SELECT bike_id, product_name FROM cyclists_own_bikes WHERE purchase_year > 2015 GROUP BY bike_id, product_name;
SELECT bike_id, product_name FROM bike WHERE id IN (SELECT DISTINCT cyclist_id FROM cyclists_own_bikes GROUP BY cyclist_id HAVING COUNT(*) >= 4);
SELECT cyclist_id, name FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT bike_id FROM cyclist WHERE nation = 'Russia' OR nation = 'Great Britain'
SELECT cyclist.cyclist_id, cyclist.name, cyclist.nation, cyclist.result, bike.product_name, bike.weight, bike.price, bike.material FROM cyclist INNER JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id INNER JOIN bike ON cyclists_own_bikes.bike_id = bike.id WHERE cyclist.heat > 0 ORDER BY cyclist.heat DESC;
SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015;
SELECT bike_id FROM cyclist WHERE result > 421.558;
SELECT bike_id, product_name, price FROM bike WHERE id IN (SELECT bike_id FROM cyclists_own_bikes WHERE cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Bradley Wiggins') AND cyclist_id IN (SELECT id FROM cyclist WHERE name = 'Antonio Tauler')) ORDER BY bike_id ASC;
SELECT cyclist.cyclist_id, cyclist.name, cyclist.nation, cyclist.result FROM cyclist LEFT JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id WHERE cyclists_own_bikes.bike_id IS NULL;
SELECT bike_id FROM bike WHERE material LIKE '%fiber%';
SELECT bike_id, COUNT(*) AS num_bikes FROM cyclists_own_bikes GROUP BY bike_id ORDER BY cyclist_id;
SELECT goods.ReceiptNumber, good.Flavor FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods as good ON items.Item = good.Id WHERE good.Food = 'cake' ORDER BY good.Price DESC LIMIT 1;
SELECT goods.ReceiptNumber, goods.Flavor FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cake' ORDER BY goods.Price DESC LIMIT 1;
SELECT goods.ReceiptNumber, items.Item, goods.Price FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cookie' ORDER BY goods.Price ASC LIMIT 1;
SELECT items.ReceiptNumber, goods.Flavor FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'cookie' AND goods.Price = (SELECT MIN(goods.Price) FROM goods WHERE goods.Food = 'cookie');
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
SELECT items.ReceiptNumber FROM receipts 
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.Price < 3;
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.Date >= '2019-01-01' AND receipts.Date <= '2019-12-31';
SELECT customers.CustomerId FROM receipts 
SELECT customers.CustomerId FROM receipts 
SELECT customers.CustomerId, COUNT(*) AS Count FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food IS NOT NULL GROUP BY customers.CustomerId ORDER BY Count DESC;
SELECT customers.CustomerId, COUNT(*) AS Count FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id GROUP BY customers.CustomerId HAVING goods.Food IS NOT NULL ORDER BY Count DESC;
SELECT customers.CustomerId FROM receipts WHERE receipts.ReceiptNumber IN (SELECT items.Receipt FROM items INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery') GROUP BY customerid HAVING COUNT(*) >= 15;
SELECT CustomerId FROM receipts WHERE ReceiptNumber >= 15;
SELECT customers.CustomerId, customers.LastName FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' GROUP BY customers.CustomerId HAVING COUNT(*) > 10;
SELECT customers.CustomerId, customers.LastName FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'bakery' GROUP BY customers.CustomerId HAVING COUNT(*) > 10;
SELECT goods.CustomerId, COUNT(*) AS CountOfGoods FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.CustomerId HAVING CountOfGoods > 1;
SELECT goods.ReceiptNumber, COUNT(DISTINCT goods.Flavor) AS CakeTypes FROM items JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber HAVING COUNT(DISTINCT goods.Flavor) > 1 ORDER BY ReceiptNumber ASC;
SELECT goods.ReceiptNumber FROM items WHERE Item = 'Croissant' AND ReceiptNumber IN (SELECT receipts.ReceiptNumber FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id WHERE customers.LastName = 'Smith') GROUP BY goodss.ReceiptNumber HAVING COUNT(*) > 1;
SELECT goods.ReceiptNumber FROM items WHERE Item = 'croissant' AND ReceiptNumber IN (SELECT receipts.ReceiptNumber FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id WHERE customers.LastName = 'Smith') ORDER BY good.ReceiptNumber ASC;
SELECT items.ReceiptNumber, items.Item FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 15 GROUP BY items.ReceiptNumber, items.Item HAVING COUNT(*) > 1;
SELECT items.ReceiptNumber, receipts.Date, customers.LastName, customers.FirstName, items.Item FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE customers.Id = 15;
SELECT ReceiptNumber, Date, CustomerId, LastName, FirstName, Flavor, Food, Price FROM receipts JOIN items ON Receipt = ReceiptNumber JOIN goods ON Item = Id WHERE Food IN ('Pizza', 'Burger', 'Salad') ORDER BY ReceiptNumber ASC;
SELECT goods.ReceiptNumber, AVG(goods.Price), MIN(goods.Price), MAX(goods.Price)
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John' OR LastName = 'Smith') AND Date >= '2019-01-01';
SELECT ReceiptNumber FROM receipts WHERE Id IN (SELECT Item FROM items WHERE Item IN ('cake', 'cookie'));
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'LOGAN') AND EXISTS (SELECT * FROM items WHERE Item = 'Croissant' AND Receipt = ReceiptNumber)
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Logan') AND EXISTS (SELECT * FROM items WHERE Item = 'croissant' AND ReceiptNumber = receipts.ReceiptNumber);
SELECT ReceiptNumber, Date FROM receipts WHERE Id IN (SELECT Item FROM items ORDER BY Price DESC LIMIT 1);
SELECT receipts.ReceiptNumber, receipts.Date FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price = (SELECT MAX(goods.Price) FROM goods);
SELECT items.ReceiptNumber, COUNT(items.Item) AS Count FROM items GROUP BY items.ReceiptNumber ORDER BY Count ASC LIMIT 1;
SELECT items.ReceiptNumber, COUNT(items.Item) AS Count FROM items GROUP BY items.ReceiptNumber ORDER BY Count ASC LIMIT 1;
SELECT goods.ReceiptNumber, COUNT(goods.Id) AS count FROM items JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber;
SELECT goods.ReceiptNumber, COUNT(goods.Id) AS count FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food;
SELECT goods.ReceiptNumber, good.Food, AVG(goods.Price) AS AveragePrice FROM items INNER JOIN goods ON items.Item = goods.Id GROUP BY Food ORDER BY AveragePrice DESC;
SELECT goods.ReceiptNumber, AVG(goods.Price) AS avg_price FROM items JOIN goods ON items.Item = goods.Id GROUP BY goods.Food;
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.Date >= '2019-01-01' AND receipts.Date <= '2020-12-31'
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.Date >= '2019-01-01' AND receipts.Date <= '2019-12-31';
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.ReceiptNumber IN (SELECT items.Receipt FROM items WHERE items.Item = 'cake' AND items.Price > 10);
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.ReceiptNumber IN (SELECT items.ReceiptNumber FROM items WHERE items.Item = 'cake' AND items.Price > 10);
SELECT goods.ReceiptNumber, goods.Price FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price < (SELECT AVG(goods.Price) FROM goods);
SELECT goods.ReceiptNumber, goods.Price FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Price < (SELECT AVG(goods.Price) FROM goods);
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.ReceiptNumber IN (SELECT items.Item FROM items WHERE items.Ordinal = 2);
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.Date >= '2019-01-01' AND receipts.Date <= '2020-12-31'
SELECT ReceiptNumber FROM receipts WHERE EXISTS (SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 13.0 AND receipts.ReceiptNumber = items.Receipt);
SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName = 'John' AND LastName = 'Doe') INTERSECT SELECT ReceiptNumber FROM items WHERE Item IN (SELECT Id FROM goods WHERE Price > 13.0)
SELECT receipts.Date FROM receipts WHERE receipts.CustomerId IN (SELECT customers.Id FROM customers JOIN items ON customers.Id = items.Receipt AND items.Item = 'Chocolate' WHERE items.Ordinal = 1) AND receipts.ReceiptNumber IN (SELECT receipts.ReceiptNumber FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt AND items.Item = 'Chocolate' WHERE items.Ordinal = 2) AND receipts.Price > 15;
SELECT receipts.Date FROM receipts WHERE receipts.CustomerId = (SELECT customers.Id FROM customers WHERE customers.FirstName = 'John' AND customers.LastName = 'Doe') AND EXISTS (SELECT items.Item FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15.0);
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
SELECT items.ReceiptNumber FROM items WHERE items.Item IN (SELECT goods.Id FROM goods WHERE goods.Id LIKE '%APP%');
SELECT goods.ReceiptNumber, items.Item, goods.Price FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Id LIKE '%70%';
SELECT items.ReceiptNumber, items.Item, goods.Price FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Id LIKE '70%';
SELECT customers.CustomerId, customers.LastName FROM customers ORDER BY LastName ASC;
SELECT customers.CustomerId, customers.LastName FROM customers ORDER BY LastName ASC;
SELECT items.ReceiptNumber, items.Item FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 1 ORDER BY items.ReceiptNumber ASC;
SELECT items.ReceiptNumber, items.Item FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE receipts.CustomerId = 1 ORDER BY items.ReceiptNumber ASC;
SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR EXISTS(SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE Flavor = 'apple' AND Food = 'pie')
SELECT ReceiptNumber FROM receipts WHERE CustomerId = 12 OR EXISTS(SELECT * FROM items JOIN goods ON items.Item = goods.Id WHERE Flavor = 'apple' AND Food = 'pie')
SELECT receipts.ReceiptNumber, MAX(receipts.Date) FROM receipts GROUP BY receipts.ReceiptNumber;
SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MAX(Date) FROM receipts);
SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts) OR EXISTS(SELECT * FROM items JOIN goods ON items.Item=goods.Id WHERE goods.Price > 10);
SELECT ReceiptNumber FROM receipts WHERE Date = (SELECT MIN(Date) FROM receipts) OR Price > 10;
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.ReceiptNumber IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Price BETWEEN 3 AND 7);
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1 AND receipts.Date >= '2019-01-01' AND receipts.Date <= '2019-12-31'
SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id WHERE receipts.ReceiptNumber IN (SELECT MIN(receipts.ReceiptNumber) FROM receipts GROUP BY receipts.CustomerId);
SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id WHERE receipts.Date = (SELECT MIN(receipts.Date) FROM receipts);
SELECT ReceiptNumber, AVG(Price) AS AveragePrice FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE Flavor IN ('blackberry', 'blueberry') GROUP BY ReceiptNumber;
SELECT goods.ReceiptNumber, AVG(goods.Price) AS AveragePrice FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor IN ('blackberry', 'blueberry') GROUP BY ReceiptNumber;
SELECT receipts.ReceiptNumber, MIN(goods.Price) AS Price FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'cheese' GROUP BY receipts.ReceiptNumber;
SELECT goods.ReceiptNumber, items.Item, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.ReceiptNumber, receipts.Date, receipts.CustomerId, receipts.Re
SELECT goods.ReceiptNumber, good.Flavor, MAX(goods.Price), MIN(goods.Price), AVG(goods.Price)
SELECT goods.ReceiptNumber, good.Flavor, MAX(goods.Price), MIN(goods.Price), AVG(goods.Price)
SELECT goods.ReceiptNumber, MIN(goods.Price), MAX(goods.Price)
SELECT goods.ReceiptNumber, MIN(goods.Price), MAX(goods.Price)
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber ORDER BY COUNT(*) DESC LIMIT 3);
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber ORDER BY COUNT(*) DESC LIMIT 3);
SELECT customers.CustomerId, COUNT(receipts.ReceiptNumber) AS count FROM receipts INNER JOIN customers ON receipts.CustomerId = customers.Id GROUP BY receipts.CustomerId ORDER BY count DESC LIMIT 1;
SELECT customers.CustomerId, COUNT(receipts.ReceiptNumber) AS NumberOfPurchases FROM receipts INNER JOIN customer ON receipts.customerid = customer.id GROUP BY customer.id ORDER BY NumberOfPurchases DESC LIMIT 1;
SELECT Date, COUNT(DISTINCT CustomerId) FROM receipts GROUP BY Date;
SELECT receipts.Date, COUNT(*) AS Count FROM receipts GROUP BY Date ORDER BY Date ASC;
SELECT customers.CustomerId, customers.FirstName, customers.LastName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'Tart';
SELECT customers.CustomerId, customers.LastName, customers.FirstName FROM customers INNER JOIN receipts ON customers.Id = receipts.CustomerId WHERE receipts.ReceiptNumber IN (SELECT ReceiptNumber FROM items INNER JOIN goods ON items.Item = goods.Id WHERE goods.Flavor = 'apple' AND goods.Food = 'Tart') ORDER BY customers.LastName ASC;
SELECT items.ReceiptNumber FROM items WHERE items.Item = 'Cookies' AND items.Price < ANY (SELECT goods.Price FROM goods WHERE goods.Food = 'Croissant');
SELECT items.ReceiptNumber FROM items WHERE items.Item IN (SELECT goods.Id FROM goods WHERE goods.Food = 'cookie') AND items.Price < ANY (SELECT goods.Price FROM goods WHERE goods.Food = 'croissant')
SELECT items.ReceiptNumber FROM items WHERE items.Item = 'Cake' AND items.Price >= (SELECT AVG(goods.Price) FROM goods WHERE goods.Food = 'Tart');
SELECT items.ReceiptNumber FROM items WHERE items.Item = 'Tart' AND items.Price >= (SELECT AVG(goods.Price) FROM goods WHERE goods.Food = 'Cake');
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
SELECT goods.ReceiptNumber FROM receipts WHERE receipts.CustomerId = 1;
SELECT items.ReceiptNumber, goods.Flavor, goods.Food FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC;
SELECT goods.ReceiptNumber, goods.Flavor, goods.Food FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id ORDER BY goods.Price DESC;
SELECT items.ReceiptNumber, goods.Flavor FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cake' ORDER BY goods.Flavor;
SELECT items.ReceiptNumber, items.Item FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item IN (SELECT Id FROM goods WHERE Flavor LIKE 'cake') ORDER BY items.Item ASC;
SELECT items.ReceiptNumber FROM items WHERE items.Item IN (SELECT goods.Id FROM goods WHERE goods.Flavor = 'chocolate') AND items.ReceiptNumber NOT IN (SELECT receipts.ReceiptNumber FROM receipts GROUP BY receipts.ReceiptNumber HAVING COUNT(receipts.ReceiptNumber)>10);
SELECT items.ReceiptNumber, items.Item FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt WHERE items.Item IN (SELECT Id FROM goods WHERE Flavor = 'chocolate') GROUP BY ReceiptNumber HAVING COUNT(*) <= 10;
SELECT goods.ReceiptNumber FROM items WHERE Item = 'Cake' AND good.Id NOT IN (SELECT Id FROM items WHERE Item = 'Tart')
SELECT goods.ReceiptNumber FROM items WHERE items.Item = 'Tart' AND good.Id NOT IN (SELECT Id FROM goods WHERE Flavor = 'Cake')
SELECT goods.ReceiptNumber, goodss.Flavor, COUNT(goods.Id) AS Count FROM items INNER JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber ORDER BY Count DESC LIMIT 3;
SELECT goods.ReceiptNumber, goodss.Flavor, COUNT(goods.ReceiptNumber) AS Count FROM receipts INNER JOIN items ON receipts.ReceiptNumber = items.Receipt INNER JOIN goods ON items.Item = goods.Id GROUP BY ReceiptNumber ORDER BY Count DESC LIMIT 3;
SELECT customers.CustomerId FROM receipts 
SELECT customers.CustomerId FROM receipts 
SELECT customers.CustomerId FROM customers WHERE customerid IN (SELECT receipts.customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id GROUP BY receipts.customerid HAVING AVG(goods.price) > 5);
SELECT customers.CustomerId FROM receipts 
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(goods.Price) > 100);
SELECT Date FROM receipts WHERE ReceiptNumber IN (SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(goods.Price) > 100);
SELECT country.Driver_ID FROM driver WHERE country.Country = 'United States' AND age > 30
SELECT country.Driver_ID FROM driver WHERE country.Country = 'United States' AND driver.Age > 30;
SELECT driver.Driver_ID, COUNT(driver.Make) AS Count FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID WHERE driver.Points > 150 GROUP BY driver.Make;
SELECT team_driver.Driver_ID, driver.Make, COUNT(driver.Points) AS Count FROM team_driver JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE driver.Points > 150 GROUP BY driver.Make;
SELECT driver.Driver_ID, driver.Make, AVG(driver.Age) AS Average_Age FROM driver GROUP BY driver.Make;
SELECT Driver_ID, Driver, Age, Make FROM driver WHERE Driver_ID IN (SELECT Team_ID FROM team_driver) GROUP BY Make ORDER BY Make ASC;
SELECT driver.Driver_ID, AVG(driver.Laps) AS Average_Laps FROM driver WHERE driver.Age < 20 GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID, AVG(driver.Laps) AS Average_Laps FROM driver WHERE driver.Age < 20 GROUP BY driver.Driver_ID;
SELECT team.Team_ID, team.Manager, team.Sponsor FROM team ORDER BY car_owner;
SELECT team.Team_ID, team.Manager, team.Sponsor FROM team ORDER BY Car_Owner;
SELECT Team_ID FROM team WHERE Make = 'Ferrari' AND Team_ID IN (SELECT Team_ID FROM team_driver GROUP BY Team_ID HAVING COUNT(DISTINCT Driver_ID) > 1);
SELECT team.Team_ID, team.Make FROM team WHERE team.Make IN (SELECT team.Make FROM team GROUP BY team.Make HAVING COUNT(team.Make) > 1);
SELECT team.Team_ID, team.Make FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE team_car_owner = 'Buddy Arrington';
SELECT team.Team_ID, team.Make FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE team_car_owner = 'Buddy Arrington' GROUP BY team.Team_ID HAVING COUNT(*) > 1;
SELECT Driver_ID, MAX(Points), MIN(Points) FROM driver GROUP BY Driver_ID;
SELECT Driver_ID, MAX(Points) as Max_Points, MIN(Points) as Min_Points FROM driver GROUP BY Driver_ID;
SELECT country.Driver_ID FROM driver WHERE country.Country = 'United Kingdom' AND driver.Points < 150;
SELECT country.Driver_ID FROM driver WHERE country.Country = 'United States' AND driver.Points < 150;
SELECT Driver_ID, Driver FROM driver ORDER BY Age ASC;
SELECT Driver_ID, Driver FROM driver ORDER BY Age ASC;
SELECT Driver_ID, Driver FROM driver ORDER BY Points DESC;
SELECT Driver_ID FROM driver WHERE Points IS NOT NULL ORDER BY Points DESC;
SELECT driver.Driver_ID, country.Country FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID INNER JOIN team ON team_driver.Team_ID = team.Team_ID INNER JOIN country ON driver.Country = country.Country_Id;
SELECT Driver_ID, Driver, Country FROM driver;
SELECT driver.Driver_ID, MAX(driver.Points) FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital = 'Dublin' GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID, MAX(driver.Points) FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID JOIN team ON team_driver.Team_ID = team.Team_ID WHERE country.Country = 'Ireland' GROUP BY driver.Driver_ID;
SELECT Driver_ID, Driver, Age FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English') ORDER BY Age DESC;
SELECT Driver_ID, AVG(Age) AS Average_Age FROM driver WHERE Country IN (SELECT Country_Id FROM country WHERE Official_native_language = 'English') GROUP BY Driver_ID;
SELECT country.Driver_ID FROM driver WHERE Driver.Points > 150;
SELECT country.Driver_ID FROM driver WHERE Driver_ID IN (SELECT team_driver.Driver_ID FROM team_driver WHERE team_driver.Team_ID IN (SELECT team.Team_ID FROM team WHERE team.Make = 'Ferrari') AND team_driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Points > 150)) GROUP BY country.Country_Id HAVING COUNT(country.Country_Id) > 0;
SELECT country.Driver_ID, country.Capital FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID INNER JOIN country ON driver.Country = country.Country_Id WHERE driver.Points = (SELECT MAX(driver.Points) FROM driver);
SELECT country.Team_ID, team.Team, team.Make, team.Manager, team.Sponsor, team.Car_Owner, driver.Driver_ID, driver.Driver, driver.Country, driver.Age, driver.Car_#, driver.Make, driver.Points, driver.Laps, driver.Winnings FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID INNER JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE (driver.Points > ALL (SELECT driver.Points FROM driver)) AND (driver.Country = (SELECT country.Capital FROM country));
SELECT team.Driver_ID, driver.Make FROM team INNER JOIN driver ON team.Team_ID = driver.Team_ID GROUP BY team.Driver_ID;
SELECT team.Driver_ID, driver.Make FROM team INNER JOIN driver ON team.Team_ID = driver.Team_ID WHERE driver.Make = 'Mercedes' ORDER BY driver.Make ASC;
SELECT team.Driver_ID, driver.Make FROM team INNER JOIN driver ON team.Team_ID = driver.Team_ID GROUP BY team.Driver_ID ORDER BY COUNT(driver.Make) DESC LIMIT 1;
SELECT team.Driver_ID, driver.Make FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID INNER JOIN driver ON team_driver.Driver_ID = driver.Driver_ID GROUP BY team.Driver_ID ORDER BY COUNT(driver.Make) DESC LIMIT 1;
SELECT Driver_ID FROM driver WHERE Make IN (SELECT DISTINCT Make FROM team_driver GROUP BY Make HAVING COUNT(DISTINCT Team_ID) >= 3);
SELECT team.Driver_ID, driver.Make FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID INNER JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE (driver.Make IN (SELECT Make FROM driver GROUP BY Make HAVING COUNT(Make) >= 3)) ORDER BY team.Driver_ID ASC;
SELECT Team_ID FROM team WHERE NOT EXISTS (SELECT * FROM team_driver WHERE team.Team_ID = team_driver.Team_ID);
SELECT Team_ID FROM team WHERE Driver_ID NOT IN (SELECT Driver_ID FROM team_driver);
SELECT country.Driver_ID FROM driver WHERE Driver.make = 'Dodge' AND Driver.make = 'Chevrolet';
SELECT country.Driver_ID FROM driver WHERE Driver.Make = 'Dodge' AND Driver.Make = 'Chevrolet';
SELECT driver.Driver_ID, SUM(driver.Points) AS Total_Points, AVG(driver.Points) AS Average_Points FROM driver GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID, SUM(driver.Points) AS Total_Points, AVG(driver.Points) AS Average_Points FROM driver GROUP BY driver.Driver_ID;
SELECT country.Driver_ID FROM country WHERE NOT EXISTS (SELECT * FROM driver WHERE driver.Country = country.Country_Id);
SELECT country.Driver_ID FROM driver WHERE Driver_ID NOT IN (SELECT team_driver.Driver_ID FROM team_driver);
SELECT team.Team_ID, team.Manager, team.Sponsor FROM team INNER JOIN (SELECT Team_ID, COUNT(*) AS num_drivers FROM team_driver GROUP BY Team_ID ORDER BY num_drivers DESC LIMIT 1) as td ON team.Team_ID = td.Team_ID;
SELECT team.Team_ID, team.Manager, team.Sponsor FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID GROUP BY team.Team_ID HAVING COUNT(team_driver.Driver_ID) > (SELECT MAX(COUNT(driver.Driver_ID)) FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID);
SELECT team.Team_ID, team.Manager, team.Car_Owner FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE (team_driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Country IN (SELECT country.Country_Id FROM country WHERE country.Official_native_language = 'English'))) GROUP BY team.Team_ID HAVING COUNT(team_driver.Driver_ID) >= 2;
SELECT team.Team_ID, team.Manager, team.Car_owner FROM team INNER JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE (team_driver.Driver_ID IN (SELECT driver.Driver_ID FROM driver INNER JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY driver.Driver_ID HAVING COUNT(driver.Driver_ID) > 1)) ORDER BY team.Team_ID ASC;
SELECT Institution_ID FROM institution
SELECT Institution_ID FROM institution
SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY institution.Name ASC;
SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY institution.Name ASC;
SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY Founded ASC;
SELECT institution.Institution_ID, institution.Name FROM institution ORDER BY Founded ASC;
SELECT institution.Institution_ID, institution.City, institution.Province FROM institution WHERE institution.Institution_ID IN (SELECT Championship.Institution_ID FROM Championship);
SELECT institution.Institution_ID, institution.City, institution.Province FROM institution WHERE institution.Team = 'Rugby' AND institution.Founded > 1900 ORDER BY institution.Institution_ID ASC;
SELECT Institution_ID, MAX(Enrollment) AS Max_Enrollment, MIN(Enrollment) AS Min_Enrollment FROM institution GROUP BY Institution_ID;
SELECT Institution_ID, MAX(Enrollment), MIN(Enrollment) FROM institution GROUP BY Institution_ID;
SELECT institution.Nickname, affiliation.Affiliation FROM institution JOIN affiliation ON institution.Institution_ID = affiliation.Institution_ID WHERE institution.City!= 'Vancouver' ORDER BY institution.Nickname ASC;
SELECT institution.Nickname FROM institution WHERE institution.City!= 'Vancouver' AND institution.Affiliation IS NOT NULL;
SELECT institution.Institution_ID, stadium.Stadium FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID JOIN stadium ON institution.Institution_ID = stadium.Institution_ID ORDER BY Capacity DESC;
SELECT institution.Institution_ID, stadium.Stadium FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID JOIN stadium ON institution.Institution_ID = stadium.Institution_ID ORDER BY Capacity DESC;
SELECT Institution_ID, Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution);
SELECT Institution_ID, Stadium FROM institution WHERE Enrollment = (SELECT MAX(Enrollment) FROM institution);
SELECT institution.Institution_ID, institution.Name, Championship.Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID;
SELECT institution.Institution_ID, institution.Name, Championship.Nickname FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID;
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1);
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Enrollment ASC LIMIT 1);
SELECT institution.Institution_ID, institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC;
SELECT institution.Institution_ID, institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID ORDER BY Number_of_Championships DESC;
SELECT institution.Institution_ID, institution.Name FROM institution JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Number_of_Championships > 0;
SELECT institution.Institution_ID, institution.Name FROM institution INNER JOIN Championship ON institution.Institution_ID = Championship.Institution_ID WHERE Number_of_Championships > 0;
SELECT Institution_ID, SUM(Number_of_Championships) AS Total_Number_of_Championships FROM Championship WHERE Affiliation = 'Public' GROUP BY Institution_ID;
SELECT Institution_ID, SUM(Number_of_Championships) AS Total_Number_of_Championships FROM Championship GROUP BY Institution_ID HAVING Affiliation = 'Public' ORDER BY Total_Number_of_Championships DESC;
SELECT Institution_ID, Affiliation, COUNT(*) AS Number_of_Institutions FROM institution GROUP BY Institution_ID, Affiliation ORDER BY Number_of_Institutions DESC;
SELECT institution.Nickname, COUNT(institution.Affiliation) AS Affiliations FROM institution GROUP BY institution.Nickname ORDER BY Affiliations DESC;
SELECT Institution_ID, Affiliation FROM institution GROUP BY Institution_ID ORDER BY COUNT(Affiliation) DESC LIMIT 1;
SELECT Institution_ID, Affiliation FROM institution GROUP BY Institution_ID ORDER BY COUNT(Affiliation) DESC LIMIT 1;
SELECT Institution_ID FROM institution WHERE Founded IN (SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(*) > 1);
SELECT Institution_ID, COUNT(Institution_ID) AS Number_of_Institutions FROM institution GROUP BY Institution_ID HAVING COUNT(Institution_ID)>1;
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Capacity DESC);
SELECT Nickname FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution ORDER BY Capacity DESC);
SELECT institution.Institution_ID, SUM(institution.Enrollment) AS Total_Enrollment FROM institution WHERE institution.City = 'Vancouver' OR institution.City = 'Calgary' GROUP BY institution.Institution_ID;
SELECT institution.Institution_ID, enrollment
SELECT institution.Institution_ID, institution.Name, institution.Province FROM institution WHERE institution.Founded < 1920 OR institution.Founded > 1950;
SELECT Institution_ID FROM institution WHERE Founded < 1920 AND Founded > 1950;
SELECT institution.Institution_ID, institution.Province FROM institution GROUP BY Province HAVING COUNT(Province) = 1;
SELECT institution.Institution_ID, institution.Province FROM institution GROUP BY Province HAVING COUNT(*) > 1;
SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses;
SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity FROM Warehouses;
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') GROUP BY Contents HAVING COUNT(*)=1;
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') GROUP BY Contents HAVING COUNT(*) > 1;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150.0;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150;
SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
SELECT Warehouse, AVG(Value), SUM(Value) FROM Boxes GROUP BY Warehouse;
SELECT Warehouse, AVG(Value), SUM(Value)
SELECT Warehouse, AVG(Capacity), SUM(Capacity)
SELECT Warehouse, AVG(Capacity), SUM(Capacity)
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents;
SELECT Contents, AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents;
SELECT Contents FROM Boxes WHERE Code IN (SELECT Code FROM Boxes GROUP BY Code HAVING SUM(Value) = (SELECT MAX(SUM(Value)) FROM Boxes));
SELECT Contents FROM Boxes WHERE Value = (SELECT MAX(Value) FROM Boxes);
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse;
SELECT Warehouse, AVG(Value) FROM Boxes GROUP BY Warehouse;
SELECT Contents FROM Boxes WHERE Contents IS DISTINCT FROM ALL(SELECT Contents FROM Boxes);
SELECT Warehouses.Code, Warehouses.Location, Boxes.Contents FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse;
SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS DistinctContents FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS CountOfContents FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses GROUP BY Warehouses.Location HAVING COUNT(*) = 1;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses;
SELECT Boxes.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' OR Warehouses.Location = 'New York'
SELECT Boxes.Code FROM Warehouses 
SELECT Warehouses.Code, SUM(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location IN ('Chicago', 'New York') GROUP BY Warehouses.Code;
SELECT Warehouses.Code, SUM(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location IN ('Chicago', 'New York') GROUP BY Warehouses.Code;
SELECT Boxes.Contents FROM Warehouses 
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago') AND Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'New York');
SELECT Contents FROM Boxes WHERE Code NOT IN (SELECT Box.Code FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location = 'New York');
SELECT Contents FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'New York') EXCEPT SELECT DISTINCT Contents FROM Boxes;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents = 'Rocks' AND Boxes.Contents!= 'Scissors';
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents LIKE '%Rocks%' AND Boxes.Contents NOT LIKE '%Scissors%';
SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location IN 
SELECT Warehouses.Code FROM Warehouses 
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents IN ('Rocks', 'Scissors') ORDER BY Warehouses.Code ASC;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents LIKE '%Rocks%' AND Boxes.Contents LIKE '%Scissors%';
SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value;
SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value;
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value = (SELECT MIN(Boxes.Value) FROM Boxes);
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value = (SELECT MIN(Boxes.Value) FROM Boxes);
SELECT Contents FROM Boxes WHERE Value > (SELECT AVG(Value) FROM Boxes);
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT AVG(Boxes.Value) FROM Boxes);
SELECT Warehouses.Code, Warehouses.Location, Warehouses.Capacity, Boxes.Contents, Boxes.Value FROM Warehouses INNER JOIN Boxes ON Warehouses.Code = Boxes.Warehouse ORDER BY Boxes.Contents ASC;
SELECT Contents FROM Boxes WHERE Code IN (SELECT DISTINCT Box FROM Boxes GROUP BY Box HAVING COUNT(*) > 1);
SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes2.Value) FROM Boxes AS Boxes2 WHERE Boxes2.Contents = 'Rocks');
SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes2.Value) FROM Boxes AS Boxes2 WHERE Boxes2.Contents = 'Rocks');
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes2.Value) FROM Boxes AS Boxes2 WHERE Boxes2.Contents = 'Scissors');
SELECT Boxes.Code, Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes2.Value) FROM Boxes AS Boxes2 WHERE Boxes2.Contents = 'Scissors') AND Boxes.Contents!= 'Scissors';
SELECT Warehouses.Code, SUM(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1;
SELECT Warehouses.Code, SUM(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY Warehouses.Capacity DESC LIMIT 1;
SELECT Warehouses.Code, AVG(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AVG(Boxes.Value)>150;
SELECT Warehouses.Code, AVG(Boxes.Value) AS AverageValue FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AVG(Boxes.Value) > 150;
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Contents;
SELECT Contents, SUM(Value), COUNT(*) FROM Boxes GROUP BY Content;
SELECT Warehouses.Code, SUM(Warehouses.Capacity), AVG(Warehouses.Capacity), MAX(Warehouses.Capacity)
SELECT Warehouses.Code, SUM(Warehouses.Capacity), AVG(Warehouses.Capacity), MAX(Warehouses.Capacity)
SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses GROUP BY Warehouses.Code;
SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS TotalCapacity FROM Warehouses GROUP BY Warehouses.Code;
SELECT Warehouses.Code, Warehouses.Location, MAX(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code, Warehouses.Location;
SELECT Warehouses.Code, Warehouses.Location, MAX(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code, Warehouses.Location;
SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY BoxCount DESC;
SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location IN 
SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Code IN (SELECT Boxes.Warehouse FROM Boxes WHERE Boxes.Contents = 'Rocks');
SELECT Boxes.Code, Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code;
SELECT Boxes.Code, Warehouses.Location FROM Boxes INNER JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code;
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse = 1;
SELECT Boxes.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago' AND Warehouses.Code = Boxes.Warehouse;
SELECT Warehouses.Code, COUNT(Boxes.Code) AS NumBoxes FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
SELECT Warehouses.Code, COUNT(Boxes.Code) AS BoxCount FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
SELECT Warehouse, COUNT(DISTINCT Contents) AS DistinctContentsCount FROM Boxes GROUP BY Warehouse;
SELECT Warehouses.Code, COUNT(DISTINCT Boxes.Contents) AS DifferentTypesOfContents FROM Warehouses LEFT JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code;
SELECT Code FROM Warehouses WHERE Capacity > (SELECT SUM(Value) FROM Boxes WHERE Warehouse = Warehouses.Code);
SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Capacity < (SELECT COUNT(*) FROM Boxes WHERE Boxes.Warehouse = Warehouses.Code);
SELECT Boxes.Value FROM Boxes WHERE Boxes.Warehouse NOT IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location = 'Chicago');
SELECT Warehouses.Code, SUM(Boxes.Value) FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Warehouses.Location!= 'Chicago' GROUP BY Warehouses.Code;
SELECT University_ID, University_Name, City, State FROM university ORDER BY University_Name ASC;
SELECT University_ID, University_Name, City, State FROM university ORDER BY University_Name ASC;
SELECT University_ID FROM university WHERE State = 'Illinois' OR State = 'Ohio';
SELECT University_ID FROM university WHERE State = 'Illinois' OR State = 'Ohio';
SELECT University_ID, MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university GROUP BY University_ID;
SELECT University_ID, MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university GROUP BY University_ID;
SELECT University_ID, Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university);
SELECT University_ID, Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university);
SELECT University_ID, Home_Conference FROM university;
SELECT University_ID, Home_Conference FROM university GROUP BY University_ID;
SELECT University_ID, Home_Conference, COUNT(University_ID) AS num_universities FROM university GROUP BY Home_Conference ORDER BY num_universities DESC;
SELECT University_ID, COUNT(*) AS num_universities FROM university GROUP BY University_ID HAVING Home_Conference IS NOT NULL;
SELECT University_ID, State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1;
SELECT university.University_ID, university.State FROM university GROUP BY university.State ORDER BY COUNT(university.University_ID) DESC LIMIT 1;
SELECT University_ID, Home_Conference, AVG(Enrollment) AS Average_Enrollment FROM university GROUP BY Home_Conference HAVING AVG(Enrollment)>2000 ORDER BY Average_Enrollment DESC;
SELECT University_ID, Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000;
SELECT University_ID, City, State, Team_Name, Affiliation, Enrollment, Home_Conference FROM university WHERE Home_Conference = (SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING MIN(Enrollment));
SELECT University_ID, City, State, Team_Name, Affiliation, Enrollment, Home_Conference FROM university WHERE Home_Conference IN (SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM university GROUP BY Home_Conference));
SELECT Major_ID,Major_Name FROM major ORDER BY Major_Code ASC;
SELECT Major_ID, Major_Name, Major_Code FROM major ORDER BY Major_Code ASC;
SELECT major.Major_ID, major.Major_Name, major_ranking.Rank FROM major INNER JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID WHERE university.University_Name = 'Augustana College';
SELECT major.Major_ID, major.Major_Name FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID WHERE university.University_Name = 'Augustana College' ORDER BY major.Major_ID ASC;
SELECT University_ID, University_Name, City, State FROM university WHERE University_ID IN (SELECT University_ID FROM overall_ranking WHERE Rank = 1) AND Major_ID IN (SELECT Major_ID FROM major_ranking WHERE Rank = 1 AND Major_Name = 'Accounting') ORDER BY University_ID ASC;
SELECT University_ID, Major_ID FROM major_ranking WHERE Rank = 1 AND Major_Name = 'Accounting';
SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) > (SELECT MAX(COUNT(*)) FROM major_ranking);
SELECT University_ID FROM major_ranking WHERE Rank = 1 GROUP BY University_ID HAVING COUNT(*) > (SELECT MAX(COUNT(*)) FROM major_ranking);
SELECT University_ID, University_Name FROM university WHERE University_ID NOT IN (SELECT Major_ID FROM major_ranking WHERE Rank = 1);
SELECT University_ID, University_Name FROM university WHERE University_ID NOT IN (SELECT Major_ID FROM major_ranking WHERE Rank = 1);
SELECT University_ID, University_Name FROM university WHERE Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') AND Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Urban Education');
SELECT University_ID, University_Name FROM university WHERE University_ID IN (SELECT University_ID FROM major_ranking WHERE Major_ID = 1 OR Major_ID = 2);
SELECT university.University_ID, university.University_Name, overall_ranking.Rank FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE university.State = 'Wisconsin' ORDER BY overall_ranking.Rank ASC;
SELECT University_ID, University_Name, Rank FROM overall_ranking INNER JOIN university ON overall_ranking.University_ID = university.University_ID WHERE State = 'Wisconsin' ORDER BY Rank ASC;
SELECT University_ID, University_Name FROM overall_ranking WHERE Reputation_point = (SELECT MAX(Reputation_point) FROM overall_ranking);
SELECT University_ID, Reputation_point, Research_point, Citation_point, Total FROM overall_ranking ORDER BY Total DESC LIMIT 1;
SELECT University_ID, University_Name FROM overall_ranking ORDER BY Reputation_point ASC;
SELECT University_ID, University_Name FROM university ORDER BY Reputation_point ASC;
SELECT University_ID, Major_ID FROM major_ranking WHERE Rank >= 3;
SELECT University_ID, Major_ID FROM major_ranking WHERE Rank >= 3 AND Major_Name = 'Accounting';
SELECT university.University_ID, SUM(overall_ranking.Enrollment) AS Total_Enrollment FROM university INNER JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5 GROUP BY university.University_ID;
SELECT University_ID, SUM(Enrollment) AS Total_Students FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE Rank <= 5 GROUP BY University_ID;
SELECT University_ID, Reputation_point FROM overall_ranking WHERE Rank <= 3 AND Reputation_point > 0 ORDER BY Reputation_point DESC;
SELECT University_ID, Major_ID FROM major_ranking WHERE Rank = 1 ORDER BY Reputation_point DESC LIMIT 3;
SELECT University_ID FROM university WHERE State IN (SELECT State FROM university GROUP BY State HAVING COUNT(*) > 2) AND Enrollment < 3000;
SELECT University_ID FROM university WHERE Enrollment < 3000;
SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating IS NULL;
SELECT Movies.Name FROM Movies WHERE Movies.Rating IS NULL;
SELECT Movies.Name FROM Movies WHERE Movies.Rating = 'G'
SELECT Movies.Name FROM Movies WHERE Movies.Rating = 'G'
SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'
SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name = 'Odeon'
SELECT Movies.Name, MovieTheater.Name FROM Movies INNER JOIN MovieTheater ON Movies.Code = MovieTheater.Movie;
SELECT Movies.Name FROM Movies WHERE Movies.Code = MovieTheater.Movie AND MovieTheater.Name = 'Cineplex'
SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'G';
SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'G';
SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'PG' AND Movies.Title LIKE '%Star%' ORDER BY Movies.Code DESC LIMIT 1 OFFSET 2;
SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'PG' AND EXISTS(SELECT * FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code);
SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'PG' AND EXISTS(SELECT * FROM MovieTheaters WHERE MovieTheaters.Movie = Movies.Code);
SELECT Movies.Code FROM Movies WHERE Movies.Rating = 'PG' AND Movies.Title LIKE '%Star%' OR Movies.Title LIKE '%War%';
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT DISTINCT Movie FROM MovieTheaters);
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT DISTINCT Movie FROM MovieTheaters);
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Title LIKE '%Citizen%';
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Title LIKE '%Citizen%';
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG') ORDER BY Name ASC;
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G' OR Rating = 'PG')
SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial');
SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial');
SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') ORDER BY Movies.Code ASC;
SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon' AND Name = 'Imperial'
SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Code NOT IN (SELECT MovieTheaters.Movie FROM MovieTheaters WHERE MovieTheaters.Name = 'Odeon')
SELECT Movies.Name FROM Movies WHERE Movies.Code!= MovieTheater.Movie AND MovieTheater.Name = 'Odeon'
SELECT Movies.Code, Movies.Title FROM Movies ORDER BY Movies.Title ASC;
SELECT Movies.Code, Movies.Title FROM Movies ORDER BY Movies.Title ASC;
SELECT Movies.Code, Movies.Title FROM Movies ORDER BY Movies.Rating DESC;
SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie ORDER BY Movies.Rating DESC;
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM Movies GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
SELECT Movies.Code, Movies.Title FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating = 'PG' AND MovieTheaters.Name = 'Cineplex'
SELECT Name FROM MovieTheaters WHERE Code IN (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
SELECT Movies.Code, COUNT(Movies.Rating) AS Count FROM Movies GROUP BY Movies.Code ORDER BY Movies.Code ASC;
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies INNER JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating IS NOT NULL GROUP BY Movies.Code, Movies.Title, Movies.Rating ORDER BY Movies.Code ASC;
SELECT Movies.Code, COUNT(Movies.Title) FROM Movies WHERE Movies.Rating IS NOT NULL GROUP BY Movies.Code;
SELECT Code FROM Movies WHERE Rating IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE EXISTS(SELECT * FROM Movies WHERE MovieTheaters.Movie = Movies.Code);
SELECT Name FROM MovieTheaters WHERE EXISTS(SELECT * FROM Movies WHERE MovieTheaters.Movie = Movies.Code);
SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NULL;
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G');
SELECT Name FROM MovieTheaters WHERE Movie IN (SELECT Code FROM Movies WHERE Rating = 'G');
SELECT Movies.Code, Movies.Title FROM Movies;
SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating = 'PG-13' AND Movies.Movie IN (SELECT MovieTheaters.Movie FROM MovieTheaters);
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies;
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies;
SELECT MovieTheaters.Name, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating IS NULL;
SELECT MovieTheaters.Name, Movies.Title FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating IS NULL;
SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Code NOT IN (SELECT MovieTheater.Movie FROM MovieTheater);
SELECT Movies.Code, Movies.Title FROM Movies LEFT JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Movie IS NULL;
SELECT Recipient FROM Package WHERE Weight = (SELECT MAX(Weight) FROM Package);
SELECT Client.Recipient FROM Package WHERE Package.Weight = (SELECT MAX(Package.Weight) FROM Package);
SELECT Weight FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') GROUP BY Weight HAVING SUM(Weight) > 1000
SELECT Weight FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') AND Recipient!= (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong')
SELECT Employee.Recipient FROM Employee WHERE Employee.Name = 'Amy Wong' AND Employee.Position IS NOT NULL;
SELECT Employee.Recipient FROM Employee WHERE Employee.Name = 'Amy Wong' AND Employee.Position = 'Recruiter';
SELECT Employee.Sender, Employee.Recipient FROM Package WHERE Package.Contents = 'Turanga Leela' AND Package.Weight > 1000;
SELECT Employee.Sender, Employee.Recipient FROM Package WHERE Package.Contents = 'Bender' AND Package.Weight > 1000;
SELECT Employee.Sender, SUM(Package.Weight) AS TotalWeight FROM Employee JOIN Package ON Employee.EmployeeID = Package.Recipient GROUP BY Employee.Sender HAVING COUNT(*) > 1 ORDER BY TotalWeight DESC LIMIT 10;
SELECT Employee.Sender, AVG(Package.Weight) AS AverageWeight FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Package ON Package.Recipient = Has_Clearance.Level WHERE Employee.Position = 'Intern' GROUP BY Employee.Sender;
SELECT Has_Clearance.Recipient, Has_Clearance.Level FROM Has_Clearance INNER JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Name = 'Physician' AND Has_Clearance.Level > 0;
SELECT Employee.Sender, Employee.Recipient, Package.Contents, Package.Weight, Has_Clearance.Level FROM Employee INNER JOIN Package ON Employee.EmployeeID = Package.Sender INNER JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Planet = Package.Shipment WHERE Employee.Position = 'Physician' ORDER BY Employee.Name ASC;
SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong' AND Package.Sender!= 'Leo Wong';
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = 'Leo Wong';
SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong';
SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong';
SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong' OR Package.Sender = 'Leo Wong';
SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong' OR Package.Sender = 'Leo Wong';
SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 'Leo Wong' AND Package.Sender = 'Ogden Wernstrom';
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Ogden Wernstrom') AND Package.Recipient = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Leo Wong');
SELECT Package.Contents FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.Name = Employee.Name WHERE Employee.Name = 'John Zoidfarb') AND Package.Recipient = (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.Name = Employee.Name WHERE Employee.Name = 'John Zoidfarb');
SELECT Package.Contents FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'John Zoidfarb');
SELECT Package.PackageNumber, Package.Weight FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name LIKE '%John%' ORDER BY Package.Weight DESC LIMIT 1;
SELECT Package.PackageNumber, Package.Weight FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Client.Name LIKE 'John%' ORDER BY Package.Weight DESC LIMIT 1;
SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight ASC LIMIT 3;
SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight IN (SELECT MIN(Package.Weight) FROM Package);
SELECT Client.Recipient, COUNT(*) AS NumberOfPackagesSent FROM Package JOIN Client ON Package.Sender = Client.AccountNumber GROUP BY Client.Recipient ORDER BY NumberOfPackagesSent DESC LIMIT 1;
SELECT Client.Recipient, COUNT(*) AS NumberOfPackages FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Package.Sender = Client.AccountNumber GROUP BY Client.Recipient ORDER BY NumberOfPackages DESC LIMIT 1;
SELECT Client.Recipient, COUNT(*) AS NumberOfPackagesReceived FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Client.Recipient ORDER BY NumberOfPackagesReceived ASC LIMIT 1;
SELECT Package.PackageNumber, Client.Name FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber WHERE Package.Weight < 100 ORDER BY Package.PackageNumber ASC LIMIT 1;
SELECT Client.Recipient FROM Client WHERE Client.AccountNumber IN (SELECT Package.Recipient FROM Package GROUP BY Package.Recipient HAVING COUNT(Package.Recipient)>1);
SELECT Client.Recipient FROM Client WHERE EXISTS (SELECT * FROM Package WHERE Package.Recipient = Client.AccountNumber AND COUNT(Package.PackageNumber) > 1);
SELECT Planet.Contents FROM Planet WHERE Planet.Name = 'Mars'
SELECT Planet.Contents FROM Planet WHERE Planet.Name = 'Mars';
SELECT Planet.PackageNumber, Package.Contents, Package.Weight FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Shipment.Manager = 1 AND Shipment.Date > '2022-01-01'
SELECT Planet.PackageNumber, Package.Contents, Package.Weight, Package.Sender, Package.Recipient FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID WHERE Shipment.Manager = 1 AND Shipment.Date > '2022-01-01' ORDER BY Package.PackageNumber ASC;
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Phillip J. Fry');
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Phillip J Fry');
SELECT Shipment.Shipment FROM Shipment
SELECT Shipment.Shipment FROM Shipment
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT PlanetID FROM Planet WHERE Planet.Name = 'Mars')
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT PlanetID FROM Planet WHERE Planet.Name = 'Mars')
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT PlanetID FROM Planet WHERE Planet.Name = 'Mars') AND Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela');
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela') AND Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars')
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = 'Mars' OR Shipment.Manager = 'Turanga Leela'
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela') AND Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars')
SELECT Planet.PackageNumber, COUNT(*) AS TotalShipments FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PlanetID ORDER BY TotalShipments DESC;
SELECT Planet.PackageNumber, COUNT(*) AS NumberOfShipments FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PackagaeNumber;
SELECT Planet.PackageNumber FROM Shipment WHERE Shipment.Manager = 'John' AND Shipment.Date > '2022-01-01';
SELECT Planet.Recipient FROM Planet WHERE Planet.Name = 'Earth' AND Planet.Coordinates > 0 ORDER BY Planet.Coordinates DESC LIMIT 1;
SELECT Employee.Recipient, COUNT(*) AS NumShipments FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Shipment.Manager HAVING COUNT(*) > 1 ORDER BY NumShipments DESC;
SELECT Shipment.Shipment, COUNT(*) AS NumShipmentsManaged, Employee.Name FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Shipment.Shipment ORDER BY Shipment.Shipment ASC;
SELECT Package.Weight FROM Package WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Level >= 3 JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars') AND Package.Recipient IN (SELECT Client.AccountNumber FROM Client JOIN Package ON Client.AccountNumber = Package.Sender);
SELECT Weight FROM Package WHERE Shipment IN (SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars'));
SELECT Planet.PackageNumber, SUM(Package.Weight) AS TotalWeight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PlanetID ORDER BY TotalWeight DESC;
SELECT Planet.PackageNumber, SUM(Package.Weight) AS TotalWeight FROM Package INNER JOIN Shipment ON Package.Shipment = Shipment.ShipmentID INNER JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PlanetID ORDER BY TotalWeight DESC;
SELECT Planet.PackageNumber FROM Planet WHERE Planet.Name = 'Earth' AND Package.Weight > 30;
SELECT Planet.PackageNumber FROM Package WHERE Package.Weight > 30;
SELECT Package.PackageNumber FROM Package WHERE Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8') AND Package.Sender IN (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.AccountNumber = Employee.EmployeeID WHERE Employee.Name = 'Zapp Brannigan');
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = 'Zapp Brannigan' AND Package.Shipment IN (SELECT ShipmentID FROM Shipment WHERE Shipment.Planet = 'Omicron Persei 8');
SELECT Package.PackageNumber FROM Package WHERE Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8') OR Package.Sender IN (SELECT Client.AccountNumber FROM Client JOIN Employee ON Client.AccountNumber = Employee.EmployeeID WHERE Employee.Name = 'Zapp Brannigan')
SELECT Shipment.Shipment, COUNT(*) AS NumberOfPackages FROM Shipment JOIN Package ON Shipment.Shipment = Package.Shipment WHERE Shipment.Planet = 'Omicron Persei 8' OR Package.Sender = 'Zapp Brannigan' GROUP BY Shipment.Shipment;
SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30;
SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30;
SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance WHERE Has_Clearance.Level = 'Mars' AND Has_Clearance.Employee NOT IN (SELECT Has_Clearance.Employee FROM Has_Clearance WHERE Has_Clearance.Level = 'Mars')) ORDER BY Employee.Recipient ASC;
SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance WHERE Has_Clearance.Level = 'Mars' AND Has_Clearance.Employee!= Has_Clearance.Recipient);
SELECT Employee.Recipient FROM Has_Clearance WHERE Planet = 'Omega III'
SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Omega III') AND Employee.Position!= 'CEO' ORDER BY Employee.Recipient ASC;
SELECT Planet.PackageNumber FROM Package WHERE Package.PackageNumber = '1'
SELECT Planet.PackageNumber FROM Package WHERE Package.PackageNumber = '1' AND Package.Sender = '2'
SELECT Employee.Recipient FROM Package WHERE Package.Weight > 10 AND Package.Sender = 'A1234'
SELECT Employee.Recipient FROM Employee WHERE Employee.Salary BETWEEN 5000 AND 10000;
SELECT Employee.Recipient FROM Package WHERE Package.Weight > 100 AND Package.Sender = 'A' OR Package.Recipient = 'B';
SELECT Employee.Recipient FROM Package WHERE Package.Sender = 'AccountNumber' AND Package.Recipient = 'AccountNumber';
SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID IN (SELECT Has_Clearance.Employee FROM Has_Clearance WHERE Has_Clearance.Level = 'Mars' AND Has_Clearance.Employee!= Has_Clearance.Recipient);
SELECT Employee.Recipient FROM Employee WHERE Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Level > 0 AND Has_Clearance.Planet = 'Mars' GROUP BY Employee.Recipient HAVING COUNT(*)=0;
SELECT Game_ID FROM game
SELECT Game_ID FROM game WHERE Units_sold_Millions > 1000
SELECT game.Game_ID, ga.me.Title, ga.me.Developers FROM game ga.me ORDER BY ga.me.Units_sold_Millions DESC;
SELECT game.Game_ID, ga.me.Title, ga.me.Developers FROM game ga.me ORDER BY ga.me.Units_sold_Millions DESC;
SELECT Game_ID, AVG(Units_sold_Millions) AS Average_units_sold_in_millions
SELECT platform.Player_ID, AVG(game.Units_sold_Millions) AS Average_units_sold
SELECT platform.Player_ID, platform.Market_district FROM platform;
SELECT platform.Player_ID, platform.Platform_name, platform.Market_district FROM platform;
SELECT platform.Player_ID, plattform.Platform_name FROM platform WHERE Platform.Download_rank = 1;
SELECT platform.Player_ID, plarform.Platform_name FROM platform WHERE Platform.Download_rank = 1;
SELECT Player_ID, MAX(Rank_of_the_year) AS Max_Rank, MIN(Rank_of_the_year) AS Min_Rank FROM player GROUP BY Player_ID;
SELECT Player_ID, MAX(Rank_of_the_year) AS Max_Rank, MIN(Rank_of_the_year) AS Min_Rank FROM player GROUP BY Player_ID;
SELECT Player_ID FROM player WHERE Rank_of_the_year < 3;
SELECT Player_ID FROM player WHERE Rank_of_the_year <= 3;
SELECT Player_ID, Player_name FROM player ORDER BY Player_name ASC;
SELECT Player_ID, Player_name FROM player ORDER BY Player_name ASC;
SELECT player.Player_ID, player.Player_name, player.College FROM player WHERE player.Rank_of_the_year > 0 ORDER BY Rank_of_the_year DESC;
SELECT player.Player_ID, player.Player_name, player.College FROM player INNER JOIN game_player ON player.Player_ID = game_player.Player_ID WHERE game_player.If_active = 1 ORDER BY player.Rank_of_the_year DESC;
SELECT player.Player_ID, plater.Rank_of_the_year FROM player AS plater JOIN game_player AS gp ON plater.Player_ID = gp.Player_ID JOIN game AS g ON gp.Game_ID = g.Game_ID WHERE g.Title = 'Super Mario World';
SELECT player.Player_ID, plater.Rank_of_the_year FROM player AS plater JOIN game_player AS gp ON plater.Player_ID = gp.Player_ID WHERE gp.Game_ID IN (SELECT Game_ID FROM game WHERE Title = 'Super Mario World') ORDER BY Rank_of_the_year DESC;
SELECT game.Game_ID, game.Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID IN (SELECT Player_ID FROM player WHERE College = 'Auburn') GROUP BY game.Developers HAVING COUNT(game.Developers) > 1;
SELECT game.Game_ID, game.Title, game.Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College = 'Auburn' GROUP BY game.Game_ID, game.Title, game.Developers HAVING COUNT(*) > 1;
SELECT Game_ID, AVG(Units_sold_Millions) AS Average_units_sold
SELECT Game_ID, AVG(Units_sold_Millions) AS Average_units_sold_in_millions
SELECT game.Game_ID, ga.me.Title, pl.form_name FROM game AS ga.me INNER JOIN platform as pl ON ga.me.Platform_ID = pl.Platform_ID;
SELECT game.Game_ID, game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID;
SELECT game.Game_ID, game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA');
SELECT game.Game_ID, game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district IN ('Asia', 'USA');
SELECT game.Game_ID, gaem.Title, gaem.Release_Date, gaem.Franchise, gaem.Developers, gaem.Platform_ID, gaem.Units_sold_Millions, pla.Player_ID, pla.Rank_of_the_year, pla.Player_name, pla.Position, pla.College FROM game AS gaem INNER JOIN player AS pla ON gaem.Platform_ID = pla.Platform_ID WHERE gaem.Platform_ID = 1 AND gaem.Platform_ID = 2 AND gaem.Platform_ID = 3 AND gaem.Platform_ID = 4 AND gaem.Platform_ID = 5 AND gaem.Platform_ID = 6 AND gaem.Platform_ID = 7 AND gaem.Platform_ID = 8 AND gaem.Platform_ID = 9 AND gaem.Platform_ID = 10 AND gaem.Platform_ID = 11 AND gaem.Platform_ID = 12 AND gaem.Platform_ID = 13 AND gaem.Platform_ID = 14 AND gaem.Platform_ID =
SELECT Game_ID, COUNT(Game_ID) AS Count FROM game GROUP BY Franchise;
SELECT Game_ID FROM game WHERE Franchise = 'Mario' AND Units_sold_Millions > 1000;
SELECT Game_ID, Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1;
SELECT game.Game_ID, game.Title, game.Release_Date, game.Franchise, game.Developers, game.Platform_ID, game.Units_sold_Millions FROM game WHERE game.Franchise IN (SELECT DISTINCT game.Franchise FROM game GROUP BY game.Franchise HAVING COUNT(game.Franchise) >= 2);
SELECT Game_ID, Title, Release_Date, Franchise, Developers, Platform_ID, Units_sold_Millions FROM game WHERE Franchise IN (SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(Franchise) >= 2);
SELECT Player_ID, Player_name FROM player WHERE NOT EXISTS (SELECT * FROM game_player WHERE game_player.Player_ID = player.Player_ID);
SELECT Player_ID, Player_name FROM player WHERE NOT EXISTS (SELECT * FROM game_player WHERE game_player.Player_ID = player.Player_ID);
SELECT game.Game_ID, game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College IN ('Oklahoma', 'Auburn') GROUP BY game.Game_ID HAVING COUNT(DISTINCT player.Player_ID) > 1;
SELECT game.Game_ID, game.Title FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College IN ('Oklahoma', 'Auburn') GROUP BY game.Game_ID HAVING COUNT(*) > 1
SELECT game.Game_ID, game.Title, game.Release_Date, game.Franchise, game.Developers, game.Platform_ID, game.Units_sold_Millions, platform.Platform_ID, platform.Platform_name, platform.Market_district, platform.Download_rank FROM game INNER JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE game.Franchise IS NOT NULL ORDER BY game.Franchise ASC
SELECT game.Game_ID, game.Title, game.Release_Date, game.Franchise, game.Developers, game.Platform_ID, game.Units_sold_Millions FROM game WHERE game.Franchise IS NOT NULL
SELECT game.Game_ID, game.Title FROM game LEFT JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID IS NULL AND game_player.Position = 'Guard';
SELECT game.Game_ID, game.Title FROM game LEFT JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID IS NULL AND game_player.Position = 'Guard';
SELECT press.Press_ID, press.Name FROM press ORDER BY Year_Profits DESC;
SELECT press.Press_ID, press.Name FROM press ORDER BY Year_Profits_billion DESC;
SELECT press.Press_ID, press.Name FROM press WHERE (press.Month_Profits_billion > 1 OR press.Year_Profits_billion > 15) ORDER BY press.Press_ID ASC;
SELECT Press_ID FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1;
SELECT Press_ID, AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM press GROUP BY Press_ID;
SELECT Press_ID, AVG(Year_Profits_billion) AS Average_Yearly_Profit, MAX(Year_Profits_billion) AS Maximum_Yearly_Profit FROM press GROUP BY Press_ID;
SELECT press.Press_ID, press.Name FROM press WHERE press.Month_Profits_billion = (SELECT MAX(press.Month_Profits_billion) FROM press);
SELECT press.Press_ID, press.Name FROM press WHERE press.Month_Profits_billion = (SELECT MAX(press.Month_Profits_billion) FROM press);
SELECT press.Press_ID, press.Name FROM press WHERE press.Month_Profits_billion = (SELECT MAX(press.Month_Profits_billion) FROM press);
SELECT Press_ID FROM press WHERE Month_Profits_billion = (SELECT MAX(Month_Profits_billion) FROM press) OR Month_Profits_billion = (SELECT MIN(Month_Profits_billion) FROM press);
SELECT Author_ID FROM author WHERE Age < 30;
SELECT Author_ID FROM author WHERE Age < 30;
SELECT Author_ID, Gender, AVG(Age) AS Average_Age FROM author GROUP BY Gender;
SELECT Author_ID, Name, Age, Gender FROM author;
SELECT Author_ID, Gender, COUNT(*) AS Count FROM author WHERE Age > 30 GROUP BY Gender;
SELECT Author_ID, Gender, COUNT(*) AS Count FROM author WHERE Age > 30 GROUP BY Gender;
SELECT Title FROM book WHERE Release_date = (SELECT MAX(Release_date) FROM book);
SELECT Title FROM book WHERE Release_date IS NOT NULL ORDER BY Release_date DESC;
SELECT Book_Series, COUNT(*) AS num_books FROM book GROUP BY Book_Series;
SELECT Book_Series, COUNT(*) AS Count FROM book GROUP BY Book_Series;
SELECT book.Title, book.Release_date FROM book WHERE book.Sale_Amount = (SELECT MAX(book.Sale_Amount) FROM book);
SELECT book.Title, book.Release_date FROM book WHERE book.Sale_Amount = (SELECT MAX(book.Sale_Amount) FROM book) LIMIT 5;
SELECT Book_Series FROM book WHERE Sale_Amount > '1000' AND Sale_Amount < '500'
SELECT Book_Series FROM book WHERE Sale_Amount > 1000 OR Sale_Amount < 500;
SELECT author.Author_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_Series IN ('MM', 'LT') GROUP BY author.Author_ID HAVING COUNT(DISTINCT book.Book_Series) > 1;
SELECT Author_ID FROM book WHERE Book_Series IN ('MM', 'LT') GROUP BY Author_ID HAVING COUNT(DISTINCT Book_Series) = 2;
SELECT author.Author_ID, author.Name, author.Age FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IS NULL;
SELECT author.Author_ID, author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IS NULL;
SELECT author.Author_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) > 1;
SELECT author.Author_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID HAVING COUNT(book.Book_ID) > 1;
SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3;
SELECT book.Title, author.Name, press.Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY Sale_Amount DESC LIMIT 3;
SELECT press.Press_ID, press.Name, SUM(book.Sale_Amount) AS Total_Book_Sales FROM author JOIN book ON author.Author_ID = book.Author_ID JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Press_ID;
SELECT press.Press_ID, SUM(book.Sale_Amount) AS Total_Book_Sales FROM author JOIN book ON author.Author_ID = book.Author_ID JOIN press ON book.Press_ID = press.Press_ID GROUP BY press.Press_ID;
SELECT Press_ID, Name, COUNT(*) AS Book_Count FROM book GROUP BY Press_ID HAVING Sale_Amount > '1000' ORDER BY Press_ID ASC;
SELECT press.Press_ID, press.Name, COUNT(*) AS num_books FROM book JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount > 1000 GROUP BY press.Press_ID;
SELECT Author_ID FROM book WHERE Sale_Amount = (SELECT MAX(Sale_Amount) FROM book);
SELECT Author_ID FROM author WHERE Name = 'J.K. Rowling' AND Age = 54 AND Gender = 'Female'
SELECT author.Author_ID, author.Name, author.Gender FROM author INNER JOIN book ON author.Author_ID = book.Author_ID WHERE book.Book_ID IN (SELECT Book_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1) ORDER BY author.Author_ID ASC;
SELECT Author_ID, Name, Gender FROM author WHERE Author_ID IN (SELECT Author_ID FROM book GROUP BY Author_ID ORDER BY COUNT(*) DESC LIMIT 1);
SELECT author.Author_ID, author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Press_ID IS NULL AND author.Gender = 'Male' ORDER BY author.Age DESC;
SELECT author.Author_ID, author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Press_ID IS NULL AND author.Gender = 'Male' ORDER BY author.Age DESC;
SELECT press.Press_ID, press.Name, press.Year_Profits_billion FROM book JOIN press ON book.Press_ID = press.Press_ID GROUP BY Press_ID HAVING COUNT(*) > 2;
SELECT press.Press_ID, press.Name, press.Year_Profits_billion FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID WHERE book.Sale_Amount > 2 GROUP BY press.Press_ID HAVING COUNT(book.Book_ID) > 1 ORDER BY press.Year_Profits_billion DESC;
SELECT Authors.other_details FROM Authors
SELECT Authors.other_details FROM Authors
SELECT Authors.other_details FROM Authors
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik';
SELECT document_id FROM Documents
SELECT Authors.other_details FROM Documents_Processes 
SELECT Authors.other_details FROM Documents_Processes 
SELECT document_id FROM Documents WHERE author_name = 'Era Kerluke';
SELECT document_id, author_name, document_name, document_description FROM Documents;
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings';
SELECT Authors.other_details FROM Documents_Processes
SELECT Authors.other_details, COUNT(DISTINCT Documents.document_id) AS num_docs FROM Authors JOIN Documents ON Authors.author_name = Documents.author_name GROUP BY Author.name ORDER BY num_docs DESC;
SELECT document_id FROM Documents WHERE author_name = 'John Doe' AND document_name LIKE '%Report%';
SELECT document_id FROM Documents WHERE author_name IN (SELECT author_name FROM Documents GROUP BY author_name HAVING COUNT(*) >= 2);
SELECT Business_Processes.process_id FROM Business_Processes
SELECT Business_Processes.process_id, Business_Processes.next_process_id, Business_Processes.process_name, Business_Processes.process_description FROM Business_Processes WHERE Business_Processes.process_id = 9;
SELECT process_id FROM Business_Processes WHERE process_id = 9;
SELECT process_id, COUNT(process_outcome_code) AS num_of_process_outcomes FROM Documents_Processes GROUP BY process_id;
SELECT process_id, process_outcome_code, process_outcome_description FROM Business_Processes JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code;
SELECT process_id, process_outcome_code, process_outcome_description FROM Business_Processes JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id JOIN Process_Outcomes ON Documents_Processes.process_outcome_code = Process_Outcomes.process_outcome_code WHERE process_outcome_code = 'working' ORDER BY process_id ASC;
SELECT process_id, COUNT(process_status_code) AS num_processes FROM Documents_Processes GROUP BY process_id;
SELECT process_id, process_status_code, process_status_description FROM Business_Processes INNER JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id INNER JOIN Process_Status ON Documents_Processes.process_status_code = Process_Status.process_status_code;
SELECT process_id, process_status_description FROM Business_Processes JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id WHERE process_status_code = 'ct' AND document_id IN (SELECT document_id FROM Documents WHERE author_name = 'John Smith') ORDER BY process_id ASC;
SELECT Staff.staff_id, COUNT(*) AS num_staff
SELECT staff_id, staff_details FROM Staff;
SELECT staff_id, staff_details FROM Staff WHERE staff_id = 100;
SELECT Ref_Staff_Roles.staff_role_code, COUNT(*) AS num_staff_roles FROM Staff_in_Processes INNER JOIN Ref_Staff_Roles ON Staff_in_Processes.staff_role_code = Ref_Staff_Roles.staff_role_code GROUP BY Ref_Staff_Roles.staff_role_code ORDER BY num_staff_roles DESC;
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles;
SELECT Ref_Staff_Roles.staff_role_code, Ref_Staff_Roles.staff_role_description FROM Staff_in_Processes INNER JOIN Ref_Staff_Roles ON Staff_in_Processes.staff_role_code = Ref_Staff_Roles.staff_role_code WHERE Staff_in_Processes.staff_id = 1 AND Staff_in_Processes.date_from <= '2022-01-31' AND Staff_in_Processes.date_to >= '2022-01-31'
SELECT document_id FROM Documents_Processes WHERE process_id IS NOT NULL;
SELECT process_id FROM Documents_Processes WHERE document_id IN (SELECT document_id FROM Documents);
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes);
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT DISTINCT process_id FROM Documents_Processes);
SELECT process_id, process_outcome_code, process_status_code FROM Documents_Processes WHERE document_id = 0;
SELECT process_id FROM Business_Processes WHERE process_name = 'Travel to Brazil';
SELECT process_id, COUNT(document_id) FROM Documents_Processes GROUP BY process_id;
SELECT staff_id FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9;
SELECT staff_id, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_id;
SELECT staff_role_code, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_role_code ORDER BY num_processes DESC;
SELECT staff_role_code FROM Staff_in_Processes WHERE staff_id = 3 GROUP BY staff_role_code HAVING COUNT(*) > 1;
SELECT Agencies.staff_id FROM Agencies WHERE Agencies.agency_id = Staff.agency_id;
SELECT Agencies.staff_id FROM Agencies WHERE Agencies.agency_id = Staff.agency_id;
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id;
SELECT Clients.meeting_id, COUNT(Clients.meeting_id) AS num_clients FROM Clients GROUP BY Clients.meeting_id HAVING num_clients > 2;
SELECT Clients.meeting_id FROM Clients WHERE Clients.client_id = Meetings.client_id AND Meetings.meeting_id IS NOT NULL;
SELECT Clients.meeting_id, Clients.client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id;
SELECT Clients.meeting_id, Clients.client_id, Clients.client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id;
SELECT Agencies.staff_id, COUNT(Clients.client_id) AS num_clients FROM Clients JOIN Staff ON Clients.agency_id = Staff.agency_id GROUP BY Agencies.staff_id;
SELECT Agencies.staff_id, COUNT(Clients.client_id) AS num_clients FROM Clients JOIN Staff ON Clients.agency_id = Staff.agency_id GROUP BY Agencies.staff_id;
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Clients ON Staff.staff_id = Clients.client_id GROUP BY Agencies.agency_id HAVING COUNT(Clients.client_id) > 0 ORDER BY COUNT(Clients.client_id) DESC LIMIT 1;
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id WHERE (Staff.staff_id IN (SELECT Staff.staff_id FROM Staff INNER JOIN Meetings ON Staff.staff_id = Meetings.staff_id GROUP BY Staff.staff_id HAVING COUNT(Meetings.meeting_id) > 0)) ORDER BY Agencies.agency_details ASC;
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Clients ON Staff.staff_id = Clients.client_id WHERE Clients.sic_code LIKE 'A%' OR Clients.sic_code LIKE 'B%';
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Clients ON Staff.staff_id = Clients.client_id GROUP BY Clients.client_id HAVING COUNT(Clients.client_id) >= 2;
SELECT Agencies.staff_id FROM Clients WHERE Clients.client_details = 'Mac' AND Clients.agency_id = Agencies.agency_id;
SELECT Agencies.staff_id FROM Clients WHERE Clients.client_details = 'Mac' AND Clients.agency_id = Agencies.agency_id;
SELECT Clients.staff_id, Staff.staff_details FROM Clients INNER JOIN Staff ON Clients.agency_id = Staff.agency_id;
SELECT Clients.staff_id, Staff.staff_details FROM Clients INNER JOIN Staff ON Clients.agency_id = Staff.agency_id;
SELECT Staff.staff_id, Staff.agency_id, Staff.staff_details, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id WHERE Agencies.agency_id = 2;
SELECT Clients.staff_id, COUNT(Clients.sic_code) AS num_clients FROM Clients GROUP BY Clients.sic_code;
SELECT Clients.meeting_id, Clients.client_id, Clients.sic_code, Clients.client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id WHERE Sic_code = 'Bad' AND Meeting_outcome = 'Good';
SELECT Clients.staff_id, Staff.staff_details FROM Clients INNER JOIN Staff ON Clients.agency_id = Staff.agency_id WHERE Clients.sic_code = 'Bad' AND Clients.client_details LIKE '%idea%';
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Clients ON Staff.agency_id = Clients.agency_id WHERE Clients.client_id IS NOT NULL;
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Clients ON Staff.staff_id = Clients.client_id WHERE Clients.sic_code = '12345' AND Clients.client_details LIKE '%ABC%';
SELECT Agencies.staff_id FROM Staff WHERE Clients.client_id IS NULL;
SELECT Agencies.staff_id FROM Staff WHERE Staff.agency_id = Agencies.agency_id AND Clients.agency_id IS NULL;
SELECT Invoices.meeting_id FROM Meetings WHERE MeetingOutcome = 'Successful' AND BillableYN = 'Y';
SELECT Invoices.meeting_id FROM Invoices WHERE InvoiceStatus = 'Paid' AND ClientID IN (SELECT Clients.ClientID FROM Clients INNER JOIN Staff_In_Meetings ON Clients.ClientID = Staff_In_Meetings.ClientID WHERE Staff_In_Meetings.StaffID IN (SELECT Staff.StaffID FROM Staff INNER JOIN Agencies ON Staff.AgencyID = Agencies.AgencyID WHERE Agencies.AgencyDetails LIKE '%Agency%')) GROUP BY InvoiceID HAVING COUNT(*) > 0;
SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Invoices ON Clients.client_id = Invoices.client_id;
SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Meetings INNER JOIN Payments ON Meetings.meeting_id = Payments.payment_id INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
SELECT Clients.meeting_id, COUNT(*) AS num_invoices FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id GROUP BY Clients.meeting_id;
SELECT Invoices.meeting_id, COUNT(*) AS num_invoices FROM Invoices GROUP BY Invoice.id;
SELECT Clients.meeting_id, Clients.client_details FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id WHERE Meetings.billable_yn = 'Y' AND Meetings.start_date_time >= '2019-01-01 00:00:00' AND Meetings.end_date_time <= '2020-12-31 23:59:59';
SELECT Clients.meeting_id, Clients.client_details FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id WHERE Meetings.billable_yn = 'Y' AND Meetings.start_date_time >= '2019-01-01 00:00:00' AND Meetings.end_date_time <= '2020-12-31 23:59:59';
SELECT Clients.meeting_id FROM Meetings WHERE Meeting.meeting_outcome = 'Successful' AND Meeting.billable_yn = 'Y';
SELECT Clients.meeting_id FROM Meetings WHERE Meeting.meeting_outcome = 'Successful' AND Meeting.billable_yn = 'Y';
SELECT Invoices.meeting_id, Invoices.invoice_status, COUNT(*) AS num_invoices FROM Meetings INNER JOIN Invoices ON Meetings.client_id = Invoices.client_id GROUP BY Invoice_status ORDER BY Invoice_status ASC;
SELECT Invoices.meeting_id, COUNT(*) AS num_invoices FROM Invoices GROUP BY InvoiceStatus;
SELECT Invoices.meeting_id, COUNT(*) AS count FROM Invoices INNER JOIN Meetings ON Invoices.client_id = Meetings.client_id GROUP BY InvoiceStatus ORDER BY count DESC LIMIT 1;
SELECT Invoices.meeting_id, InvoiceStatus.invoice_status FROM Invoices INNER JOIN Payments ON Invoices.invoice_id = Payments.invoice_id INNER JOIN Meetings ON Invoices.client_id = Meetings.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id INNER JOIN InvoiceStatus ON Invoices.invoice_status = InvoiceStatus.invoice_status GROUP BY InvoiceStatus.invoice_status ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Invoices.meeting_id, Clients.client_id, Agencies.agency_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices INNER JOIN Clients ON Invoices.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id;
SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details, Clients.client_id, Clients.client_details, Agencies.agency_id, Agencies.agency_details FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Payments ON Meetings.meeting_id = Payments.payment_id INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE Meetings.billable_yn = 'Y' AND Meetings.start_date_time >= '2022-01-01 00:00:00' AND Meetings.end_date_time <= '2022-12-31 23:59:59';
SELECT meeting_id, meeting_type, purpose_of_meeting FROM Meetings;
SELECT meeting_id, meeting_type, purpose_of_meeting, other_details FROM Meetings;
SELECT meeting_id, meeting_outcome, purpose_of_meeting FROM Meetings;
SELECT meeting_id, meeting_outcome, purpose_of_meeting FROM Meetings;
SELECT Payments.meeting_id, Payments.payment_details FROM Payments WHERE Invoices.invoice_status = 'Working';
SELECT Payments.meeting_id, Payments.payment_details FROM Payments WHERE Invoices.invoice_status = 'Working';
SELECT Invoices.meeting_id, Invoices.invoice_status FROM Meetings INNER JOIN Payments ON Meetings.meeting_id = Payments.payment_id WHERE Payments.payment_id IS NULL;
SELECT Invoices.meeting_id, Invoices.invoice_status FROM Meetings INNER JOIN Payments ON Meetings.meeting_id = Payments.payment_id WHERE Payments.payment_id IS NULL;
SELECT Payments.meeting_id, COUNT(Payments.payment_id) AS payment_count FROM Payments GROUP BY Payments.meeting_id;
SELECT Payments.meeting_id, COUNT(Payments.payment_id) AS payment_count FROM Payments GROUP BY Payments.meeting_id;
SELECT Payments.meeting_id, Payments.payment_id, Invoices.invoice_id, Invoices.invoice_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
SELECT Payments.meeting_id, Payments.invoice_id, Payments.payment_details FROM Payments;
SELECT Payments.meeting_id, Payments.invoice_id, Payments.payment_details FROM Payments WHERE Payments.invoice_id = Invoices.invoice_id AND Payments.payment_details = 'Paid' ORDER BY Payments.meeting_id ASC;
SELECT Invoices.meeting_id, InvoiceStatuses.invoice_status FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id INNER JOIN InvoiceStatuses ON Invoices.invoice_status = InvoiceStatuses.invoice_status;
SELECT Payments.meeting_id, COUNT(Payments.payment_id) AS num_payments FROM Payments GROUP BY Payments.meeting_id;
SELECT Payments.meeting_id, COUNT(Payments.payment_id) AS payment_count FROM Payments GROUP BY Payments.meeting_id;
SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Payments.payment_id IN (SELECT MAX(Payments.payment_id) FROM Payments GROUP BY Payments.invoice_id);
SELECT Invoices.meeting_id, Invoices.invoice_status, Invoices.invoice_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Payments.payment_id IN (SELECT MAX(Payments.payment_id) FROM Payments GROUP BY Payments.invoice_id);
SELECT Staff.staff_id FROM Staff
SELECT Staff.staff_id, COUNT(*) AS num_staff FROM Staff GROUP BY Staff.staff_id;
SELECT Agencies.staff_id, COUNT(*) FROM Staff GROUP BY Agencies.agency_id;
SELECT Agencies.staff_id, COUNT(*) AS num_staff FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id GROUP BY Agencies.staff_id;
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Agencies.agency_id) DESC LIMIT 1;
SELECT Agencies.staff_id, Agencies.agency_details FROM Staff INNER JOIN Agencies ON Staff.agency_id = Agencies.agency_id GROUP BY Agencies.agency_id ORDER BY COUNT(Agencies.agency_id) DESC LIMIT 1;
SELECT meeting_id, meeting_outcome, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_outcome ORDER BY meeting_outcome ASC;
SELECT meeting_id, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_outcome;
SELECT Clients.meeting_id, COUNT(*) AS num_meetings FROM Meetings JOIN Clients ON Meetings.client_id = Clients.client_id GROUP BY Clients.meeting_id;
SELECT meeting_id, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_id;
SELECT meeting_id, meeting_type FROM Meetings;
SELECT meeting_id, COUNT(*) AS num_meetings FROM Meetings GROUP BY meeting_type;
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id;
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id;
SELECT meeting_id, COUNT(staff_id) AS num_staff FROM Staff_in_Meetings GROUP BY meeting_id;
SELECT meeting_id, COUNT(staff_id) AS num_staff FROM Staff_in_Meetings GROUP BY meeting_id;
SELECT Staff.staff_id, COUNT(Meetings.meeting_id) AS num_meetings_attended FROM Meetings JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id GROUP BY Staff.staff_id HAVING COUNT(Meetings.meeting_id) > 0 ORDER BY num_meetings_attended ASC LIMIT 1;
SELECT staff_id FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = (SELECT MIN(COUNT(*)) FROM Staff_in_Meetings));
SELECT Staff.staff_id FROM Meetings 
SELECT Staff.staff_id FROM Staff 
SELECT Staff.staff_id FROM Staff WHERE Staff.staff_id NOT IN (SELECT Staff_in_Meetings.staff_id FROM Staff_in_Meetings);
SELECT Staff.staff_id, COUNT(*) AS num_meetings FROM Staff LEFT JOIN Meetings ON Staff.staff_id = Meetings.staff_id WHERE Meetings.meeting_id IS NULL GROUP BY Staff.staff_id HAVING num_meetings=0;
SELECT Clients.meeting_id, Clients.client_details FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id UNION SELECT Invoices.invoice_id, Invoices.client_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id INNER JOIN Clients ON Invoices.client_id = Clients.client_id;
SELECT Clients.meeting_id, Clients.client_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id UNION SELECT Invoices.invoice_id, Invoices.client_details FROM Payments INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id;
SELECT Staff.staff_id, Staff.staff_details FROM Staff INNER JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff_in_Meetings.meeting_id IN (SELECT meeting_id FROM Meetings WHERE billable_yn='Y') AND Staff.staff_details LIKE '%s%';
SELECT Staff.staff_id, Staff.staff_details FROM Staff INNER JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id WHERE Staff_in_Meetings.meeting_id IN (SELECT Meetings.meeting_id FROM Meetings WHERE Meetings.billable_yn='Y') AND Staff.staff_details LIKE '%s%';
SELECT Clients.meeting_id, Clients.sic_code, Agencies.agency_id FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE (Clients.invoice_id IS NOT NULL AND COUNT(Meetings.meeting_id) = 1);
SELECT Clients.meeting_id, Clients.sic_code, Agencies.agency_id FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Payments ON Clients.invoice_id = Payments.invoice_id INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id WHERE (Clients.client_id IN (SELECT Clients.client_id FROM Meetings INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Payments ON Clients.invoice_id = Payments.invoice_id INNER JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id INNER JOIN Agencies ON Clients.agency_id = Agencies.agency_id GROUP BY Clients.client_id HAVING COUNT(*)=1)) AND (Clients.client_id IN (SELECT Clients.client_id FROM Meetings INNER JOIN Staff
SELECT Meetings.meeting_id, Meetings.start_date_time, Meetings.end_date_time, Clients.client_details, Staff.staff_details FROM Meetings INNER JOIN Clients ON Meetings.client_id = Clients.client_id INNER JOIN Staff_in_Meetings ON Meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Staff ON Staff_in_Meetings.staff_id = Staff.staff_id;
SELECT meeting_id, start_date_time, end_date_time, client.client_details, staff.staff_details FROM Meetings AS meetings INNER JOIN Staff_in_Meetings ON meetings.meeting_id = Staff_in_Meetings.meeting_id INNER JOIN Clients AS clients ON meetings.client_id = clients.client_id INNER JOIN Staff AS staff ON Staff_in_Meetings.staff_id = staff.staff_id;
