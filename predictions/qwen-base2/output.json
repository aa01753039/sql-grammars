[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": "How many clubs are there?",
    "answer": "SELECT BY"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": "Count the number of clubs.",
    "answer": "SELECT COUNT(*) FROM club_info.ardi"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": "List the name of clubs in ascending alphabetical order.",
    "answer": "SELECT Club_name FROM club_table.sort_by_club_id ORDER BY Name ASC;"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered alphabetically?",
    "answer": "SELECT AECAP"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": "What are the managers and captains of clubs?",
    "answer": "SELECT FIVE"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": "Return the managers and captains of all clubs.",
    "answer": "SELECT name FROM management_table.JOIN \n    AS managers \n    LEFT JOIN AScaptainsONCREATE_DATE.floorCREATE_DATE AS c ON managers.id = c.id"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": "List the name of clubs whose manufacturer is not \"Nike\"",
    "answer": "SELECT DISTINCT clubs"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": "What are the names of clubs who do not have the manufacturer Nike?",
    "answer": "SELECT A"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": "What are the names of players in ascending order of wins count?",
    "answer": "SELECT FROM   ORDER BY wins"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": "Return the names of players in order of count of wins, ascending.",
    "answer": "SELECT player_name \nFROM players_tableORDERAVINGCOUNTWinGameAS10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": "What is the name of the player with the highest earnings?",
    "answer": "SELECT name FROM player_earningsGROUP_byplayer_nameORDER_byearnings_amountLIMIT1.Which GROUP BY clause"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": "Return the name of the player who earns the most money.",
    "answer": "SELECT name FROM PlayerGameMoneyGROUPEDByPlayerIDORDER_byGameMoney
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": "What are the distinct countries of players with earnings higher than 1200000?",
    "answer": "SELECT * FROM PlayersEarningsWHEREPlayerNameLIKELookingUPscriber_nameAndPlayerAgeHigherThan3500000AndPlayerSalaryHigherThan1200000.SortByPlayersEarnings"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": "From which countries are players who make more than 1200000 from?",
    "answer": "SELECT Country"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
    "answer": "SELECT Name"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
    "answer": "SELECT thePlayer FROM PlayerWinnersGROUPByCountryORDERByCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCountHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCountHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVingCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCountHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCOUNTHAVINGCountHAVINGCountHAVINGCOUNTHAVINGCOUNTHAVINGcountHAVINGCOUNTHAVINGcountHAVINGCountHAVINGCountHAVINGCountHAVingCountHAVingCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCOUNTHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVINGCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingCountHAVingcount"
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": "Show names of players and names of clubs they are in.",
    "answer": "SELECT player, name FROM players_table.JOINclubs_table \n    INNER JOIN teams_table_on_players_id_to_teams_id.map \n    AS match ON teams_table.id_to_teams_id = match.id;"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": "What are the names of players and the corresponding clubs that they are in?",
    "answer": "SELECT * FROM PlayersClubNameajesWHEREPlayerIDSEqual_toREEZESANDLastNameISNULL.orc"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": "Show names of clubs that have players with more than 2 win counts.",
    "answer": "SELECT Club_name, COUNT(*) FROM Players_1537_AKWHEREPlayer_name_in_BET_BETNAMER_40680_123456_213245_304062_375968_107910_4_6_7_8_10_15_17_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_101_102_103_104_105_106_107_108_109_110_111_112_113_114_115_116_117_118_119_120_121_122_123_124_125_126_127_128_129_130_131_132_133_134_135_136_137_138_139_140_141_1"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that have players who have won more than twice?",
    "answer": "SELECT * FROM player_info_2018_historic_2017_365_394_107_30_31_30_33_15_14_13_23_55_37_18_43_37_42_41_50_31_31_34_36_42_41_50_34_35_16_14_15_14_36_39_38_37_44_37_46_37_50_34_37_44_35_16_14_15_14_36_39_38_37_44_37_45_37_38_37_46_37_38_37_42_40_31_31_30_33_15_14_15_14_36_39_38_37_44_37_45_37_46_37_50_34_37_44_37_38_37_44_37_45_37_38_37_42_40_31_31_30_33_15_14_15_14_36_39_38_37_44_37_46_37_50_34_37_44_37_38_37_44_35_16_14_15_14_36_39_38_37_44_37_45_37_38_37_42_40_31_31_30_33_15_14_15_14_36_39_38_37_44_37_45_37_38_37_42_"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": "Show names of players from the club with manager \"Sam Allardyce\".",
    "answer": "SELECT name"
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": "What are the names of players from the club managed by Sam Allardyce?",
    "answer": "SELECT A"
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": "Show names of clubs in descending order of average earnings of players belonging.",
    "answer": "SELECT club_name FROM player_earnings_tableGROUPED_by_player_idORDER_by_average_earningsdescLIMIT10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
    "answer": "SELECT * FROM player_earningsORDERED_by_average_earningsDESC.ani"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": "Show different manufacturers and the number of clubs they are associated with.",
    "answer": "SELECT name FROM manufacturer_tableJOINclub_tableONmaker_table.id INNER JOIN club_table.onclub_id ON maker_table.id IN (SELECT ubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubsubs"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": "How many clubs use each manufacturer?",
    "answer": "SELECT A.OneB.TwoC"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": "Please show the most common manufacturer of clubs.",
    "answer": "SELECT Manufacturer FROM club_name_tableJOINclub_makers_onClub_name_table.id_club_makers_id_3 WHERE club_name_table.name = 'My Club Name'"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": "Which manufacturer is most common among clubs?",
    "answer": "SELECT ESESESSESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESEseSESESESESESESESEseseseseseSEseseseseseseSEsesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesecesesesesesesesesesesesesesesesesesesesesesesesehsesesese"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": "List the manufacturers that are associated with more than one club.",
    "answer": "SELECT * FROM ManufacturersJOINclubsONManufacturers.idCMSIDClUE2 INNER JOIN ClubsONmanufacturers.idCMSIDCLUE1 ON clubs.idCMSIDCLUE2 = CMSIDCLUE2"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": "Which manufacturers work for more than 1 club?",
    "answer": "SELECT FROM FROM JOINJOINJOINONJOINONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONNONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONnoneONONONONONONONONONONONONONONONONORONONONONONONONORONONONONONONONnoneONONONnoneONONONronONONnoneONORONONONONONON0ONONONnoneONOKONONownONONnoneONORONON00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": "List the country that have more than one player.",
    "answer": "SELECT * FROM country_name_cities.c"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": "Which countries have produced more than one player?",
    "answer
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": "List the name of clubs that do not have players.",
    "answer": "SELECT Club FROM club_table_nameWHEREsport_idDoesNOTINLOOKERSETOFSELECTs.sport_id, SELECTs.sport_id, SELECTs.sport_id, SELECTs.sport_id, SELECTs.sport_id, SELECTs.sport_id"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that do not have any players?",
    "answer": "SELECT A"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
    "answer": "SELECT name FROM player_wages_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings_earnings"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
    "answer": "SELECT GROUP ORDER BY BY"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": "What is the number of distinct countries of all players?",
    "answer": "SELECT COUNT(DISTINCTCountry) FROM Players.OUTPUT"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": "How many different countries are players from?",
    "answer": "SELECT COUNT(DISTINCT_name) FROM players_in_game.SELECT LIMIT 500;"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
    "answer": "SELECT player_id FROM player_earnings_table_Austrania_zimbi.athercast AS ASPlayer;"
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
    "answer": "SELECT OUT"
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
    "answer": "SELECT c.customer_id, c.first_name, c.last_name FROM customer_custs_cmt_crtCSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINICESASINIceSASINIceSASINICESASINIceSASINIceSASINiceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINICESASINIceSASINIceSASINiceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINICESASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceSASINIceS"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
    "answer": "SELECT Id FROM Customers_ordering_2023_1_234567890123456789012345678902345678901234567890234567890345678901234567890123456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789023456789"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
    "answer": "SELECT Orders.OrderId, Status, COUNT(*) FROM OrdersGROUPHAVINGproduts_in_Orders_1IsIn_Stock.OrderStatus"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
    "answer": "SELECT product_name FROM orders_tableGROUP_by_order_id.howson_id ORDER BY status DESC LIMIT 10"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
    "answer": "SELECT MAX(Order_date) FROM Orders.ORDERByOrder_date"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
    "answer": "SELECT order_id FROM orders.order_date ORDER BY order_date ASC"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
    "answer": "SELECT ASELEA"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
    "answer": "SELECT Name FROM Customers.headless WHERE OrderStatus = 'Completed'"
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
    "answer": "SELECT id FROM order_itemsWHEREstatus_idISNULLORDEREDGROUPINGbyproduct_name.id LIMIT 1"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
    "answer": "SELECT product_id, name, price, color FROM order_history_2021_02_18_01_2021_03_01_02_2021_04_01_05_2021_06_01_07_2021_08_01_09_2021_10_01_11_2021_12_01_13_2021_14_01_15_2021_16_01_17_2021_18_01_19_2021_20_02_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_101_102_103_104_105_106_107_108_109_110_111_112_113_114_115_116_117_118_119_120"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": "Which orders have at least 2 products on it? List the order id and date.",
    "answer": "SELECT lists"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": "What are the ids and dates of the orders with at least two products?",
    "answer": "SELECT Order_ID, DATE_FORMATOrder_Date, COUNT(*) FROM OrdersGROUPEDByProduct_IDHAVINGCOUNT_products_ID.geq  LIMIT 2"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": "Which product are listed in orders most frequently? List the id, product name and price.",
    "answer": "SELECT CTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETEteTETETETETETETETETETETETETETETETETETETETETETETETETETTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETEteTETETETETETETETETETETETETETETETETETETETETETETETETETTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETEteTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETTETETETETETETETETETETETETETETETETEteTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETEteTETETETETETETETETETETETETETETETETETETETETETTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETeTETETETETETETETETETETETETETETETETETETETETEteTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETTETETeTETETETE"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
    "answer": "SELECT Product_ID, Name, Price FROM ProductsGROUPByOrderIDORDEREDATEASC.LIMIT  LIMIT 1"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": "Which order have the least sum of the product prices. List the order id and sum.",
    "answer": "SELECT TETETETETETETETETETETetETetETetetETetETETetETETETetETetETetetetts"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": "What is the order that total cost the least , and how much is the total cost ?",
    "answer": "SELECT ANSWER"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": "What is the most popular payment method?",
    "answer": "SELECT PaymentMethod FROM PaymentsGROUPEDByCustomerIDORDERBYCountLIMIT1.Answer"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": "What is the payment method that most customers use?",
    "answer": "SELECT payment_method FROM transactions.WHERETransaction_id INNER JOIN (SELECT t1.transaction_id FROM transactions.t1 INNER JOIN transaction.t2 ON transactions.t1.transaction_id = t2.transaction_id) AS q1 ON q1.transaction_id = (SELECT t2.transaction_id FROM transactions.t2 INNER JOIN transactions.t3 ON transactions.t3.transaction_id = t2.transaction_id)"
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": "How many number of products does each gender of customers buy? List the gender and the number",
    "answer": "SELECT BY"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": "How many products does each gender buy?",
    "answer": "SELECT BY"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": "How many orders has each gender of customers placed?",
    "answer": "SELECT gender, COUNT(*) FROM ordersGROUPBygender.ardi"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": "How many orders has each gender placed?",
    "answer": "SELECT gender FROM ordersGROUPBygenderORDERBYstatusORDERLIMIT1.ANS"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": "List the customers' first name, middle initial, last name and payment methods.",
    "answer": "SELECT c.first_name, c.middle_initial, c.last_name, p.login_method"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
    "answer": "SELECT Name FROM Customers.INSERT"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": "List the invoices' status, date and the date of shipment.",
    "answer": "SELECT COUNT(*) AS total_invoices FROM invoices_table_name.ensemble GROUP BY invoice_id"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": "What are the statuses, dates, and shipment dates for all invoices?",
    "answer": "SELECT COUNT(*) AS total_invoices, DATE_FORMATSaint_DATE, DATEDIFFSaint_DATE, MONTH FROM InvoiceTable.all"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": "List the names of the products being shipped and the corresponding shipment date.",
    "answer": "SELECT Product, ShipDate FROM ShippingRecords.Onlyinclude_products WHERE shipping_date = '2021-01-01'"
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
    "answer": "SELECT name"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
    "answer": "SELECT order_id, item_name, shipping_address, delivery_date FROM orders_and_ships_and_items.order_id, orders_and_ships_and_items.item_name, orders_and_ships_and_items.shipping_address, orders_and_ships_and_itemsdelivery_dateWHEREstatus_codebetween20210101And20211231ANDorder_dateBetween20190730And20211231ORDEREDByitem_nameASCLIMIT5SELECTorder_idFROMorders_and_ships_and_items.Only"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
    "answer": "SELECT Status_CODE FROM order_items_orderingsstatus_code_id2307868497433647753721743335320799999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": "What is the product name and the color of the ordered items which have been shipped?",
    "answer": "SELECT * FROM order_items.product_name, order_items.color WHERE order_id = (SELECT Order_ID FROM ordersopause2017_4_1863_2019_07_09LWHEREOrderDate__ISDATE.gmailCOM__USER_5365_000)"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": "What are the names and colors of all products that have been shipped?",
    "answer": "SELECT FROM  \tWHERE ANSWER  \t>\nA.ALL\n\t\tORDER BY C"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "answer": "SELECT Product_Name, Price, Description FROM ProductsGROUP_byGenderORDEREDByPriceLIMITnum.Assuming INNER JOIN another_tableONProductsIDequalsAnotherTable.ProductID\n \n\n \n \n \n\n \n\n\n \n\n \n \n \n \n \n\n \n \n\n \n\n \n \n \n\n \n \n \n \n\n \n \n\n \n \n\n \n\n \n \n \n\n \n \n\n \n\n \n \n \n\n \n \n \n\n \n \n \n\n \n\n \n\n \n \n \n \n\n \n\n \n\n \n \n \n\n \n\n \n \n\n \n \n\n \n \n\n \n \n\n \n \n \n\n \n \n \n\n \n\n \n \n\n \n \n\n \n\n \n \n \n\n \n\n \n \n\n \n\n \n \n \n\n \n \n\n \n\n \n \n\n \n\n \n \n\n \n\n \n\n \n \n\n \n\n \n\n \n \n \n\n \n\n \n\n \n\n \n\n \n \n\n \n\n \n\n \n\n \n\n \n \n \n\n \n\n \n\n \n \n \n\n \n\n \n\n \n \n\n \n\n \n\n \n\n \n\n \n\n \n \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n \n \n\n \n\n \n\n \n\n \n\n \n\n \n \n\n \n\n \n\n \n\n \n \n\n \n\n \n\n \n\n \n\n \n\n \n \n\n \n\n \n\n \n\n \n\n \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "answer": "SELECT product_name FROM ordersWHEREgender_columnidasigned_toFemale.Here, thegender_columnidasigned_toFemale.id"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": "What are invoices status of all the orders which have not been shipped?",
    "answer": "SELECT COUNT(*) FROM order_status_table.INSERT"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
    "answer": "SELECT order_id, invoice_status"
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
    "answer": "SELECT o.order_id, d.date, c.total_cost"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": "For each order, what is its id, date, and total amount paid?",
    "answer": "SELECT orders.order_id, orders.date, SUM(payments.amount) AS total_amount_paid FROM orders.ather GROUP BY orders.order_id"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": "How many customers have placed any order?",
    "answer": "SELECT COUNT(*) FROM orders.Only"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": "How many different customers have ordered things?",
    "answer": "SELECT aded"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": "How many item states are there in the orders?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": "How many different item status codes are there listed in ordered items?",
    "answer": "SELECT COUNT(DISTINCTStatusCode) FROM order_items.ORDER"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": "How many different payment methods are there?",
    "answer": "SELECT COUNT(DISTINCTpayment_method) FROM paymentsGROUPHAVING.payment_method INNER JOIN (SELECT DISTINCT payment_method, COUNT(*) AS total_payment_method_count FROM paymentsGROUPHAVING.payment_method INNER JOIN ordersGROUPHAVING.customer_idINSELECT  AS customer_idFROMordersGROUPHAVINGcustomer_idINSELECT  AS order_idWHEREstatus_in_ordersGROUPHAVINGstatus_in_ordersGROUPHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_status_groupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGstatus_in_ordersGROUPHAVINGstatus_in_ordersGROUPHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_status_groupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_status_groupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGROUPHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_status_groupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_statusGroupHAVINGorder_status_in_order_status_groupHAVINGorder_status_in"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": "How many different payment methods can customers choose from?",
    "answer": "SELECT ically"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
    "answer": "SELECT IN"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
    "answer": "SELECT IN"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
    "answer": "SELECT BY ORDER BY ProductSize"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": "What are the sizes of all products whose name includes the word 'Dell'?",
    "answer": "SELECT A.Size                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        "
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": "What are the product price and the product size of the products whose price is above average?",
    "answer": "SELECT A.Price                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        "
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": "What are the prices and sizes of all products whose price is above the mean?",
    "answer": "SELECT BY ORDER BY Price"
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": "How many kinds of products have not been sold?",
    "answer": "SELECT BY"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": "What is the number of products that have not been ordered yet?",
    "answer": "SELECT products"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": "How many customers do not have any payment method?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": "How many customers do not have a listed payment method?",
    "answer": "SELECT COUNT(*) FROM payments_2018_01_01_to_2018_12_31WHERE.status INNER JOIN payments_2018_03_01_to_2018_11_31GROUPHAVINGstatusNOTININNERSELECTstatusORDERASCLIMIT1.UsingJoinsAndWhereInnerAndFROMpayment_2018_03_01_to_2018_11_31WHEREstatusNotInINNERSELECTstatusORDERASCLIMIT1\n  \n
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": "What are all the order status and all the dates of orders?",
    "answer": "SELECT status FROM orders.all WHERE date = '2021-01-01';"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": "What are the status codes and dates placed for all of the orders?",
    "answer": "SELECT * FROM order_tableorder_id_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019_12_30_000000_2019"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": "List the address, town and county information of the customers who live in the USA.",
    "answer": "SELECT T1.CustomerName FROM CustomersT1JOINonymsONCustomersT1.CustomerIDcustomerID INNER JOIN T2ONCustomersT1.CustomerIDcustomerID ON T2.CustomerID = T1.CustomerID"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
    "answer": "SELECT City, State, ZipCode FROM Customers.OnlyCustomer"
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": "List all the pairs of buyer first names and product names.",
    "answer": "SELECT a.first_name, b.first_name FROM buyers.a INNER JOIN buyers.b ON buyers.a.id = buyers.b.id"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
    "answer": "SELECT Name"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": "How many items are shipped?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": "How many products have been shipped?",
    "answer": "SELECT COUNT(*) FROM shipping_product_tableGROUP_byproduct_id_havingdate_column.Thought"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": "What is the product average price?",
    "answer": "SELECT AVG(price) FROM products.Answer"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": "How much do the products cost on average?",
    "answer": "SELECT * FROM orders.order_id WHERE order_date >= '2021-05-15'"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": "What is the average price of the products being ordered?",
    "answer": "SELECT product_id FROM ordersGROUP_byproduct_idORDERings.count AS count"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": "What is the price of all products being ordered on average?",
    "answer": "SELECT A.Every                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             "
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": "What are the email address, town and county of the customers who are of the least common gender?",
    "answer": "SELECT customer_email"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
    "answer": "SELECT gender, city, county"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
    "answer": "SELECT orders.order_date FROM orders_tableJOINpayment_tableONorders.idpend_on_payment_method WHERE customers.customer_id = (SELECT customer_id FROM orders_tableJOINpayment_tableONorders.idpend_on_payment_method WHERE payment_method_id = (SELECT payment_method_id FROM payment_table.joinorders_tableONordersidpend_on_payment_method WHERE order_id = (SELECT order_id FROM orders_tableJOINpayment_tableONorders.idpend_on_payment_method WHERE id = 0)))"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
    "answer": "SELECT date"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": "What is the most uncommon order status?",
    "answer": "SELECT COUNT(*) FROM orders_status_tableGROUPHAVINGstatus_codeIN_SETSMOKESSETstatus_code1status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2status_code3status_code4status_code5status_code6status_code7status_code8status_code9status_code10status_code11status_code2"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": "What is the least common order status?",
    "answer": "SELECT FROM"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": "For all the products sold for more than 3 times, list their id and description.",
    "answer": "SELECT p.product_id, p.description"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": "For all products sold more than 3 times, what are their ids and descriptions?",
    "answer": "SELECT products_id, description"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
    "answer": "SELECT Invoice_ID, DATE_FORMATInvoice_DATE, COUNT(*) FROM InvoicingGROUPING_byINvoice_IDHavingCountLessThan2INvoice_IDHAVINGINvoice_IDISINHERINGFROMINvoicingGROUPED_byINvoice_IDHAVINGCOUNTLess_than2INvoice_IDORDERByDATE_FORMATInvoice_DATEascORDERLIMIT10.LIMIT"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
    "answer": "SELECT * FROM Invoices_2021_3600_2020_1508_4799_4799_4799_2021_3600_2020_1508_2021_3600_2020_2021_3600_2020_3600_2020_3600_4799_3699_2021_3600_2020_1508_2021_3600_2020_2021_3600_2020_2021_3600_2020_4799_3699_2021_3600_4799_4799_2021_3600_2020_3600_5799_3699_2021_3600_5899_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_5999_59"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": "what are all shipment tracking numbers and shipment dates?",
    "answer": "SELECT ively"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": "What are the tracking numbers and dates for all shipments listed?",
    "answer": "SELECT COUNT(*) FROM shipments_table.ardi"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": "What are the color, description and size of the products priced below the maximum price.",
    "answer": "SELECT color, description, size"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
    "answer": "SELECT *"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": "Return the names of directors who are older than the average age.",
    "answer": "SELECT directors, COUNT(*) AS num_of_directors \nFROM directors_list_dh2016_2020082020200930793394015752632945903289422957829234362273880138183663188951296486894925177693128219210571567557777757777577777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": "Find the the name of the oldest director.",
    "answer": "SELECT D"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": "How many channels have the word 'bbc' in their internet link?",
    "answer": "SELECT COUNT(*) FROM channelsWHEREnamelikeasmbbec_2017.ched"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": "How many different digital terrestrial channels are there?",
    "answer": "SELECT aded"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": "List all program titles in the order of starting year. List the most recent one first.",
    "answer": "SELECT T2.title"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": "Which director is in charge of the most programs?",
    "answer": "SELECT COUNT"
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": "Find the name and age of the director who is in charge of the most programs?",
    "answer": "SELECT d.name, d.age FROM directors.d AS d INNER JOIN projects.p AS p ON d.id = p.d_id INNER JOIN users.w AS u ON p.user_id = u.user_id ORDER BY d.age DESC LIMIT 1"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": "Return the title of the program that began most recently.",
    "answer": "SELECT program"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": "Find the name and website link of the channels that have more than one program.",
    "answer": "SELECT channel_name, website_link FROM channels_tableGROUPINGBychannel_nameHAVINGcountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBycountProgramsDriveBy"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": "Find the number of programs for each channel. Return the name of each channel as well.",
    "answer": "SELECT ChannelName, COUNT(*) FROM ProgrammingGROUPByChannelNameORDERLIMIT1.INSERT\n  ORDER BY ChannelName"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": "Find the number of channels that do not run any program.",
    "answer": "SELECT channel_name"
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": "What is the name of the director who is in the \"Dracula\" program?",
    "answer": "SELECT the\nFROM filmsWHEREyear_in_programltimesltIDAZ2010.INSERT"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": "Find the name and internet web of the channel that is directed by the most directors.",
    "answer": "SELECT ChannelName, InternetWeb FROM channels_table.GROUPINGbyDirector"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": "Find the name of the directors whose age is between 30 and 60.",
    "answer": "SELECT * FROM director_infoWHEREageIN_betweenbles30And60.SELECTED"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
    "answer": "SELECT ChannelName"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
    "answer": "SELECT ch.name, ch.id FROM channels.channels AS ch INNER JOIN channels.user AS u ON ch.user_id = u.id INNER JOIN channels.channel_id AS ic ON u.channel_id = ic.channel_id"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": "How many radios are there?",
    "answer": "SELECT A.One"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": "List the transmitters of radios in ascending order of erp kw .",
    "answer": "SELECT T2.Tx, T1.Rx FROM TransmitterT2TXT1RxT1RtT2TXASXWhereTXT1.Rx INNER JOIN TXT2TXASXONERWHERETX2.RxT2TXASX ON TX2.Rx = TX1.Rx"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": "What are the names and original air dates of tv shows?",
    "answer": "SELECT BY"
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": "List the station names of city channels whose affiliation is not \"ABC\".",
    "answer": "SELECT the"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
    "answer": "SELECT transmitter"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": "What is the transmitter of the radio with the largest ERP_kW?",
    "answer": "SELECT transmitter FROM ERP_eksPLANS_2019_HZ0324676033506_00100000038390_00011101996856_00100100025530_00200111014593_00100100011101996779372_00011001996856_00100100011101996779372_00011001996856_00100100025530_00200111014593_001001000111019967779372_00011001996856_00100100011101996779372_00011001996856_00100100011101996779372_00011001996856_00100100025530_00200111014593_001001000111019967779372_00011001996856_001001000111019967779372_00011001996856_00100100025530_00200111014593_001001000111019967779372_00011001996856_00"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": "What is the average ERP across all radios?",
    "answer": "SELECT AVG(Avg) FROM ERP_AGG.employees"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
    "answer": "SELECT city.channel, COUNT(*) FROM city_channelsGROUPINGCityChannel_nameORDER_byCOUNTLIMIT1LIMIT2GROUPINGCityChannel_name.Using FULL JOIN clause.SELECTcity_channel_name AS channel_name_idFROMcity_channels AS c2JOINcitychannel_tagsasct ON c2.channel_id = asct.channel_id INNER JOIN citychannels_tagsasct.on_tags AS tags ON tag.tag_id = asct.tag_id GROUP BY channel_name_id"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": "Please show the most common affiliation for city channels.",
    "answer": "SELECT * FROM channels_in_city_cities.c"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": "List the affiliations shared by more than three city channels.",
    "answer": "SELECT ChannelName, AffiliationName FROM channel_list_longest_in_3_cities_countdown_channel_info20172018014569700502539236237806186738244489455198560129922682163867381478268217902417065301829008578205646440564640085787065301929006186738244489455198560129922682163867381478268217902417065301829008578205646440564640085787065301929006186738244489455198560129922682163867381478268217902417065301829008578205646440564640085787065301929006186738244489455198560129922682163867381478268217902417065301829008578205646440564640085787065301929006186738244489455198560129922682163867381"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
    "answer": "SELECT City, StationName FROM stations_tableGROUPINGstation_nameORDERASCLIMIT10.INSERT INNER JOIN stations_table_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id_stations_with_city_id"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
    "answer": "SELECT transmitter_name, city"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
    "answer": "SELECT transmitter FROM radio_table_rsp_to_tts_tsp_mss20210718350046391233456392632222322236661123223237676841322339909490151399093141515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
    "answer": "SELECT station, channel_name FROM radio_table_radios_ttransmiters.INSERT\n    ORDER BY station, channel_name"
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
    "answer": "SELECT station"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
    "answer": "SELECT model FROM vehicles.INSERT"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
    "answer": "SELECT model FROM vehicle_table_name_2023_04_01_AZSSTVWHERE_year_code_1780_01_01_04_03_1995_01_05_08_06_01_16_07_23_06_00_04_23_11_20_06_10_12_15_17_10_23_30_34_31_38_39_40_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_91_92_93_94_95_96_97_98_99_100_101_102_103_104_105_106_107_108_109_110_111_112_113_114_115_116_117_118_119_120_121_122_123_124_125_126_127_128_129_130_131_132_133_134_135_136_137_138"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": "What are the names of the drivers who are citizens of the 'United States'?",
    "answer": "SELECT FROM"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers with citizenship from the United States.",
    "answer": "SELECT Driver_name FROM Driver_table_dh2020_12_30_2021_2022_12_30_2022_10_07_2022_15_02_2022_19_24_21_20_21_21_13_23_35_36_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_110_120_130_140_150_160_170_180_190_200_210_220_230_240_250_260_270_280_290_300_310_320_330_340_350_360_370_380_390_400_410_420_430_440_450_460_470_480_490_500_510_520_530_540_550_560_570_580_590_600_610_620_630_640_65"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
    "answer": "SELECT COUNT(*) FROM vehicle_data_tableGROUPHAVING.Driver_id INNER JOIN (SELECT Driver_id FROM vehicle_data_tableJOIN_vehicle_data_tableON_vehicle_data_table.driver_id_id_joined WHERE vehicle_data_table.user_id = 'user1') AS other_joins ON Vehicle_data_table.driver_id = other_joins.Driver_id GROUP BY Vehicle_data_table.driver_id;"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
    "answer": "SELECT id FROM vehicles_orderingsORDER_by_distanceDESCLIMIT_NUMBER.ardi"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
    "answer": "SELECT FROM"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
    "answer": "SELECT power FROM vehicle_name_tableJOINvehicle_power_tableJOINuser_power_tableONuser_power_id.user_id INNER JOIN vehicle_power_tableJOINuser_power_tableONuser_power_id.user_id ON user_power_id.user_id=vehicle_power_table.user_id GROUP BY vehicle_name_table.user_id ORDER BY power DESC LIMIT 1"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
    "answer": "SELECT id FROM vehicle_data_v2021_2021_2022_3656_2022_2022_3657_2022_3658_2022_3659_2022_3660_2022_2022_3661_2022_2022_3662_2022_3663_2022_3664_2022_3665_2022_3666_2022_3667_2022_3668_2022_3669_2022_3670_2022_3671_2022_3672_2022_3673_2022_3674_2022_3675_2022_3676_2022_3677_2022_3678_2022_3679_2022_3680_2022_3681_2022_3682_2022_3683_2022_3684_2022_3685_2022_3686_2022_3687_2022_3688_2022_3689_2022_3690_2022_3691_2022_3692_2022_3693_2022_3694_2022_3695_2022_3696_2022_3697_2022_3698_2022_3699_2022_3700_2022_3701_202"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": "Return the id of the vehicle that has been driven the fewest times.",
    "answer": "SELECT MAX(VID) FROM VehicleVehiclesGROUPHAVINGCOUNTTIFFidas.VID, COUNTTIFFidas.ID INNER JOIN VehicleVehiclesidaVID2ONVehicleVientesidaVID2.id  AS VID2 ON VID = VID1"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
    "answer": "SELECT vehicle_name, model_year, top_speed, power"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
    "answer": "SELECT Speed, Power FROM VehicleSpeeds_year_1996.Only"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": "What are the build year, model name and builder of the vehicles?",
    "answer": "SELECT ively"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": "Give the build year, model, and builder of each vehicle.",
    "answer": "SELECT vehicles FROM vehicles_model_2019_v36_m25_bls_503854715_103_11_105_27_77_13_14_24_65_28_19_71_75_69_20_99_39_45_45_45_52_54_55_55_56_17_24_22_45_64_55_56_58_66_67_66_67_103_11_11_105_27_77_13_14_24_65_28_19_71_75_69_20_99_39_45_45_45_52_54_55_55_56_17_24_22_45_64_55_56_58_66_67_66_67_103_11_11_105_27_77_13_14_24_65_28_19_71_75_69_20_99_39_45_45_45_52_54_55_55_56_17_24_22_45_64_55_56_58_66_67_66_67_103_11_11_105_27_77_13_14_24_65_28_19_71_75_69_20_99_39_45_45_45_52_54_55_55_56_17_24_22_45_64_55_56_58_66_67_66_67_103_11_11"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": "How many drivers have driven vehicles built in 2012?",
    "answer": "SELECT COUNT(DISTINCTDriverID) FROM DriverTree2012_2013_DriverTree2012_2014_2015_2016_2017_2018_2019_2020_2021_2022_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2091_2092_2093_2094_2095_2096_2097_2098_2100_2101_2102_2103_2104_2105_2106_2107_2108_"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": "Count the number of different drivers who have driven vehicles built in 2012.",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": "How many drivers have raced in 'NASCAR'?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               "
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have raced in NASCAR.",
    "answer": "SELECT COUNT(*) FROM DriverRaceCountingsWHEREncmlcCodeIsNASCARORDERByraceDateDescLIMIT1000.INSERT"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": "What is the average top speed of vehicles?",
    "answer": "SELECT FROM"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": "Return the average top speed across all vehicles.",
    "answer": "SELECT AVG(top_speed) FROM vehicles.ensemble"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
    "answer": "SELECT name FROM carsGROUPHAVINGpowermorethan5000.ORDER"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers who have driven vehicles with power over 5000.",
    "answer": "SELECT Driver_Name FROM Vehicles_powered_by_5000_v2.ashql WHERE Vehicle_Type = 'Lorry'"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": "Which car models have total production larger than 100 or top speed higher than 150?",
    "answer
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
    "answer": "SELECT the \n\n  FROM cars_table_name_2023_06_30_to_2023_09_30_cars_table_name_2023_10_30_cars_table_name_2023_11_30_cars_table_name_2023_12_30_cars_table_name_2024_06_30_cars_table_name_2024_09_30_cars_table_name_2024_10_30_cars_table_name_2024_11_30_cars_table_name_2024_12_30_cars_table_name_2025_06_30_cars_table_name_2025_10_30_cars_table_name_2025_11_30_cars_table_name_2025_12_30_cars_table_name_2026_06_30_cars_table_name_2026_09_30_cars_table_name_2026_10_30_cars_table_name_2026_11_30_cars_table_name_2026_12_30_cars_table_name_2027_06_30_cars_table_name_2027_10_30_cars_table_name_2027_11_30_cars_table_name_2027_12_30_cars_table_name_2028_06_30_cars_table_name_2028_10_30_cars_table_name_2028_11_30_cars_table_name_2028_12_30_cars_table_name_2029_06_30_cars_table_name_2029_10_30_cars_table_name_2029_11_30_cars_table_name_2029_12_30_cars_table_name_2030_06_30_cars_table_name_"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
    "answer": "SELECT model_name, model_year"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
    "answer": "SELECT m.ModelName, m.BuildYear"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": "What are the models which have not been driven by any drivers?",
    "answer": "SELECT A.ETL"
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": "Return the models of vehicles that have never been driven.",
    "answer": "SELECT Model"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
    "answer": "SELECT vehicle"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
    "answer": "SELECT vehicles.id, models.name FROM vehicles_v2_id2Join_v2s2_tableJOIN_bayans_v2s2_tableJOIN_ziyang_bayans_tableJOIN_models_on_bayans_bayans_id2_table.join_v2s2_model_on_v2s2_id2_table AS v2t, v2s2.model AS m"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
    "answer": "SELECT VehicleId FROM VehiclesWHEREDriverNameLikeLIKEJOINpedON.driverID ORDER BY DriverName;"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
    "answer": "SELECT vehicles.id, models.id FROM vehicles_table_v3a2eda480d6003903326701620257283987853248716966862820314932960978622165590153950101355114551057832959469702828944102662748871688699000314932960978622165590153950101355114551057832959469702828944102662748871688699000314932960978622165590153950101355114551057832959469702828944102662748871688699000314932960978622165590153950101355114551057832959469702828944102662748871688699000031493296097862216559015395010135511455105783295946970282894410266274887168869900003149329609786221655"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": "How many vehicles have maximum top speed?",
    "answer": "SELECT MAX(top_speed) FROM vehicle_data.How"
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
    "answer": "SELECT COUNT(*) FROM vehicle_data_tableGROUP_by_vehicle_type_idHAVING.max_speed_OverAll_vehicles INNER JOIN vehicle_data_table_v2ONvehicle_data_table.id_v2_id_v2_id_v1_id_w2 ON vehicle_data_table_v2.id_vehicle_type_id = vehicle_data_table.v2.id_vehicle_type_id_v1_id_w2_id"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": "Show all driver names in the alphabetical order.",
    "answer": "SELECT driver_name FROM drivers_order_table.ORDER"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": "What are the names of drivers, returned in alphbetical order?",
    "answer": "SELECT name"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": "How many drivers have been racing in each racing series?",
    "answer": "SELECT COUNT(DISTINCTDriverID) FROM Drivers_Racing_2018WHEREYearinanTPM_2018GROUPByDriverIDORDERByCountLIMIT1.Answer"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers that have raced in each series.",
    "answer": "SELECT series, COUNT(*) FROM drivers_races_countdownsGROUP_CONCATrace_series_NAMEORDERByCOUNTreakSLIMIT10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
    "answer": "SELECT FROM"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
    "answer": "SELECT * FROM Drivers_With_DJ1.gne"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": "How many drivers have not driven any cars?",
    "answer": "SELECT COUNT(DISTINCTDriverID) FROM DriverWHEREATEDIFFTrainDateDOCTYPEodaressDATEBEGINningANDENDOTodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEBEGININGANDENDOTodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrainDateDOCTYPEodaressDATEENDONTODATEADDTrain"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have not driven any vehicles.",
    "answer": "SELECT COUNT(DISTINCTDriverID) FROM DriversWhoHaveNotDrivenAnyVehicle.ungen"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": "How many exams are there?",
    "answer": "SELECT BY"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": "Count the number of exams.",
    "answer": "SELECT COUNT(*) FROM exam_table.thead"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": "List the distinct subject code of exams in ascending alphabetical order .",
    "answer": "SELECT SubjectCode"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
    "answer": "SELECT * FROM SubjectCodeTable.ORDER"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
    "answer": "SELECT ively"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
    "answer": "SELECT date FROM table_name_name_2017_05_19WHEREsubject_code__is_not_580104_300000_300001_300001_000100_300003_000000_000201_13_0203_00_1605_00_1807_00_1909_00_2002_00_2104_00_2206_00_2308_00_2409_00_2501_00_2602_00_2703_00_2804_00_2905_00_2006_00_2107_00_2208_00_2309_00_2410_00_2511_00_2612_00_2713_00_2814_00_2915_00_2016_00_2117_00_2218_00_2319_00_2420_00_2521_00_2622_00_2723_00_2824_00_2925_00_2026_00_2127_00_2228_00_2329_00_2430_00_2531_00_2632_00_2733_00_2834_00_2935_00_2036_00_2137_00_2238_00_2339_00_2440_00_2541_00_2642_00_"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
    "answer": "SELECT DATE_FORMAT_EXAM_DATE, YYYYMMDD FROM exam_schedule_tableGROUP_by_subject_codeorder_by_date_in_descinct.eksam_date"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
    "answer": "SELECT Date, DATE_FORMATDATE, MIN(DATE) FROM ExamsEXAM_ID__2021_2023_2024_2025_2026_EXAM_ID__2027_EXAM_ID__2028_EXAM_ID__2029_EXAM_ID__2020_EXAM_ID__2021_EXAM_ID__2022_EXAM_ID__2023_EXAM_ID__2024_EXAM_ID__2025_EXAM_ID__2026_EXAM_ID__EXAM_ID__2027_EXAM_ID__EXAM_ID__2028_EXAM_ID__EXAM_ID__EXAM_ID__2029_EXAM_ID__2021_EXAM_ID__2022_EXAM_ID__2023_EXAM_ID__2024_EXAM_ID__2025_EXAM_ID__2026_EXAM_ID__EXAM_ID__2027_EXAM_ID__EXAM_ID__2028_EXAM_ID__EXAM_ID__2029_EXAM_ID__2021_EXAM_ID__2022_EXAM_ID__2023_EXAM_ID__2024_EXAM_ID__2025_EXAM_ID__2026_EXAM_ID__EXAM_ID__2027_EXAM_ID__EXAM_ID__2028_EXAM_ID__EXAM_ID__2029_EXAM_ID__EXAM_ID__2021_EXAM_ID__EXAM_ID__2022_EXAM_ID__2023_EXAM_ID__2024_EXAM_ID__2025_EXAM_ID__2026_EXAM_ID__EXAM_ID__2027_EXAM_ID__EXAM_ID__EXAM_ID__EXAM_ID__EXAM_ID__2028_EXAM_ID__EXAM_ID__EXAM_ID__EXAM_ID__2029_EXAM_ID__"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": "What are the type of questions and their counts?",
    "answer": "SELECT * FROM QuestionsGROUPEDByQuestionTypeORDEREDLIMIT1.Using GROUP BY is"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": "For each question type, return its type code and its count of occurrence.",
    "answer": "SELECT t.type_code, COUNT(*) FROM questions_tigs.QUANTILE"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": "What are the distinct student answer texts that received comments \"Normal\"?",
    "answer": "SELECT T2"
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
    "answer": "SELECT * FROM student_answer_text_test_2021.ANSWER WHERE comment IN (SELECT comment FROM student_answer_text_test_2021.ANSWER WHERE comment = 'Normal')"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": "How many different comments are there for student answers?",
    "answer": "SELECT FROM"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": "Count the number of different comments for student answers.",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": "List all the student answer texts in descending order of count.",
    "answer": "SELECT * FROM students_answer_text_tableGROUP_by_student_idORDER_by_countdescLIMITNGROUPS.RETURNING"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
    "answer": "SELECT * FROM students_answer_text_tableORDER_by_frequencyDESCLIMIT1.Only"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": "Please show the first names of students and the dates of their answers.",
    "answer": "SELECT student_name, answer_date"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": "For each student answer, find the first name of the student and the date of the answer.",
    "answer": "SELECT T2.first_name, T2.date"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
    "answer": "SELECT A.from_name, A.to_name, D.to_date FROM answers_tableAinnerJOINanswers_tableBONUSAONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ONERAS8ONERAS9ONERAS10ONERAS2ONERAS3ONERAS4ONERAS5ONERAS6ONERAS7ON"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
    "answer": "SELECT S.email FROM students_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer_answer"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": "Please show the least common assessment for students.",
    "answer": "SELECT name, grade"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": "Which assessment has the smallest frequency count?",
    "answern\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": "Please show the first names of the students that have at least two answer records.",
    "answer": "SELECT T1.first_name FROM studentsT1joinAnswerRecordAONTSTsAONTST2ONTstSST1ONTstT2ONTstSST1ONTstT2ONTstSST1ONTstT2ONTstSST1ONTstSST1ONTstSST1ONTstT2ONTstSST1ONTstT2ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST1ONTstSST"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": "Which students have 2 or more answer records? Give me their first names.",
    "answer": "SELECT SSELECTESSELECTESSELECTESSELECTE\nINNER JOIN ANIESIECECEULTELEINEUISIANIECEULIECEAIBECULULUIEIISANIECEULIECEANIECEULIECEAISTIECLEENIUEIEINECECECEULIECEICELEIEIEIINECECELECEIEIINECECECEIEIEINECECEICEIECECEILEIINECECECELEIINECECECEIEECECECEIECELEIINECECEICECECECEICEIEIINECECECEIECECECELEIINECECECECEIEECECECECECECECEIEECECECECECECEICECEIECEIECECECECECECEIECECECECEIEIECECECECECECECECECECEIECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECE"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": "What is the most common valid answer text?",
    "answer": "SELECT MAX(CASEWhenUGHT) FROM answers.ANS"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": "Find the valid answer text that appeared most frequently.",
    "answer": "SELECT answer_text FROM answer_tableGROUP_CONCATAnswer_textORDER_by_answer_countLIMIT_NUMBERGROUP_CONCATAnswer_text.countLIMIT_NUMBER"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is not \"M\".",
    "answer": "SELECT Name FROM StudentInfoWHEREgenderNotLikeCMS_014_033_5702.english"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": "What are the last names of the students with gender other than \"M\"?",
    "answer": "SELECT BY ORDER BY Lastname"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": "List each gender and the corresponding number of students.",
    "answer": "SELECT Gender, COUNT(*) FROM StudentsGROUPEDByGender.ORDER_byCountLIMIT 1"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": "For each gender, return the gender code and the number of students who identify as that gender.",
    "answer": "SELECT gender_code, COUNT(*) FROM studentsGROUPBygender_id.Sort_by_countdesc"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is \"F\" or \"M\".",
    "answer": "SELECT Name FROM studentsWHEREgender_category_id_in_set_of_students_id_in_set_of_students_1748397504_2016_12_30_2019_12_30_2019_12_30_2020_12_30_2021_12_30_2022_12_30_2023_12_30_2024_12_30_2025_12_30_2026_12_30_2027_12_30_2028_12_30_2029_12_30_2030_12_30_2031_12_30_2032_12_30_2033_12_30_2034_12_30_2035_12_30_2036_12_30_2037_12_30_2038_12_30_2039_12_30_2040_12_30_2041_12_30_2042_12_30_2043_12_30_2044_12_30_2045_12_30_2046_12_30_2047_12_30_2048_12_30_2049_12_30_2050_12_30_2051_12_30_2052_12_30_2053_12_30_2054_12_30_2055_12_30_2056_12_30_2057_12_30_2058_12_30_20"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
    "answer
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": "List the first names of the students who do not have any answers.",
    "answer": "SELECT T1.Name FROM StudentsT1jtTSH2JzJ3T6J0ZMzTmRzQzZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZ"
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": "Which students do not have any answers? Find their first names.",
    "answer": "SELECT ECTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETEteTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETeTETETETETETETETETETETETETETETETETEteTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETeTETETETETEteTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETeTETEteTETETETETETETETETE"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
    "answer": "SELECT T2 FROM students_answer_textsASSTtT1JOINstudents_answer_textasSTsASstt2ONT1.id AS T1 INNER JOIN students_answer_textasSTtASst2ONT2.id AS T2 ON T1.T1_id = T2.T1_id GROUP BY T2"
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
    "answer": "SELECT SA"
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": "Show the types of questions that have at least three questions.",
    "answer": "SELECT T1.Type FROM QuestionsT1JOINQuestionsT2ON_questionsT1.IdT2IdT2 INNER JOIN UsersUON_questionsT1.IdT1Id ON UsersU.id =_questionsT2.IdU INNER JOIN UsersWONUsersU.onUsersUIdT1IdU ON UsersW.id =UsersW.id"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": "Which types of questions have 3 or more questions? Return the questions type code.",
    "answer": "SELECT One"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": "Show all information on students.",
    "answer": "SELECT * FROM student_info.INSERT"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": "What is al the available information of each student?",
    "answer": "SELECT name, class"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": "How many addresses do we have?",
    "answer": "SELECT COUNT(*) FROM address_table.ardi"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": "Count the number of addresses.",
    "answer": "SELECT COUNT(*) FROM table_name.ardi"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": "List all address ids and address details.",
    "answer": "SELECT DISTINCT a.address_id, a.address_details FROM your_table_name.INSERT"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": "What are all the address ids and address details?",
    "answer": "SELECT DISTINCT a FROM addresses.a"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": "How many products do we have?",
    "answer": "SELECT COUNT(*) FROM product_table.Question"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": "Count the number of products.",
    "answer": "SELECT COUNT(*) FROM product_table.GROUP"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": "Show all product ids, product type codes, and product name.",
    "answer": "SELECT product_id FROM products_table.INSERT"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": "What are the ids, type codes, and names for all products?",
    "answer": "SELECT id FROM product_table.ash"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": "What is the price for the product with name Monitor?",
    "answer": "SELECT product_name, price"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": "Give the price of the Monitor product.",
    "answer": "SELECT price"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": "Show the minimum, average, maximum price for all products.",
    "answer": "SELECT * FROM product_prices.ORDER"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": "What are the minimum, average, and maximum prices across all products?",
    "answer": "SELECT product_id FROM productsGROUP_CONCATENATEIFS.product_id INNER JOIN products_joins_joinsJOINCOALESCEproduct_idproduct_joins_joinsproduct_joins_product_joinsONproduct_joins.product_idproduct_idproduct_joinsproduct_joins ON product_joins.product_idproduct_idproduct_joinsproduct_joinsOnproduct_joins.product_idproduct_idGROUP_CONCATENATEIFSproduct_id IN (SELECT product_id FROM products_joins_joinsJOINCOALESCEproduct_idproduct_joins_product_joinsONproduct_joins.product_idproduct_idproduct_joinsOnproduct_joinsproduct_joinsOnproduct_joinsproduct_id GROUP BY product_id) ORDER BY price ASC LIMIT 10"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": "What is the average price for products with type Clothes?",
    "answer": "SELECT AVG(price) FROM products_with_typeclothes.aji"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": "Return the average price of Clothes.",
    "answer": "SELECT AVG(price) FROM clothes.ORDER"
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": "How many hardware type products do we have?",
    "answer": "SELECT product_name FROM hardware_type_product.hdt WHERE type = '\u786c\u4ef6\u7c7b\u578b'"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": "Count the number of products of the type Hardware.",
    "answer": "SELECT COUNT(*) FROM Hardware.ORDER"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": "Show all product names with price higher than the average.",
    "answer": "SELECT name FROM products.price WHERE price > (SELECT AVG(price) FROM products.price GROUP BY id);"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have a price above the average for all products.",
    "answer": "SELECT name"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": "Show all hardware product names with price higher than the average price of hardware type products.",
    "answer": "SELECT product_name FROM hardware_tableGROUPHAVING_price_heighter_hierarchically_upper_largestprice_largest_price_123456789012345678912345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
    "answer": "SELECT Product"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": "What is the name of the most expensive product with type Clothes?",
    "answer": "SELECT R"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": "Give the name of the most expensive Clothes product.",
    "answer": "SELECT Product_name"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": "What is the product id and product name for the cheapest Hardware type product?",
    "answer": "SELECT p.id, p.name FROM hardware_table.hddp WHERE hddp.product_id = '\uff1f'"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": "Give the id and name of the cheapest Hardware product.",
    "answer": "SELECT * FROM HardwarePriceTable.hp WHERE hpa.id = 1"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": "List all product names in descending order of price.",
    "answer": "SELECT product_name, price"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": "What are the names of the products, sorted by descending price?",
    "answer": "SELECT * FROM product_nameORDER_by_priceDESC.lea"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": "Show all hardware type products in ascending order of price.",
    "answer": "SELECT Hardware_TYPE FROM Hardware_TYPE_HierarchyORDERED_byPriceASCEND.ansi"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": "What are the names of all Hardware products, sorted by price ascending?",
    "answer": "SELECT Name"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": "List all product type codes and the number of products in each type.",
    "answer": "SELECT * FROM ProductTypeCodeTable.ORDER"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": "How many products are there for each product type?",
    "answer": "SELECT product_type, COUNT(*) FROM productsGROUP_byproduct_type.Assuming  INNER JOIN onprod_idproduct_id_product_idINNER.connected ON prod_idproduct_id IN (SELECT p2.product_id FROM p1p2p3p3p4.p1p2p3p4 INNER JOIN p2p2p3p3p4.p1p2p3p4 ON p1p2p3p3p4.product_id = p2p2p3p3p4.product_id)"
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": "Show all product type codes and the average price for each type.",
    "answer": "SELECT T2.ProductTypeCode, AVG(T2.AveragePrice) FROM ProductType_codesT1T2JOINProductsPSTsT1PSTsT2ONProductType_codesT1.T1ID_T2ID INNER JOIN ProductsPSTsPSTsPSTsT2ONProductsPSTsPSTsT1.PSTID_PSTsPSTsT2ID ON ProductsPSTsPSTsPSTsT2.PSTID_PSTsPSTsT2ID = ProductPSTsPSTsPSTsPSTsT2.PSTID_PSTsPSTsT2"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": "What is the average price of products for each product type?",
    "answer": "SELECT product_type, AVG(price) FROM productsGROUPBYproduct_type.orc"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": "What are the product type code with at least two products?",
    "answer": "SELECT * FROM ProductsP2019_1363_47952_01328_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363_47952_2019_1363"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": "Give the product type codes of product types that have two or more products.",
    "answer": "SELECT product_type_code"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": "What is the product type code with most number of products?",
    "answer": "SELECT * FROM sales_table.ORDER"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": "What is the most frequent product type code?",
    "answer": "SELECT T1.product_type_code FROM table_name_nameuras_product_type_t1jointable_name_nameuras_product_type_t2ONtable_name_nameuras_product_type_t1.product_idtu2_idt2product_type_idt3"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": "How many customers do we have?",
    "answer": "SELECT COUNT(*) FROM customers.How"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers.",
    "answer": "SELECT COUNT(*) FROM customers.ITION"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids and customer names.",
    "answer": "SELECT customer_id, customer_name FROM customers.ash"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": "What are the ids and names of all customers?",
    "answer": "SELECT id, name FROM customers.ardi"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": "What is the customer address, customer phone, and customer email for Jeromy?",
    "answer": "SELECT Customer_address FROM CustomersJeromyWHERECustomer_idembali_to_4018_2020_2020_2020_2020_3693_0754_0000_0012_0000_0012_0145_0001_0015_0008_0007_0009_0011_0016_0003_0017_0004_0005_0006_0007_0008_0009_0009_0009_0009_0009_0009_0013_0002_0004_0005_0006_0007_0008_0009_0019_0001_0012_0008_0009_0009_0009_0009_0009_0009_0013_0002_0004_0005_0006_0007_0008_0009_0009_0009_0009_0009_0009_0013_0002_0004_0005_0006_0007_0008_0009_0009_0009_0009_0013_0002_0004_0005_0006_0007_0008_0009_0009_0009_0009_0013_0002_0004_0005_0006_0007_0008_0009_0009_0009_0009_000"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": "Give the address, phone, and email for customers with the name Jeromy.",
    "answer": "SELECT Address, Phone, Email FROM CustomersJeromy.j"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": "Show all payment method codes and the number of customers in each code.",
    "answer": "SELECT COUNT(DISTINCTcustomer_id) FROM payment_method_code_tableGROUPHAVING.customer_id INNER JOIN (SELECT customer_id, COUNT(*) AS total_count FROM payment_method_code_tableJoinING.payment_METHODCodeTable AS ptc) ON ptc.customer_id = t1.customer_id"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": "How many customers use each payment method?",
    "answer": "SELECT COUNT(*) FROM transactionsGROUPBypaymentMethod
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": "What is the payment method code used by most number of customers?",
    "answer": "SELECT * FROM transactionsWherepaymentMethodCodeINertasadamenteSELECTEDPMIDFROMtransactionsWherepaymentMethodCodeINertasadamenteSELECTEDPMIDFROMtransactionsWHEREpaymentMethodCodeINertasadamenteSELECTEDPMIDFROMtransactionsWhentransactionTypeISREGressionSELECTEDPMIDFROMtransactionsWheretransactionTypeISREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeISREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeISREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeISREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeISREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeISREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactionsWhentransactionTypeIsREGressionSELECTEDPMIDFROMtransactions"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": "Give the code of the payment method that is most commonly used.",
    "answer": "SELECT name FROM payments.anneer"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": "Show all customer names with the  payment method code used by least number of customers.",
    "answer": "SELECT customer_name, COUNT(*) FROM customer_info_2014_06_09_hql_2014_06_09_hql_2014_06_09_hql_2014_07_03_cust_name_2014_05_18_cust_id_2014_06_09_gql_2014_06_09_gql_2014_06_10_gql_2014_07_03_gql_2014_07_15_gql_2014_08_10_gql_2014_08_11_gql_2014_09_21_gql_2014_10_23_gql_2014_10_24_gql_2014_10_25_gql_2014_10_26_gql_2014_10_27_gql_2014_10_28_gql_2014_11_30_gql_2014_11_31_gql_2014_11_32_gql_2014_11_33_gql_2014_11_34_gql_2014_11_35_gql_2014_11_36_gql_2014_11_37_gql_2014_11_38_gql_2014_11_39_gql_2014_11_40_gql_2014_11_41_gql_2014_11_42_gql_2014_11_43_gql_2014_11_44_gql_2014_11_45_gql_2014_11_46_gql_2014_11_47_gql_20"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": "What are the names of customers who use the least common payment method?",
    "answer": "SELECT icamente"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": "What is the payment method and customer number for customer named Jeromy?",
    "answer": "SELECT payment_method FROM customersJeromyWHERE_namejeromy20190315ORDER_by_datecreatedLIMIT_1.aji"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
    "answer": "SELECT * FROM PaymentMethodTableWHEREpaymentMethodCodeINLOOKUPRedux.PAYMENT_METHOD_CODE, jeromy.customerNumber"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": "What are the distinct payment methods used by customers?",
    "answer": "SELECT iva"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": "Give the different payment method codes that customers use.",
    "answer": "SELECT paymentMethodCode FROM paymentMethods.INSERT"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": "Show the id and the product type for all products, order by product name.",
    "answer": "SELECT id FROM orders_2019_4782_2020_17336_1_2019_4782_2020_5543_1_2020_736_1_2019_4782_2020_4552_2_2020_1003_2_2020_4054_2_2020_1556_2_2020_3679_2_2020_4900_2_2020_1778_2_2020_1778_2_2020_1778_2_2020_1778_2_2020_3679_4_2_2020_1556_2_2020_3679_2_2020_4900_2_2020_1778_2_2020_1778_2_2020_1778_2_2020_1556_2_2020_3679_4_2_2020_1556_2_2020_3679_2_2020_4900_2_2020_1778_2_2020_1778_2_2020_1778_2_2020_3679_5_2_2020_1556_2_2020_3679_2_2020_4900_2_2020_1778_2_2020_1778_2_2020_1778_2_2020_3679_5_2_2020_1556_2_2020_3679"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": "What are the ids and product types for all products, sorted alphabetically by product name?",
    "answer": "SELECT product_id FROM products.sort_by_product_name ORDER BY id ASC"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": "What is the product type with least number of products?",
    "answer": "SELECT * FROM Products.WHEREStatus INNER JOIN ProductStatusors.JOINOrderStatusors ON ProductStatusors.ProductID = OrderStatusors.ProductID"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": "What is the code of the product type that is least common?",
    "answer": "SELECT T2.ProductName FROM ProductT2INNERJOIN.productPups AS P1ONTP1ProductIDPUPP1 INNER JOIN productPupsASPPONTP1ONTP2ProductIDASPPONTP2ONTP3ProductIDPUPP3INNERjoin.productPups AS P4 ON P4ProductIDPUPP1ONTP2ProductIDASPPONTP3ONTP4ProductIDPUPP4WHERET1.ProductName = 'Product A'"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": "How many customer orders do we have?",
    "answer": "SELECT COUNT(*) FROM order_table.ardi"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": "Count the number of customer orders.",
    "answer": "SELECT COUNT(*) FROM Orders.ardi"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
    "answer": "SELECT customerJeromy FROM orders_by_customerJeromy_jeromy_id_123456789012345678901234567890123456789023456789012345678901234567890234567890234567890234567890345678904444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": "What were the ids, dates, and status codes for orders made by Jeromy?",
    "answer": "SELECT id FROM OrdersajesJeromyWHEREjeromy_idornoISBLANKANDjeromy_dateiekONdate20210801.INDIRECT"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": "Show all customer names, ids and the number of orders by each customer.",
    "answer": "SELECT Customer_name, Order_id, COUNT(*) FROM customers.ardi"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": "What are the names, ids, and number of orders made for each customer?",
    "answer": "SELECT Customer_id, Order_id, COUNT(*) AS Order_count \nFROM Customersorders.INK \nGROUP BY Customer_id"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": "What is the customer id, name, phone, and email for the customer with most orders?",
    "answer": "SELECT c.id FROM customers_cmt_ordersorders_cmt_orders.cmt_orders AS c1 INNER JOIN customers_cmt_orders.cmt_orders AS c2 ON c1.customer_id = c2.customer_id INNER JOIN customers_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name_name"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
    "answer": "SELECT customer_id FROM orders_receivable_tableGROUPHAVINGSUM_order_id_maxorders_product_id__max_orders__product_id__max_order_date__min_date__min_date__max_order_quantity__max_price__price__min_price__min_price__max_value__max_price__min_price__min_price__max_amount__max_amount__min_amount__min_amount__min_amount__min_amount__max_amount__max_amount__max_amount__min_amount__max_amount__min_amount__min_amount__min_amount__min_amount__min_amount__max_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__max_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__min_amount__"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": "Show all order status and the number of orders in each status.",
    "answer": "SELECT COUNT(*) AS TotalOrders, Status FROM Orders.Only"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": "How many orders have each order status code?",
    "answer": "SELECT COUNT(*) FROM orders_status_code_orders_status_code_orders_id_1_1_1_2023_1_1_1_2023_1_1_2023_1_1_2023_2_1_2023_1_1_2023_3_1_1_1_2023_4_1_1_2023_5_1_1_1_2023_6_1_1_1_1_2023_7_1_1_1_1_2023_8_1_1_1_1_1_2023_9_1_1_1_1_2023_10_1_1_1_1_1_2023_11_1_1_1_1_2023_12_1_1_1_1_1_2023_13_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_2_1_2_1_2_1_2_1_2_2_2_2_2_2_2_3_1_1_1_1_1_2_2_3_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_2_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_"
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": "What is the order status code that is most common?",
    "answer": "SELECT COUNT(*) FROM orders_status_code.Answer"
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": "Give the order status code that is most frequent across customer orders.",
    "answer": "SELECT MAX(OrderStatusCode)"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": "How many customers do not have an order?",
    "answer": "SELECT COUNT(*) FROM orders.WHEREstatus INNER JOIN (SELECT status, COUNT(*) FROM ordersGROUP_bystatusORDERByorderdateASCLIMIT1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers who have not made an order.",
    "answer": "SELECT COUNT(*) FROM orders.anneer"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": "Show all product names without an order.",
    "answer": "SELECT DISTINCT p"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have not been ordered?",
    "answer": "SELECT A"
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": "How many products named Monitor have been ordered?",
    "answer": "SELECT COUNT(*) FROM orders_backorder_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_2021_15487_00263_20"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": "What is the total number of Monitor products that have been ordered?",
    "answer": "SELECT Product FROM OrdersORDEREDByQuantityLIMIT1.How"
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": "How many customers have ordered the product named Monitor?",
    "answer": "SELECT COUNT(*) FROM Orders.orderedBy WHERE ProductName = 'Monitor'"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": "Count the number of different customers who have bought a Monitor Product.",
    "answer": "SELECT COUNT(DISTINCTCustomerID) FROM Customers.Custories WHERE MonitorProduct = 'Monitor';"
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": "How many customers have an order?",
    "answer": "SELECT COUNT(*) FROM orders.GROUP_by_order_id"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": "Count the number of differnt customers who have made an order.",
    "answer": "SELECT COUNT(DISTINCTcustomer_id) FROM orders.ITION AS O"
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids without an order.",
    "answer": "SELECT Customer_id FROM Orders.unless_order"
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": "What are the ids of customers who have not made an order?",
    "answer": "SELECT DISTINCT T1.id FROM CustomersT1htt1htt1htt2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht2ht"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
    "answer": "SELECT o.order_id, o.order_date, COUNT(o.product_id) AS product_count, SUM(o.quantity) AS total_quantity \nFROM orders_2021_01_05_to_2021_09_05_tz
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
    "answer": "SELECT o.order_id, o.order_date FROM orders_with_quantity_7542202037133768003713376932870134614380519147538518674899007360323302085987148487413337841639931584454568599005072780871484741337841639931584454568599005072780871484741337841639931584454568599005072780871484741337841639931584454568599005072780871484741337841639931584454568599005072780871484741337841639931584454568599005072780871484741337841639931584454568599005072780871484741337841639931584454568599005072780871484741337841639931584454568599005072780871484741337841639"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": "How many buildings are there?",
    "answer": "SELECT FROM"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": "Count the number of buildings.",
    "answer": "SELECT COUNT(*) FROM buildings.WHERE \n    LIMIT 30"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": "List the names of buildings in ascending order of number of stories.",
    "answer": "SELECT Name FROM BuildingsORDEREDBYstoriesASC.SortedBy"
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
    "answer": "SELECT * FROM buildings_name_bstoriesORDER_bystory_countASC.Sorted"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": "List the addresses of buildings in descending order of building completion year.",
    "answer": "SELECT baddress FROM buildings.bld WHERE bCompletion_year = (SELECT MAX(bcom_year) FROM buildings.bld GROUP BY baddress);"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
    "answer": "SELECT DISTINCT building_name FROM buildingsORDER_byCompletion_yearDESCLIMIT10.SortedByOrder"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": "What is the maximum number of stories of buildings not completed in 1980?",
    "answer": "SELECT R"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
    "answer": "SELECT T2.num FROM buildings_blds2007344615T1453583006ASCTOBLASASCTOBAASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASAS"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": "What is the average population for all regions?",
    "answer": "SELECT AVG(T1.Population) FROM RegionT1JOINRegionR2ONRegionR1.Latitude_R2ID RIGHT JOIN RegionR3ONRegionR1.Latitude_R3ID AS LONR1 ON RegionR1.Latitude = LONR3.Latitude GROUP BY RegionR1.RID"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": "Compute the average population of a region.",
    "answer": "SELECT AVG(population) FROM region_table.Keep"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": "What are the names of regions in ascending alphabetical order?",
    "answer": "SELECT A"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": "List the names of regions in alphabetical order.",
    "answer": "SELECT RegionName"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": "What are the capitals of the regions with area bigger than 10000?",
    "answer": "SELECT Capital FROM StatesCapitalizedGROUPEDByCity_AreaHAVINGArea_Bigger_than_10000HAVINGCity_Area__100000000000HAVINGCity_Area__200000000000HAVINGCity_Area__300000000000HHAVINGCity_Area__400000000000HHAVINGCity_Area__500000000000HHAVINGCity_Area__600000000000HAVINGCity_Area__700000000000HHAVINGCity_Area__800000000000HHAVINGCity_Area__900000000000HHAVINGCity_Area__100000000000HHAVINGCity_Area__110000000000HHAVINGCity_Area__120000000000HHAVINGCity_Area__130000000000HHAVINGCity_Area__140000000000HHAVINGCity_Area__150000000000HHAVINGCity_Area__160000000000HHAVINGCity_Area__170000000000HHAVINGCity_Area__180000000000HHAVINGCity_Area__190000000000HHAVINGCity_Area__200000000000HHAVINGCity_Area__210000000000HHAVINGCity_Area__220000000000HHAVINGCity_Area__230000000000HHAVINGCity_Area__240000000000HHAVINGCity_Area__2500000000"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": "Give me the capitals of the regions whose area is larger than 10000.",
    "answer": "SELECT Capital"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": "List the capital of the region with the largest population.",
    "answer": "SELECT name, capital"
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": "Which region has the largest population? Give me the capital of the region.",
    "answer": "SELECT tus\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": "List the names of the regions with the top 5 largest areas.",
    "answer": "SELECT region, SUM(area) AS total_area FROM regionsGROUPINGByregionORDERLIMITINGCOUNTAstotal_area.prit"
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": "What are the names of the 5 largest regions in terms of area?",
    "answer": "SELECT Region"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": "Show the names of buildings and the names of regions they are in.",
    "answer": "SELECT building_name, region_name FROM buildings_table.ash"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": "For each building, return the name of the building and the name of the region it belongs to.",
    "answer": "SELECT B.BID, R.RID FROM buildings_BID_to_region_bid_map_v2_r4d2018_367500_20201016_960000_20181218_367500_20210218_367500_20181418_367500_20201618_367500_20211018_367500_20211219_367500_20211419_367500_20211519_367500_20211719_367500_20211819_367500_20211919_367500_20211119_367500_20211219_367500_20211418_367500_20211618_367500_20211819_367500_20211919_367500_20211119_367500_20211219_367500_20211418_367500_20211519_367500_20211719_367500_20211819_367500_20211919_367500_20211119_367500_20211219_367500_20211418_367500_20211519_3"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": "Show the names of regions that have more than one building.",
    "answer": "SELECT Region_name FROM Building_Building_info_table_nameGROUP_by_region_nameORDER_by_countLIMIT_NUMBERLIMITED.explain"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": "Which regions have more than one building? Give me the names of the regions.",
    "answer": "SELECT SALESASASASASASA"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": "Show the capital of the region that has the most buildings.",
    "answer": "SELECT name FROM building_info_table_nameWHERE_region_id.incr_by_level INNER JOIN building_info_table_nameONbuilding_info_table_name.region_id_id_id_to_region_id_id_incr_by_level_id ON building_info_table_name.region_id_id_id_to_region_id_incr_by_level_id_id IN (SELECT region_id_id FROM region_table_nameWHERE.level_id INNER JOIN level_table_nameONlevel_table_name.level_id_id_id_to_level_id_id_incr_by_level_id ON level_table_name.level_id_id_id_to_level_id_id IN (SELECT region_id_id FROM region_table_nameWHEREid_level_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_bylevel_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_by_level_id_id_incr_bylevel_id_id_in"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": "Which region has the largest number of buildings? Show me the capital of the region.",
    "answer": "SELECT swaps\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": "Show addresses of buildings and the capitals of regions they are in.",
    "answer": "SELECT address, name FROM buildings_address_table.INSERT"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": "For each building, return the address of the building and the name of the region it belongs to.",
    "answer": "SELECT B.Address, R.Name FROM buildings_bldghn2017.BO"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
    "answer": "SELECT name FROM buildings_in_regionAbruzzo_name2016.ash"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": "Please show each completion year and the number of buildings completed in that year.",
    "answer": "SELECT * FROM completions_year_table.ORDER"
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": "For completion year, return the year and the number of buildings completed.",
    "answer": "SELECT Year, COUNT(*) FROM Buildings.ORDER"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": "List the year in which the most buildings are completed.",
    "answer": "SELECT Year FROM BuildingCompletionYear.ORDER"
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": "In which year did the most building constructions complete?",
    "answer": "SELECT YEAR FROM ConstructionCompleted.SELECTYear"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": "List the names of regions that do not have any buildings.",
    "answer": "SELECT name"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": "What are the names of regions in which there are no buildings?",
    "answer": "SELECT FROM"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
    "answer": "SELECT name FROM building_info_blds_tableJoiningsONnamebuilding_id_column.joinINGONyear_columnJOINingsONyear_column AS year, ONname_name_column.joinINGONname_name_column AS name"
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
    "answer": "SELECT years FROM completion_projectWHERECompletion_year_in_bld_1000_3600_2000_2010_2015_2018_2020_2024_3600_2000_2019_3750_3800_3850_3950_4000_4050_4100_4150_4200_4250_4300_4400_4500_4600_4700_4800_4900_5000_5100_5200_5300_5400_5500_5600_5700_5800_5900_6000_6100_6200_6300_6400_6500_6600_6700_6800_6900_7000_7100_7200_7300_7400_7500_7600_7700_7800_7900_8000_8100_8200_8300_8400_8500_8600_8700_8800_8900_9000_9100_9200_9300_9400_9500_9600_9700_9800_9900_10000_11000_12000_13000_14000_15000_16000_17000_18000_19000_20000_21000_22000_23000_2"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": "Show the distinct addresses of buildings.",
    "answer": "SELECT DISTINCT building_id FROM buildings.INSERT"
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": "Give me a list of distinct building addresses.",
    "answer": "SELECT * FROM buildings.ORDER"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": "Show the completed years of buildings in descending order of the number of stories.",
    "answer": "SELECT name FROM buildings.ORDER"
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
    "answer": "SELECT T1.Name, T2.Story, T3.CompletionYear FROM BuildingsBTASASaurusT1.TBASASaurus AS T1 INNER JOIN BuildingsBTASASaurusT2.TBASASaurus AS T2 ON T1.TbASaurusId = T2.TbASaurusId GROUP BY T1.Name, T2.Story"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": "List details of all the channel in alphabetical order .",
    "answer": "SELECT *"
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": "What is the list of channel details ordered alphabetically ?",
    "answer": "SELECT *"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": "How many services are there?",
    "answer": "SELECT A.One"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": "Count the number of services.",
    "answer": "SELECT COUNT(*) FROM service_table.service"
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": "What is the most common analytical layer type code?",
    "answer": "SELECT AVG(price)"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": "Find the analytical layer type code that appears most often.",
    "answer": "SELECT A.typecode FROM AnalyticalLayerTypeA.likte INNER JOIN AnalyticalLayerTypeB.likte ON AnalyticalLayerTypeA.likte.Like = AnalyticalLayerTypeB.likte LIMIT 1"
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
    "answer": "SELECT service FROM Services__service__customer__hardy_kutch__service__user_19720603__service__hardy_kutch__service__user_48435_19720603__service__service__user_51956_19720603__service__user_55635_19720603__service__user_56373_19720603__service__user_57980_19720603__service__user_58340_19720603__service__user_58435_19720603__service__user_59333_19720603__service__user_59594_19720603__service__user_59699_19720603__service__user_59840_19720603__service__user_59920_19720603__service__user_60400_19720603__service__user_60435_19720603__service__user_60455_19720603__service__user_60508_19720603__service__user_60635_19720603__service__user_60665_19720603__service__user_60694_19720603__service__user_60700_19720603__service__user_60745_19720603__service__user_60760_19720603__service__user_60800_19720603__service__user_60835_19720603__"
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
    "answer": "SELECT TelTel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": "Find the details of the services that have been used by more than 3 times .",
    "answer": "SELECT name FROM services_name_served_count_tableGROUP_CONCATINCTnameORDER_bycount.count LIMIT 3"
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": "Which services were used by customers by more than 3 times? Give me the service details.",
    "answer": "SELECT SCSSCSCSCSCSCSCSCSCSCSCSSCSCSCSSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCscSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCscSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCscSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCscSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCscSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCSCscSCSCSCSCSCSC"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has used services the most times.",
    "answer": "SELECT MAX(CURDATE) FROM customers_cured_subcriptions.WHERE \n    GROUP BY customer_id ORDER BY COUNT DESC LIMIT 1"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": "return the details of the customer with largest count of used services.",
    "answer": "SELECT COUNT(*) AS service_count, MAX(service_count) AS max_service_count"
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": "Find the name of the customer who has used the most types of services .",
    "answer": "SELECT * FROM customers_usage_data.INSERT \n    RIGHT JOIN usage_data.user ON customer_id = usage_data.customer_id ORDER BY usage_data.user_id DESC LIMIT 1"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": "Which customer has used the most types of services ? Give me the customer details .",
    "answer": "SELECT punish"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has never used any services .",
    "answer": "SELECT customer"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": "Which customers never used any services ? Give me the customer details .",
    "answer": "SELECT Strengthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthenngthen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": "Find the details of the customers who have used the least-used service .",
    "answer": "SELECT * FROM customer_usage_data_2023_1_12_5_3_2_10_4_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_101_102_103_104_105_106_107_108_109_110_111_112_113_114_115_116_117_118_119_120_121_122_123_124_125_126_127_128_129_130_131_132_133_134_135_136_137_138_139_140_141_142_143_144_145_146_14"
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
    "answer": "SELECT kelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkel"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": "How many distinct customer and services details are there?",
    "answer": "SELECT BY"
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": "Count the total number of available customers and services details.",
    "answer": "SELECT COUNT(*) \nFROM customer_info_table.customers"
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": "Find all the customers whose name contains \"Kutch\".",
    "answer": "SELECT customer"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
    "answer": "SELECT Name, Email"
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
    "answer": "SELECT Service_name"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
    "answer": "SELECT hikes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
    "answer": "SELECT *"
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
    "answer": "SELECT issues\n
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
    "answer": "SELECT service_id FROM service_table.s"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
    "answer": "SELECT column"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
    "answer": "SELECT Customer"
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
    "answer": "SELECT finger\n
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": "How many integration platforms are successful?",
    "answer": "SELECT COUNT(*) FROM integration_platforms.WHEREintegration_type INNER JOIN integration_types_e2E20173988435367484335503E1E103E1E3E103E1E3E1E103E103E1E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3E3"
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": "Count the number of integration platforms that have \"Success\" in the details.",
    "answer": "SELECT COUNT(*) FROM IntegrationPlatformDetails.WHERE \n    INNER JOIN IntegrationPlatformDetails.InnER ON IntegrationPlatformDetails.InnER.integratedPlatformID = IntegrationPlatformDetails.InnER.integratedPlatformID"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": "List the details of all the customers who are associated with a failed integration platform .",
    "answer": "SELECT *"
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
    "answer": "SELECT The"
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": "Which service ( s ) has never been used by any customer ? List their details .",
    "answer": "SELECT list"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": "Find details of the services that no customer has ever used . Return the service details .",
    "answer": "SELECT name FROM customer_service_2018_3694_2279_4407_5145_4146_4155_2040_2121_2576_4221_2388_2198_2188_3426_1968_4945_3316_4214_2149_1060_9477_4964_3418_1290_5145_4945_3968_4945_3968_4945_3968_4945_3968_4945_3968_4945_3968_4945_2040_2121_2576_4221_2388_2198_2188_3426_1968_4945_3316_4214_2149_1060_9477_4964_3418_1290_5145_4945_3968_4945_3968_4945_3968_4945_3968_4945_3968_4945_3968_4945_2040_2121_2576_4221_2388_2198_2188_3426_1968_4945_3316_4214_2149_1060_9477_4964_3418_1290_5145_4945_3968_4945_3968_4945_3968_4945_39"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": "Find all the layer type codes with their corresponding usage count.",
    "answer": "SELECT LayerTypeCode, UsageCount FROM LayerUsageTableGROUP_CONCATengerBYLayerLevelORDERLIMIT100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
    "answer": "SELECT LAYERS.LAYERS_TYPE_CODE, COUNT(*) AS NumTimes\nFROM AnalyticsLayerAsanaLayerTreeLayerTreeLayersTreeLayerTreeLayersTreeLayerTreeLayersTreeLayersTreeLayerTreeLayerTreeLayersTreeLayerTreeLayerTreeLayersTreeLayerTreeLayerTreeLayersTreeLayersTreeLayerTreeLayersTreeLayerTreeLayerTreeLayersTreeLayersTreeLayersTreeLayerTreeLayersTreeLayerTreeLayersTreeLayersTreeLayerTreeLayersTreeLayerTreeLayersTreeLayersTreeLayerTreeLayersTreeLayerTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayerTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLayersTreeLlayersTreeLayers"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
    "answer": "SELECT IVE"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
    "answer": "SELECT QualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualqualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQualQual\n
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": "How many vehicles do we have?",
    "answer": "SELECT ANSWER"
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": "Count the number of vehicles.",
    "answer": "SELECT COUNT(*) FROM vehicle_table.ardi"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": "Show names for all vehicles in descending order of model year.",
    "answer": "SELECT Model_year FROM VehiclesORDER_by.Model_yearDESC LIMIT 1"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": "What are the names of all vehicles, ordered by model year descending?",
    "answer": "SELECT V"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": "List all distinct types of powertrain of vehicles.",
    "answer": "SELECT DISTINCT T2.type FROM powertrain_t2_tableT2T1T2U2ASPUSpowertrain_t2_t2U2ASPsPowertrain_t2_t2U2ASPsPowertrain_t2_t2U2ASPsNameT2H2ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2_t2U2ASPSDescriptionT2L1ASPTable_nameU2ASPIsPowertrain_t2"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": "What are the different types of powertrains?",
    "answer": "SELECT BY"
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
    "answer": "SELECT *\nFROM vehicle_data_v2013_2014_r2017_2018_2019_2020_2021_2022_2023_2024_r2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2091_2092_2093_2094_2095_2096_2097_2098_2099_2100_2101_2102_2103_2104_2105_2106_2107_2108_2109_2"
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
    "answer": "SELECT vehicle_model FROM vehicles_tableJOIN_powertrain_tableONvehicles_table.ModelID INNER JOIN powertrain_tableONpowertrain_table.ModelID ON vehicles_table.ModelID = powertrain_table.ModelID;"
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": "Show types of powertrain with vehicles both from 2014 and 2013.",
    "answer": "SELECT name FROM cars_cars_2014_2013_cars_cars_2014_2013_cars_cars_2013_cars_2013_cars_2015_cars_cars_2015_cars_cars_2015_cars_2016_cars_2017_cars_cars_2017_cars_2018_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_2019_cars_20"
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
    "answer": "SELECT two"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": "Show all types of powertrain and the number of vehicles in each type.",
    "answer": "SELECT Powertrain, Number_of_Verts FROM powertrain_data_tableGROUPHAVINGpowertrain_type_nameINallonSELECT.powertrain, COUNTvlpowertrain_idFROMpowertrain_data_tableGROUPHAVINGpowertrain_type_nameINallonSELECT.powertrain, COUNTvlpowertrain_idFROMpowertrain_data_tableGROUPHAVINGpowertrain_type_nameINallonSELECT.Powertrain, COUNTvlpowertrain_idFROMpowertrain_data_tableGROUPHAVINGpowertrain_type_nameINallonSELECT.powertrain, COUNTvlpowertrain_idFROMpowertrain_data_tableGROUPHAVINGpowertrain_type_nameINallonSELECT.powertrain, COUNTvlpowertrain_idFROMpowertrain_data_tableGROUPHAVINGpowertrain_type_nameINallonSELECT.powertrain, COUNTvlpowertrain_idFROMpowertrain_data_tableGROUPHAVINGpowertrain_type_nameINallonSELECT.powertrain, COUNTvlpowertrain_idFROMpowertrain_data_tableGROUPHAVINGpowertrain_type_nameINallonSELECT.powertrain"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": "How many vehicles have each type of powertrain?",
    "answer": "SELECT * FROM powertrain_type_map.GROUP"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": "What is the type of powertrain with most number of vehicles.",
    "answer": "SELECT TYPE FROM engines_type.INSERT"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": "Which type of powertrain is most common?",
    "answer": "SELECT teammates"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
    "answer": "SELECT MIN(year), MAX(year), AVG(year) FROM vehicles_data_table.etable_name WHERE vehicle_id IN (SELECT vehicle_id FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table.etable_name WHERE year IN (SELECT year FROM vehicles_data_table."
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
    "answer": "SELECT MIN(year), MAX(year), AVG(year) FROM vehicles_year2021GROUPED_byvehicle_type_year2021ORDEREDByyearLIMIT100.Answer"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
    "answer": "SELECT T2.ModelYear, T2.Name FROM Vehicles.T2 INNER JOIN Vehicles.T2 ON Vehicles.T2.ModelID = Vehicles.T2.ModelID INNER JOIN Vehicles.T2 ON Vehicles.T2.ModelName = Vehicles.T2.ModelName GROUP BY T2.ModelYear ORDER BY SUMFuelEfficiencyRate DESC LIMIT 1;"
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
    "answer": "SELECT vehicle_name, model_year"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
    "answer": "SELECT Type, num_vehicles, avg_fuel_cost"
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
    "answer": "SELECT BY"
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": "Show the name, age, membership credit for all customers?",
    "answer": "SELECT Name, Age, MembershipCredit FROM Customers.why"
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": "What are the names, ages, and membership credits for all customers?",
    "answer": "SELECT customer_id FROM customers.c"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": "Show the name and age of the customer with maximum membership credit.",
    "answer": "SELECT Name, Age FROM Customers.max"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": "What is the name and age of the customer with the most membership credit?",
    "answer": "SELECT customer_name, age FROM customers_with_most_membershipcreditGROUPED_by_customer_nameORDERLIMIT1.ais"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": "What is the average age for customers with a membership credit above the average?",
    "answer": "SELECT AVG(age) FROM customers_with_a_membership_above_average.stituting"
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": "Return the average age for customers who have membership above the average across all customers.",
    "answer": "SELECT AVG(age) FROM customers_with_memberhip_info.ather"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": "Show all information for all discounts.",
    "answer": "SELECT discount_name, COUNT(*) AS total_count FROM discountsGROUPBydiscount_nameORDER_bytotal_countDESCLIMITnum.SelectDiscountName"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": "Return all information about discounts.",
    "answer": "SELECT * FROM discount_info.INSERT"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": "Show the name and total hours of renting for each vehicle.",
    "answer": "SELECT VName, COUNT(*) AS TotalHours FROM VehiclesVrentedGROUPINGByVCar_idORDERByTotalHoursdescLIMIT1.AVINGTotalHours  AS TotalHours"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": "What are the names and total rental hours for each vehicle?",
    "answer": "SELECT vehicles, SUM(totrental_hours) FROM vehiclesGROUPING_by_typeORDERbyrental_hoursLIMIT1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": "Show the name of vehicles with no renting history.",
    "answer": "SELECT T2.VID FROM VehiclesT2V3T1S2JWHEREIsRentedNoT2V3T1S2JIsNULL.ORDER"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles that have never been rented?",
    "answer": "SELECT FROM"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": "Show the name of customer with at least two renting history records.",
    "answer": "SELECT Customer_id, COUNT(*) FROM Customers_c1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": "What are the names of customers who have two or more records of rental history?",
    "answer": "SELECT Customer_id, Name FROM RentalHistory2018.Only"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": "Show the name and model year of the vehicle with most number of renting history records.",
    "answer": "SELECT model_year, COUNT(*) FROM vehicles_rental_history_tableGROUPEDByrenting_statusORDERBycountLIMIT10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": "What is the name and model year of the vehicle which has been rented the most times?",
    "answer": "SELECT the.model_year FROM vehicles_tableanan_rental_dataWHERErenter_id_to_vehicle_name_in_tableanan_rental_data.equalsrones_to_vehicle_name_in_tableanan_rental_data"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": "Show the vehicle name with a descending order of total hours of renting.",
    "answer": "SELECT * FROM VehicleNameORDER_byTotalHoursdesc.LIMIT LIMIT 1"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles, sorted descending by total hours of renting?",
    "answer": "SELECT V"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": "What is the discount name with most number of renting history records?",
    "answer": "SELECT DiscountName FROM rentals_history_records_rates_history_most_renting_hires_with_history_2017_03_05_000000040936123630802929_2017_03_12_000000040936123630802929_2017_03_13_000000040936123630802929_2017_03_15_000000040936123630802929_2017_03_16_000000040936123630802929_2017_03_17_000000040936123630802929_2017_03_18_000000040936123630802929_2017_03_19_000000040936123630802929_2017_03_20_000000040936123630802929_2017_03_21_000000040936123630802929_2017_03_22_000000040936123630802929_2017_03_23_000000040936123630802929_2017_03_24_000000040936123630802929_2017_03_25_"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": "Return the name of the discount that corresponds to the most rental history records.",
    "answer": "SELECT Name FROM DiscountsGROUPHAVINGCOUNTISNOTISINchroniclesDiscounts.CASERETURNINGWHENDiscountID INNER JOIN (SELECT COUNT(*) FROM Users.JoinedUsers) AS i ON discounts.id = i.discounts.id GROUP BY i"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
    "answer": "SELECT name, powertrain_type FROM cars_rental_info_table.cars WHERE rental_time >= '2021-06-01' GROUP BY name ORDER BY COUNT DESC LIMIT 3"
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
    "answer": "SELECT Name FROM carsGROUPHAVINGTotalRentalHoursge30000.SELECT RIGHT JOIN CarsGroupINGTotalRentalHoursge30000.ON \n    AS ASCarName AS ASCarGroupINGTotalRentalHoursSELECT ON AAS = 'CarName'\n    GROUP BY ASCarName"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
    "answer": "SELECT car_model, fuel_type, AVG(fuel_amount) FROM vehicles_data_v2_2017_395836741730776570WHEREpowertrain_type_in_table_1_column_2ISBLANKFunction.INSERT"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
    "answer": "SELECT vehicle_year, engine_type, fuel_type, price"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the average amount of a student loan?",
    "answer": "SELECT BY"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": "Compute the average amount of student loans.",
    "answer": "SELECT AVG(Amount) FROM StudentLoans.INSERT"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
    "answer": "SELECT S.TNAS, S.SNAME, T1.BIography, T2.BIography"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
    "answer": "SELECT biographical_data, student_id FROM students_classroom_two_and_laterWHEREclass_type_id.in_set INNER JOIN students_classroom_two_and_later_on_class_type_id.on_class_type_id ON students_classroom_two_and_later.on_class_type_id.class_type_id IN (SELECT class_type_id FROM students_classroom_one_and_laterGROUP_CONCATENATEJOINCLASS_TYPE_id.class_type_id, JOINCLASS_TYPE_id.class_type_id WHERE class_type_id IN (SELECT class_type_id FROM students_classroom_one_and_laterON_class_type_id.on_class_type_id))"
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
    "answer": "SELECT FROM"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
    "answer
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data of the students who never had a detention or student loan .",
    "answer": "SELECT id FROM student_data_2018_2020_2020_3678_3945_3946_3947_3948_3949_4050_4051_4052_4053_4054_4055_4056_4057_4058_4059_4100_4101_4102_4103_4104_4105_4106_4107_4108_4109_4110_4111_4112_4113_4114_4115_4116_4117_4118_4119_4120_4121_4122_4123_4124_4125_4126_4127_4128_4129_4130_4131_4132_4133_4134_4135_4136_4137_4138_4139_4140_4141_4142_4143_4144_4145_4146_4147_4148_4149_4150_4151_4152_4153_4154_4155_4156_4157_4158_4159_4160_4161_4162_4163_4164_4165_4166_4167_4168_4169_4170_4171_4172_4173_4174_4175_4176_4177_417"
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students never had a detention or student loan ? Find their biographical data .",
    "answer": "SELECT TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
    "answer": "SELECT DISTINCT loan_amount, loan_date FROM students_table.joinAchievements_table AS a WHERE s_id = (SELECT s_id FROM students_table.joinAchievements_table AS a WHERE a.id = s.id)"
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the amount and date of loan for the students who have two or more achievements.",
    "answer": "SELECT amount, DATE FROM loans_table2023L24H2001D2E2007A001B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023L24H2001D2E2007A01B2023"
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the detail and id of the teacher who teaches the most courses.",
    "answer": "SELECT teacher_id FROM course_tablesteacher_id_count.c"
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
    "answer": "SELECT MAX(T2.id) FROM T2jt3T123T45678901234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234"
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the distinct descriptions of all the detentions which have ever happened?",
    "answer": "SELECT OUT"
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the distinct descriptions of all the detentions that have happened.",
    "answer": "SELECT DISTINCT Description FROM DetentionDetails.ancest"
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the personal details and the address type descriptions of all the students.",
    "answer": "SELECT PersonalDetails FROM StudentDetailsWHEREStudentIDINNOISINIBOutlet_nameIBOutlet_valuegetterFromIBOutlet_namegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutlet_valuegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValuegetterIBOutletvaluegetterIBActionactionButtonActionNameValue"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the personal details and the address type descriptions of each student?",
    "answer": "SELECT * FROM student_info.INSERT \n    WHERE id = 1"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the the address details and the biographical information of the students.",
    "answer": "SELECT A.address_details, B.biography"
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the address details and biographical information of each student?",
    "answer": "SELECT name, email, phone FROM students.Here, the_students_name_columnnameliststhecolumnnamestowhichstudentiscollected.Student_id_columnliststhecolumnnamestowhichstudentiscollected"
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and the date of the transcript of all the students.",
    "answer": "SELECT biography_name, biography_date FROM students.HEREDO"
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and the date of transcript issuance of each student?",
    "answer": "SELECT Name, Date_of_transcript"
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
    "answer": "SELECT result_id FROM behavioral_monitor_detailsGROUP_CONCATHAVINGCOUNTHKUSTASISGROUP_CONCATHAVINGCOUNTHKUSTASISORDERByresult_idASCLIMIT10000.OUTPUT AS CommonResult"
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
    "answer": "SELECT COUNT(*) FROM behavioral_monitor_details.INSERT"
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
    "answer
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
    "answer": "SELECT s.snumber, s.name, COUNT(*) AS count FROM student_sds2ASs2s2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd2ASd"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
    "answer": "SELECT A"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
    "answer": "SELECT student_id FROM behavior_monitoring_details_student_id_2019_2021_3046_527_87_98_105_106_107_108_109_110_111_112_113_114_115_116_117_118_119_120_121_122_123_124_125_126_127_128_129_130_131_132_133_134_135_136_137_138_139_140_141_142_143_144_145_146_147_148_149_150_151_152_153_154_155_156_157_158_159_160_161_162_163_164_165_166_167_168_169_170_171_172_173_174_175_176_177_178_179_180_181_182_183_184_185_186_187_188_189_190_191_192_193_194_195_196_197_198_199_200_201_202_203_204_205_206_207_208_209_210_211_212_213_214_215_216_217_21"
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have gone through any event? List the students' biographical data and event date.",
    "answer": "SELECT TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and event date for students who participated in any events.",
    "answer": "SELECT title, birth_date, gender FROM students_event_info_table.INSERT \n       WHERE year = (SELECT MIN(year) FROM students_event_info_table.join_students) \n       GROUP BY student_id;"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
    "answer": "SELECT COUNT(*) FROM student_eventsGROUPHAVING.event_type INNER JOIN student_events_event_types_event_type_2ONstudent_events_event_type_1.event_type_id__INNERJOIN_event_types ON Student_events_event_types_event_type_2.event_type_id__INNERjoin_event_types_event_types_event_type_3ONStudent_events_event_type_3.event_type_id__INNERjoin_event_types_event_type_4ONEvent_types_event_type_4_event_type_id__INNERJoin_event_types_event_type_5ONStudent_events_event_type_5event_type_id__INNERJOINevent_types_event_type_6ONevent_types_event_type_6_event_type_id__INNERjoinstudent_events_event_types_event_type_7ONevent_types_event_type_7_event_type_id__INNERJoinevent_types_event_type_8ONevent_types_event_type_8_event_type_id__INNERJOUNINGstudent_events_event_types_event_type_3_event_type__event_type_id__INNERWITHevent_types_event_type_4Event_type__event_type_id__INNERWITHevent_types_event_type_5Event_type__event_type_id__INNERWITHevent_types_event_type_6Event_type__event_type_id__INNERWITHevent_types_event_type_7Event_type__event_type_id__INNERWITHstudent_events_event_types_event_type_8Event_type__event_type_id__GROUPSELECT \n    \t<Student_events.event_type_1.event_type_id__FROM \n    \t\t GROUP BY student_events.event_type_1.event_type_id__"
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
    "answer": "SELECT COUNT(*) FROM students_event_type_code_20180123.h"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": "How are all the achievements described? List the achievement detail and the type description.",
    "answer": "SELECT theAchievement"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the achievement detail and the type description of each achievements?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              "
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many teachers have taught a student who has not won any achievements?",
    "answer": "SELECT FROM"
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of teachers who have taught students who have never won an achievement.",
    "answer": "SELECT COUNT(*) FROM teachers_tablesWHEREAchievement_status_id_in_bk_column_nameIn_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in_bk_column_nameIs_in_achievement_status_id_in"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the date of the transcripts and the transcript details.",
    "answer": "SELECT date, trans"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the date and detail of each transcript?",
    "answer": "SELECT DATE, T2.T1 FROM transcriptT1AS2R20220804T20220805WHEREtranscriptT1AS2R20220804T20220806ISBLANKORDERBYtranscriptT2AS2R20220804T20220806DATEheadBeginINGWITHlowerCASEtranscriptT1AS2R20220804T20220805.ANS"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the achievement type code, achievement details and the date of the achievements.",
    "answer": "SELECT * FROM Achievements.ORDER"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the type code, details, and date of each achievement?",
    "answer": "SELECT MAX(T2) FROM achievements.aji"
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the detention start time and end time of the detentions.",
    "answer": "SELECT COUNT(*) AS COUNT, MIN(DISTINCTti) FROM detentions.INSERTITION"
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the starting time and ending time of each detention record?",
    "answer": "SELECT TELLING"
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the biographical information of the students whose details include the substring 'Suite'.",
    "answer": "SELECT * FROM Student_info.INSERT \n    WHERE Name = 'Suite';"
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
    "answer": "SELECT ASUGASULASULASULASULASULAS"
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details for all the pairs of teachers and students who are in the same class.",
    "answer": "SELECT T2.Name, T1.Name FROM teacher_to_student_table.T2 AS T2 INNER JOIN student_toteacher_table.T1 AS T1 ON T2.T1ID = T1.T1ID GROUP BY T2.Name"
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
    "answer": "SELECT teacher_name FROM table_nameGROUP_CONCATteacher_nameSEPARATORtupe_separating_string2SELECTstu_nameFROMtable_nameGROUP_CONCATstu_nameSEPARATORtupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEPARATORtupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CONCATSTUNameSEiatortupe_separating_string2SELECTSTU_NAMEFROMtable_nameGROUP_CON"
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
    "answer": "SELECT COUNT(*) FROM courses_tables.courses WHERE instructor_id = (SELECT MAX(instructor_id) FROM instructors_table.id LIMIT 1);"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
    "answer": "SELECT honey"
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
    "answer": "SELECT COUNT(DISTINCTStudentID) FROM StudentsWHERECourseLevelING_1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
    "answer": "SELECT Him"
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students take 2 courses? List student id and details.",
    "answer": "SELECT list"
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the ids and details of the students who take 2 courses?",
    "answer": "SELECT T1.student_id, T1.course_id, T2.id, T2.name FROM StudentT1joinCourseT2ONStudentT1.student_idequalsCourseT2student_id GROUP BY T1.student_id, T1.course_id"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the least common detention type? Show the type code and the description.",
    "answer": "SELECT * FROM detention_type_codes.INSERT"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the type code and description of the least common detention type.",
    "answer": "SELECT *"
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
    "answer": "SELECT List"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details for students whose student loan is above the average amount.",
    "answer": "SELECT the_name FROM students_info_tableJOINloan_info_tableONstudents_info_table.student_ididentid_columnidentid INNER JOIN loan_info_tableONloan_info_table.student_ididentid_columnstudent_id ON loans_info_table.student_ididentid_columnstudent_id_id = (SELECT DISTINCT student_id FROM loan_info_tableJOINstudent_info_tableONstudent_info_table.student_ididentid_columnstudent_id_id WHERE student_id_id = (SELECT DISTINCT id FROM students_info_tableSELECTid_idFROMloan_info_tableWHEREstudent_id_id_idINNER.join) GROUP BY student_id)"
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the earliest date of loan?",
    "answer": "SELECT ANSWER"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the earliest date of loan in the record.",
    "answer": "SELECT MAX(DATE) FROM loanhistory.INSERTITION\n       LIMIT 1"
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student has the loan with the minimum value? List the student's biographical information.",
    "answer": "SELECT list"
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical information of the student with the smallest student loan.",
    "answer": "SELECT MIN(T2.T1) FROM StudentT2T1JOINStudentT2SST1ONStudentT2T1.SST1ID INNER JOIN StudentT2T2ONStudentT2T2.ID ON StudentT2T2.SST2ID = StudentT2T1.SST2ID;"
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the transcript issued for the student with loan of maximum value?",
    "answer": "SELECT the_date FROM loans_later_2021_12_30WHEREStudent_id_of_later_2021_12_30ornoresent_to_now.ANDLateral_name_of_later_2021_12_30ornoresent_to_now"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the transcript issuance date for the student with the largest amount of loan?",
    "answer": "SELECT T2.product_name FROM StudentT1jtLstASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs2019307652ASBNs"
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
    "answer": "SELECT vote"
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
    "answer": "SELECT name FROM teachers_classroom_history_tableJOINstudents_classroom_history_tableONstudents_classroom_history_table.student_id INNER JOIN teachers_classroom_history_tableJOINstudents_classroom_history_tableONteacher_classroom_history_tableteacher_idINNERJOINCLASSROOMS_PERStudent_id.student_id ON students_classroom_history_table.student_id IN (SELECT MIN(students_classroom_history_table.student_id) FROM CLASSROOMS_PERStudent_idGROUPbySTUDENT_idORDERLIMIT100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": "How much total loan does each student have ? List the student ids and the amounts .",
    "answer": "SELECT student_id, SUM(amount)"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id and the total amount of loan he or she has.",
    "answer": "SELECT ID, SUM(LOAN) FROM StudentLoan.student"
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses does each student take? List the student id, the student biographical data and the course count.",
    "answer": "SELECT COUNT(*) FROM students.INSERT"
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
    "answer": "SELECT ID FROM StudentBiblioGROUPINGBy_student_idORDEREDLIMITCOUNT.WITHIN GROUP BY student_id"
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have gone through a detention?",
    "answer": "SELECT COUNT(*) FROM DetentionStudents.WHERE_students_type INNER JOIN (SELECT Students_type FROM DetentionStudents.join WHERE Student_id = 1) ON DetentionStudents.id = 1"
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of students who have a detention record.",
    "answer": "SELECT COUNT(*) FROM student_data.INSERT \n       INNER JOIN student_data.docket_records ON student_data.id = student_data.docket_records.student_id \n       INNER JOIN student_data.docket_records_students ON student_data.docket_records.id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records_students_dockets ON student_data.docket_records.docket_id = student_data.docket_records_students.docket_id \n       INNER JOIN student_data.docket_records"
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the code and description of the most common student address type?",
    "answer": "SELECT DISTINCT addresses FROM students_address_table.ORDER"
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the most common student address type? Give me the code and description of the address type.",
    "answer": "SELECT FROM_address WHERE city='New York'"
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
    "answer": "SELECT BY"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
    "answer": "SELECT T2.name FROM StudentsT1JOINEventsE1ONStudentsT1.idT1IdE1E1_idE1T1 INNER JOIN StudentsT2ONStudentsT1.idT2IdE2E2_idE2T2 ON EventsE1.EventId = StudentsT2.eventId"
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
    "answer": "SELECT students.address FROM students_address_tableJOINtranscript_tableONstudents_address_table.address_idastetranscript_tablestudent_idasttranscript_table"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
    "answer": "SELECT T.start_time, T.end_time FROM students_with_2_transcriptsTINNERJointranscriptsT2ONttrials.T1id INNER JOIN transcriptsONtranscript.T2id ON t1id = t2.id"
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": "When did all the detentions start?",
    "answer": "SELECT Date"
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the detention start date for all the detention records.",
    "answer": "SELECT D1.StartDate FROM DetentionRecords.ITS"
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": "List all the author names.",
    "answer": "SELECT Name FROM Authors.HER"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": "What are the names of all the authors?",
    "answer": "SELECT FROM"
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": "Show all Client names and their addresses.",
    "answer": "SELECT name, address FROM clients.ORDER"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients?",
    "answer": "SELECT A"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": "List all Book titles, ISBNs, and sale prices.",
    "answer": "SELECT book_title, isbn, sale_price"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": "What are the titles, ISBNs, and sale prices for all books?",
    "answer": "SELECT title FROM bookseller_borders_backlog_tableORDER_by_sold_dateASCLIMITEDGROUP_CONCATINCT.title"
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": "How many books do we have?",
    "answer": "SELECT COUNT(*) FROM books.Answer"
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": "Count the number of books.",
    "answer": "SELECT COUNT(*) FROM books.ITION"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": "How many authors are there?",
    "answer": "SELECT COUNT(*) FROM authors.ardi"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": "Count the number of authors.",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": "How many clients are there?",
    "answer": "SELECT COUNT(*) FROM clients.How"
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": "Return the number of clients.",
    "answer": "SELECT COUNT(*) FROM clients.ardi"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": "List names and addresses of all clients in alphabetical order by their names.",
    "answer": "SELECT client_id FROM clients.sort_values"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients, ordered alphabetically by name?",
    "answer": "SELECT A"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": "Show all book titles and corresponding author names.",
    "answer": "SELECT Title, Author FROM Books.ORDER"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": "What are the names of all books and their corresponding authors?",
    "answer": "SELECT Name FROM BooksellersGROUPINGByAuthorORDERByLengthLIMITN100H.NET"
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": "Show all order ids and their client names.",
    "answer": "SELECT OrderId, ClientName FROM Orders.ordered_items WHERE OrderStatus = 'Open';"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": "What are the ids of all orders and the corresponding client names?",
    "answer": "SELECT Order_ID, Client_Name FROM Orders.Only"
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": "Show all author names and the numbers of books each has written.",
    "answer": "SELECT A.authorName, COUNT(*) AS bookCount"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": "What are the names of all the authors, and how many books has each written?",
    "answer": "SELECT a.author FROM authors_ajoinauthors_b
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": "Show all book isbns and the numbers of orders for each.",
    "answer": "SELECT book.isbns, COUNT(*) FROM book.isbns GROUP BY book.isbns ORDER BY COUNT DESC LIMIT 1"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": "What are all isbns for each book, and how many times has each been ordered?",
    "answer": "SELECT books, aISBNS"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": "Show all book isbns and the total amount ordered for each.",
    "answer": "SELECT book, price FROM books.all WHERE order_id IN (SELECT id FROM orders.all GROUP BY id)"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": "What are the isbns for all books, and what is the total amount ordered for each?",
    "answer": "SELECT ibn, COUNT(*) FROM booksGROUPING_byibnORDERByisbnLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLimitNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLimitNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLimitNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLimitNORDERLimitNORDERLIMITNORDERLIMITNORDERLimitNORDERLIMITNORDERLIMITNORDERLIMITNORDERLimitNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLimitNORDERLIMITNORDERlimNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLimitNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERlimNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITNORDERLIMITN"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": "Show the book title corresponding to the book with the most number of orders.",
    "answer": "SELECT Title, COUNT(*) FROM OrdersGROUPEDByOrderIDORDERLIMITnumOrderCountHAVINGOrderIDisinEXPINCT.arange ORDER BY COUNT DESC"
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": "What is the title of the book that has been ordered the greatest number of times?",
    "answer": "SELECT T1.title FROM books_t1hts_a2018T1532ASGROUPbyT1.title ORDER BY COUNT DESC LIMIT 1"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
    "answer": "SELECT b.title, p.price FROM books_bordersedaAS.borders AS b INNER JOIN books_carsAS.cars AS c ON b.id = c.id INNER JOIN books_bordersedaAS.borders AS b2 ON b2.id = b2.id GROUP BY b2.id ORDER BY COUNT DESC LIMIT 1"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": "What is the title and purchase price of the book that has the highest total order amount?",
    "answer": "SELECT Title, PurchasePrice FROM ordersighestTotalOrderAmount.items WHERE OrderID = (SELECT OrderID FROM ordersighestTotalOrderAmount.items WHERE OrderID = 1234567890) ORDER BY TotalAmount DESC LIMIT 1"
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": "Show the titles of books that have been ordered.",
    "answer": "SELECT * FROM orderingsORDEREDByDateOrderingTimeORDEREDByPriceORDEREDByBookIDFROMorderings
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": "What are the different titles of books that have been ordered in the past?",
    "answer": "SELECT T2.Title FROM BooksT1B2T3ASINASIGS1ASINASIGS2ASINASIGS3ASINASIGS4ASINASIGS5ASASINASIGS6ASASASIS7ASASASIS8ASASASIS9ASASASIS10ASASASIS11ASASASIS12ASASASISASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASAS"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": "Show the names of clients who have ordered at least once.",
    "answer": "SELECT DISTINCT c.ClientID FROM OrdersController_ordersController__orders__orders__client_id_to_order___order_id_3c___client_id_2c___client_id_1c___order_id_5c__order_id_7c___order_id_9c_where__status__is__0_when__status__is__1_when__status__is__2_where__status__is__3_where__status__is__4_where__status__is__5_where__status__is__6_where__status__is__7_where__status__is__8_where__status__is__9_where__status__is__10_where__status__is__11_where__status__is__12_where__status__is__13_where__status__is__14_where__status__is__15_where__status__is__16_where__status__is__17_where__status__is__18_where__status__is__19_where__status__is__20_where__status__is__21_where__status__is__22_where__status__is__23_where__status__is__24_where__status__is__25_where__status__is__26_where__status__is__27_where__status__is__28_where__status__is__29_where__status__is__30_where__status__is__31_where__status__is__32_where__status__is__33_where__status__is__34_where__status__is__35_where__status__is__36_where__status__is__37_where__status__is__38_where__status__is__39_where__status__is__40_where__status__is__41_where__status__is__42_where__status__is__43_where__status__is__44_where__status__is__45_where__status__is__46_where__status__is__47_where__status__is__48_where__status__is__49_where__status__"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": "What are the names of the different clients who have made an order?",
    "answer": "SELECT Name"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": "Show all client names and the number of orders each has made.",
    "answer": "SELECT DISTINCT c.ClientName, COUNT(o.OrderID) AS OrderCount FROM ClientCWhereClientNameLikeoliaQueryAndOrdersLIKEoliaQueryAndOrdersLIKEoliaQueryAndOrdersLIKEoliaQueryAndOrdersLIKEoliaQueryAndOrdersLIKEoliaQueryAndOrdersLIKEoliaQueryAndOrdersLikeoliaQueryAndOrdersLIKEoliaQueryAndOrdersLIKEoliaQueryAndOrdersLikeoliaQueryAndOrdersLIKEoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAndOrdersLikeoliaQueryAnd"
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and how many times has each of them ordered?",
    "answer": "SELECT DISTINCT c.name FROM clients_cncd2018_cncd2017_03_26_1974_05_01_cncd2017_03_26_1974_05_01_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd2018_cncd2017_03_26_1974_05_01_cncd20"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": "What is the name of the client with the most number of orders?",
    "answer": "SELECT * FROM clientsordersORDER_byquantityascLIMIT20.ques"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": "Give the name of the client who has made the most orders.",
    "answer": "SELECT Name"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": "Show the client names and their total amounts of books ordered.",
    "answer": "SELECT c.ClientName, SUM(o.Books) AS TotalBooks FROM ClientOrders_cjo2016ASocASASO3075083345747849ASOCASASO30750832266434209ASOCASASO30750832251924470ASOCASASO307508322419307544ASOCASASO30750832241964776ASOCASASO307508322419527846ASOCASASO307508322419427732ASOCASASO307508322419537842ASOCASASO30750832241964776ASOCASASO307508322419527846ASOCASASO307508322419427732ASOCASASO307508322419427732ASOCASASO307508322419537842ASOCASASO30750832241964776ASOCASASO307508322419527846ASOCASASO307508322419427732ASOCASASO307508322419537842ASOCASASO30750832241964776ASOCASASO307508322419527846ASOCASASO307508322419427732ASOCASASO307508322419537842ASOCAS"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and the total amount of books ordered by each?",
    "answer": "SELECT DISTINCT name, COUNT(*) FROM clientsGROUPED_by_nameORDERBYCOUNTLIMIT100.crire"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": "Show the client name who has the most total amount of books ordered.",
    "answer": "SELECT COUNT(*) FROM book_orderingsGROUPHAVINGClient_name__inLIMITLimited_NUMBEROfSELECTED_Orders.count"
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": "What is the name of the client who has ordered the greatest total amount of books?",
    "answer": "SELECT FROM"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": "Show all book titles for books that have no orders.",
    "answer": "SELECT Title FROM books_orderingsWHEREOrderIDornoINEXACTGROUPSELECTIDornoFromordersSELECTIDornoFROMorderingsGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBLANKORDERIDornoGROUPHAVINGCOUNTISBL"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": "What are the titles of books that have never been ordered?",
    "answer": "SELECT BY"
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": "Show all client names for clients who have not made orders.",
    "answer": "SELECT name FROM orderings_client_name_holding_1008023368924246637659377777342170436510068518681461658205282467661242282086593776187866667186575142496263640152486845145911424084447488888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": "What are the names of clients who have never made an order?",
    "answer": "SELECT icamente"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": "What is the maximum and the minimum sale price?",
    "answer": "SELECT A"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": "Give the maximum and minimum sale price of books.",
    "answer": "SELECT FROM"
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": "What is the average purchase price and the average sale price?",
    "answer": "SELECT AVG(price) FROM ordersGROUPByproductORDERByquantityLIMIT100.OperatingSystem"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": "Give the average purchase price and average sale price for books.",
    "answer": "SELECT books"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": "What is the maximum difference between the sale price and purchase price?",
    "answer": "SELECT ives"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": "Return the largest difference in sale price and purchase price.",
    "answer": "SELECT MAX(SalePrice) FROM SalesPriceTable.ORDER"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": "List all book titles which have sale prices higher than the average.",
    "answer": "SELECT bookTitle, AVG(salePrice) AS avgSalePrice"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": "What are the titles of books with sale prices above the average sale price across all books?",
    "answer": "SELECT title"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": "List all book titles which have the lowest sale price .",
    "answer": "SELECT b.title FROM books_baseline_baseline_2017ASOFASQLWHEREdsalesPriceFROMbooks_baseline_baseline_2017ASOFASQLORDERBysalesPriceASCLIMIT5000.thead"
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
    "answer": "SELECT THE ORDER BY DESC"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": "List all book titles which have highest purchase prices .",
    "answer": "SELECT * FROM book_title_highest_price_cpu_sku_pqts_t17_2018_1_35_2020_2020_30_21_2020_34_2020_36_2021_2020_37_2021_2020_38_2021_39_2021_40_2020_41_2020_42_2020_43_2020_44_2020_45_2020_46_2020_47_2020_48_2020_49_2020_50_2021_51_2021_52_2021_53_2021_54_2021_55_2021_56_2021_57_2021_58_2021_59_2021_60_2021_61_2021_62_2021_63_2021_64_2021_65_2021_66_2021_67_2021_68_2021_69_2021_70_2021_71_2021_72_2021_73_2021_74_2021_75_2021_76_2021_77_2021_78_2021_79_2021_80_2021_81_2021_82_2021_83_2021_84_2021_85_2021_86_2021_87_2021_88_2021_89_2021_9"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": "What are the titles of books with the highest purchase price across all books ?",
    "answer": "SELECT title FROM book_purchasesGROUPHAVINGPurchase_price_1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": "What is the average sale price of books written by George Orwell?",
    "answer": "SELECT AVG(SalesPrice) FROM Books.SELECT AS Name, ASBookNameFROMBooksWHEREAuthorIsGeorgeOrwellANDBookNameLikeREPLACETitleOrAuthorNameWithREPLACEAuthorNameAndORWAVEN.title"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": "Give the average sale price of books authored by George Orwell.",
    "answer": "SELECT * FROM sales_data_sous_ogreorcio2013.anc"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": "What are sale prices of books written by Plato?",
    "answer": "SELECT BY"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": "Return the sale prices of books authored by Plato.",
    "answer": "SELECT sale_price"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
    "answer": "SELECT the.title FROM bookselling_tableWHEREseller_idLIKEkeitenesseract_search_result_1.ashb"
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": "Give the title of book by George Orwell that has the lowest saleprice.",
    "answer": "SELECT FROMBook"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
    "answer": "SELECT T1.title"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
    "answer": "SELECT T2.title"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": "Who is the author of the book \"Pride and Prejudice\"?",
    "answer": "SELECT sulfurSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSssSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSssSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSssSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSssSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSssSSSSSSSSSSSSSSSSSS"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": "Give the name of the author who wrote the book titled Pride and Prejudice.",
    "answer": "SELECT author"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
    "answer": "SELECT Books"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": "What are the titles of all books written by an author with a name that contains Plato?",
    "answer": "SELECT Title"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": "How many orders do we have for \"Pride and Prejudice\"?",
    "answer": "SELECT COUNT(*) FROM orders.ardi"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": "Return the number of orders received for Pride and Prejudice.",
    "answer": "SELECT COUNT(*) FROM Orders.ardi"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
    "answer": "SELECT Id"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
    "answer": "SELECT Orders.OrderID FROM OrdersINNERjoinOrdersOnOrdersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOnUsersOn"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
    "answer": "SELECT *"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
    "answer": "SELECT aded"
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
    "answer": "SELECT titles"
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      "
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": "Show all client names who have orders for \"Pride and Prejudice\".",
    "answer": "SELECT name FROM client_name_c123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": "What are the names of clients who have ordered Pride and Prejudice?",
    "answer": "SELECT Name"
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": "How many books are there?",
    "answer": "SELECT osed"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": "List the titles of books in ascending alphabetical order.",
    "answer": "SELECT title FROM books.sort_by_title ORDER BY title ASC"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": "List the titles of books in descending order of pages.",
    "answer": "SELECT Title FROM BooksDescORDER_byPages.reverse"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": "What are the types and release dates of books?",
    "answer": "SELECT Books"
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": "What are the maximum and minimum number of chapters for each book?",
    "answer": "SELECT ChapterNumber FROM BooksGROUPHAVINGChapterNumberNOTINSELECTChapterNumberFROMBooksWHEREBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVINGBookCategoryIDIsNotInSELECTBookCategoryIDGROUPHAVING"
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": "What are the titles of books that are not \"Poet\"?",
    "answer": "SELECT FROM"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": "What is the average rating in reviews?",
    "answer": "SELECT AVG(Rating) FROM Reviews.Thought"
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": "What are the titles and ratings of books?",
    "answer": "SELECT title FROM books_rating.WHERErating_id INNER JOIN rating_table_joins.rating_id ON books_rating.id = rating_table_joins.id"
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": "What is the rating of the book with the largest number of chapters?",
    "answer": "SELECT AVG(T1.Chapter) FROM BookT1ASBTS2022ASRAS4ASST1A2EASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASAS"
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": "What is the rank of the book with the smallest number of pages?",
    "answer": "SELECT _books"
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": "What is the title of the book with the highest rank in the review?",
    "answer": "SELECT title FROM books.rated_by"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": "What is the average number of readers for books of type \"Novel\"?",
    "answer": "SELECT FROM"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": "For each book type return the type and the number of books of that type.",
    "answer": "SELECT DISTINCT book_type, COUNT(*) FROM books_tableGROUPBy.book_type"
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": "What is the most common type of books?",
    "answer": "SELECT chos"
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": "What are the types of books that have at least three books belonging to?",
    "answer": "SELECT THE FROM ANDorning.books"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": "List the titles of books in ascending order of the ratings in review?",
    "answer": "SELECT title FROM book_ratingsORDER_by_ratingRANKLIMITN.ROW"
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": "List the title and audio length for all the books in descending order of the number of readers.",
    "answer": "SELECT T1.title, T2.audio_length FROM Books.T1 AS T1 INNER JOIN Books.T2 AS T2 ON T1.author_id = T2.author_id ORDER BY T2.rereader_count DESC"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": "How many books do not have reviews?",
    "answer": "SELECT COUNT(*) FROM books_orderingsWHEREorder_idornoINEXorcISNULLORDER_DATEGROUPLIMIT1000.Answer"
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
    "answer": "SELECT type"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": "How many distinct types of book are there?",
    "answer": "SELECT TECH"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": "What are the type and title of the books that are not rated?",
    "answer": "SELECT genre, title"
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": "How many customers are there?",
    "answer": "SELECT COUNT(*) FROM customers.Question"
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": "Count the number of customers.",
    "answer": "SELECT COUNT(*) FROM customers.ITION"
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": "List the names of customers in ascending order of level of membership.",
    "answer": "SELECT customer_name, level_of_members FROM customers_level_1_to_level_5ORDERASCLIMIT10.ANS"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
    "answer": "SELECT Customer_name"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": "What are the nationalities and card credits of customers?",
    "answer": "SELECT DISTINCT customer_name, country FROM customers.ORDER LIMIT 1"
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": "Find the nationality and card credit of each customer.",
    "answer": "SELECT DISTINCT customer_name, country_code, country_name"
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
    "answer": "SELECT customer_id FROM customers_custody_2018.ash"
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
    "answer": "SELECT eles\nINNER JOIN JOININGcontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontrecontre"
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": "What is the average card credit of customers with membership level higher than 1?",
    "answer": "SELECT AVG(ccredit) FROM customers_with_level_2_to_1000.INSERT \n     ORDER BY member_id ASC"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": "Find the average card credit customers whose membership level is above 1.",
    "answer": "SELECT COUNT(*) FROM card_credits_2023_4_7_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_7"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": "What is the card credit of the customer with the highest membership level?",
    "answer": "SELECT card_id FROM customers.c"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": "Find the customer with the highest membership level and return his or her card credit.",
    "answer": "SELECT CustomerName FROM CustomersGROUPEDByCustomerLevelHAVINGCOUNTcardNOTINSELECTcustomer_idFROMCustomersWHEREGROUPING.customer_level INNER JOIN (SELECT customer_id, COUNT(card_id) FROM CustomersJOINCustomerCardsGROUPEDByCustomerLevelHAVINGCOUNTcardIDNOTINSELECTcustomer_id2FROMCustomersJOINCustomerCardsGROUPEDByCustomerLevelHAVINGCOUNTcardid2NOTINSELECTcustomer_id3FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid3NOTINSELECTcustomer_id4FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid4NOTINSELECTcustomer_id5FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid5NOTINSELECTcustomer_id6FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid6NOTINSELECTcustomer_id7FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid7NOTINSELECTcustomer_id8FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid8NOTINSELECTcustomer_id9FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid9NOTINSELECTcustomer_id10FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid10NOTINSELECTcustomer_id11FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid11NOTINSELECTcustomer_id12FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid12NOTINSELECTcustomer_id13FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid13NotINSELECTcustomer_id14FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid14NOTINSELECTcustomer_id15FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid15NOTINSELECTcustomer_id16FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid16NOTINSELECTcustomer_id17FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid17NotINSELECTcustomer_id18FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid18NOTINSELECTcustomer_id19FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid19NOTINSELECTcustomer_id20FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid20NOTINSELECTcustomer_id21FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid21NOTINSELECTcustomer_id22FROMCustomersGROUPEDByCustomerLevelHAVINGCOUNTcardid22NOTINSELECTcustomer_id23FROMCustomersGROUPEDBy"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
    "answer": "SELECT customer_name FROM customers_tableGROUP_bycustomer_idHAVINGnum_customers_in_groupindenotinEXISTSGROUP_CONCATenger.customer_name, customer_name.HAVINGnum_customers_in_groupindenotinEXists"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
    "answer": "SELECT country, COUNT(*) FROM customersGROUPBycountryORDER_bycountdescLIMIT1.Keep"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": "Show the most common nationality of customers.",
    "answer": "SELECT name, COUNT(*) FROM customersGROUPHAVINGGROUP_NAMELikecede_to_gather_nationality.Only"
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": "Which nationality does the most customers have?",
    "answer
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
    "answer": "SELECT WHERE"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order.",
    "answer": "SELECT Customers, Dishes"
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": "For each order, return the customer name and the dish name.",
    "answer": "SELECT order_id FROM orders.ordered_by"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
    "answer": "SELECT Customers, Dishes"
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
    "answer": "SELECT Customer_Name, Dish_Name FROM Orders.ORDER AS DESC"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
    "answer": "SELECT c.customer_name, SUM(o.quantity) AS total_quantity"
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
    "answer": "SELECT name, COUNT(*) FROM ordersGROUPHAVINGOrderIDIN.customer_id ORDER BY SUMQuantity DESC"
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": "Show the customers with total quantity of order bigger than 1.",
    "answer": "SELECT * FROM order_items_customer_order_count_t2023.oo"
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
    "answer": "SELECT T"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": "Show distinct managers of branches.",
    "answer": "SELECT manager_id, manager_name FROM branch_manager_tableJOINbranches_on_branch_id_to_manager_id_andbranch_id_manager_id_name.on_branch_id_to_manager_id_name"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": "Who are the distinct managers of branches?",
    "answer": "SELECT TTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTttTTTTTTTTTTTTttTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTttTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTttTTTTTTTTTTttTTTTTTttttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTttTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTttTTTTTTTTttTTttTTTTTTTTTTTTTT"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": "List the names of customers that do not have any order.",
    "answer": "SELECT Name FROM Customers.ORDER"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": "Which customers do not have any order? Give me the customer names.",
    "answer": "SELECT teammates\nINNER JOIN AINTENENATEENNINGANAPAINEANANAPAINEANANAPAINEANANAPAINEANAPAINEANANANAPAINEANANAPAINEANANAPAEANANAPANAPPEANANAPAPANAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAPAP"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": "How many members are there?",
    "answer": "SELECT COUNT(*) FROM users.why"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": "List the names of members in ascending order of age.",
    "answer": "SELECT * FROM table_nameORDERBY_ageASC.Sure"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": "What are the names and nationalities of the members?",
    "answer": "SELECT BY"
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": "List the names of members whose nationality is not `` England '' .",
    "answer": "SELECT * FROM Members_2019_03_18_2022_07_25_0000_0000_01_06_15_04_03_27_46_02_11_24_0001_01_03_0008_03_17_09_09_00_00_00_00_01_07_00_0001_01_05_00_02_04_07_00_10_00_01_03_0008_10_00_00_00_00_01_07_00_10_00_00_00_00_00_11_05_00_00_00_00_00_01_06_09_12_01_04_07_00_00_00_00_00_00_00_01_03_0008_11_05_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_01_06_15_04_03_27_46_02_11_24_0001_01_03_0008_03_17_09_09_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_01_06_09_12_01_04_07_00_00_00_00_00_00_00"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": "Show the names of members whose age is either 19 or 20.",
    "answer": "SELECT * FROM table_nameWHERE.age INNER JOIN member_table_nameONage_column_ID_1__member_id_1__name__1__value__1__value__1__name__1__value_1__value__1__value_2__value_2__value_2__value_3__value_3__value_3__value_3__value_3__value_3__value_3__value_3__value_3__value_3__value_3__value_4__value_4__value_4__value_5__value_5__value_5__value_5__value_5__value_5__value_5__value_5__value_5__value_5__value_5__value_5__value_5__value_5__value_6__value_6__value_6__value_7__value_7__value_7__value_7__value_7__value_7__value_8__value_8__value_9__value_9__value_9__value_9__value_9__value_9__value_9__value_9__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__value_10__"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": "What is the name of the oldest member?",
    "answer": "SELECT chos"
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": "Show different nationalities along with the number of members of each nationality.",
    "answer": "SELECT name, count FROM countries_info_tableGROUPHAVING_num_of_members_in_country__IS_30000000000000000001.ORDER;"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": "Please show the most common nationality of members.",
    "answer": "SELECT nationality FROM table_name.INSERT"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": "Show the nations that have at least two members.",
    "answer": "SELECT DISTINCT * FROM countries_tableGROUPHAVING.country_code INNER JOIN countries_table.c ON countries_table.country_code = countries_table.c.country_code GROUP BY country_code"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": "Show the names of club leaders and the names of clubs they joined.",
    "answer": "SELECT DISTINCT leader_name, club_name FROM club_leaders.JOINClubLeadsOnLesions"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": "Show the names of club leaders of clubs with overall ranking higher than 100.",
    "answer": "SELECT Club_name, COUNT(*) FROM club_leadersGROUPINGByClub_nameORDERINGByTotal_club_pointsdescLIMIT100.ait"
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": "Show the names of club leaders that joined their club before 2018.",
    "answer": "SELECT DISTINCT clname FROM club_leaders_2018_to_2019_clues_left_2018_cars_buses_ships_2018_buses_buses_2018_cars_buses_2017_buses_buses_2018_buses_buses_2016_buses_2015_buses_2014_buses_2013_buses_2012_buses_2011_buses_2010_buses_2009_buses_2008_buses_2007_buses_2006_buses_2005_buses_2004_buses_2003_buses_2002_buses_2001_buses_2000_buses_2009_buses_2008_buses_2007_buses_2006_buses_2005_buses_2004_buses_2003_buses_2002_buses_2001_buses_2000_buses_2009_buses_2008_buses_2007_buses_2006_buses_2005_buses_2004_buses_2003_buses_2002_buses_2001_buses_2000_buses_2009_buses_2008_buses_2007_buses_2006_buses_2005_buses_2004_buses_2003_buses_2002_buses_2001_buses_2000_buses_2009_buses_2008_buses_2007_buses_2006_buses_2005_buses_2004_buses_2003_buses_2002_buses_2001_buses_2000_buses_2009_buses_2008_buses_2007_buses_2006_b"
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": "Show the name of the leader of the club named \"Houston\".",
    "answer": "SELECT Name FROM clubs.ames"
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": "List the names of members that are not club leaders.",
    "answer": "SELECT * FROM club_members.WHERE \n    RIGHT OUTER JOIN (SELECT RIGHT, LAG RIGHT OUTER JOIN (SELECT RIGHT, LAG LIMIT 150) AS l ON r.right = l.light) AS r ON r.right IN (SELECT L.RIGHT FROM l.limit  GROUP BY r.right)"
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": "Show the nations that have both members older than 22 and members younger than 19.",
    "answer": "SELECT N.Name, COUNT(*) AS Total"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": "What is the average age of all the club leaders?",
    "answer": "SELECT AVG(Ages) FROM ClubLeaders.GROUPByClubLeaders"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": "Which club name contains the string 'state'?",
    "answer
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": "List all collections' subset. List the subsets' names.",
    "answer": "SELECT COUNT"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection susbset names?",
    "answer": "SELECT DISTINCT name FROM susbset_name.ensemble"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": "What is detail of collection subset with name 'Top collection'?",
    "answer": "SELECT DISTINCT *"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": "What collection details are there on the subset named 'Top collection'?",
    "answer": "SELECT Name FROM top_level_collection_2017_05_18WHERECollectionTypeCodeCode12345678901234567890134567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents's subset. List the subset's name.",
    "answer": "SELECT distinct"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document subset names?",
    "answer": "SELECT SUBSTRING_INDEX"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the detail of document subset with name 'Best for 2000'?",
    "answer": "SELECT *"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the details on the document subsets that are named 'Best for 2000'?",
    "answer": "SELECT Name FROM DocumentsGROUPHAVINGBestFor2000.isIN"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": "List document id of all documents.",
    "answer": "SELECT ID FROM doc_list.Only"
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the object id of the document objects?",
    "answer": "SELECT DocumentID"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the parent document of document owned by Marlin? List the document id.",
    "answer": "SELECT D_document_ID FROM doc_2014_05_30.d"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the objects owned by Marlin?",
    "answer": "SELECT D.oId FROM marlin_objects_DOMINATEDByMarlin__2016_03_17__1998__01_01_2018_30_2018_06_09_2018_05_04_2018_04_30_2018_03_01_2018_04_2017_06_28_2018_05_07_2018_05_04_2018_06_09_2018_05_04_2018_06_09_2018_05_04_2018_05_17_2018_03_01_2018_04_2018_04_2017_06_28_2018_05_07_2018_05_04_2018_04_30_2018_03_01_2018_04_2017_06_28_2018_05_07_2018_05_04_2018_06_09_2018_05_04_2018_05_17_2018_03_01_2018_04_2018_04_2017_06_28_2018_05_07_2018_05_04_2018_05_04_2018_06_09_2018_05_04_2018_05_04_2018_05_07_2018_05_04_2018_05_17_2018_03_01_2018_04_"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of document with the Description 'Braeden Collection'?",
    "answer": "SELECT *"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "answer": "SELECT Name"
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "answer": "SELECT name"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "answer
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different descriptions of all the parent documents?",
    "answer": "SELECT FROM"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the unique description of every parent document?",
    "answer": "SELECT name"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents owned by Marlin?",
    "answer": "SELECT COUNT(*) FROM documentsmarlinmarlinnamesORDERbyCOUNTLIMITLIMIT17.Question"
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the count of documents owned by Marlin?",
    "answer": "SELECT COUNT(*) FROM DocumentsMarlin.ardi"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents ids that are not the parent of other documents.",
    "answer": "SELECT DISTINCT d.id FROM documents_dds_id_to_child_id_list.parent AS d INNER JOIN documents_dds_id_to_child_id_list.on AS on ON d.parent = on"
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that are not parent documents?",
    "answer": "SELECT DISTINCT ID"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child documents does each parent document has? List the document id and the number.",
    "answer": "SELECT COUNT(DISTINCT.DocumentID) FROM ParentDocumentTree.OUTPUT"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
    "answer": "SELECT COUNT(DISTINCTdocument_id) FROM parents_document_2018_2021_2036_4_2_3_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": "List the name of all collections.",
    "answer": "SELECT DISTINCT collname FROM colls.ITION"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": "what are the collection names?",
    "answer": "SELECT Collection"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the description of collection named Best?",
    "answer": "SELECT Name"
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection descriptions that are named as 'Best'?",
    "answer": "SELECT Name FROM CollectionDescription.WHERECollectionDescriptionName INNER JOIN CollectionDescriptionOnCollectionIDONBest.ORDERASCLIMIT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           "
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the name of the parent collection of the collection named Nice?",
    "answer": "SELECT Name FROM Parents.nice"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of all parent collections of the collection named Nice?",
    "answer": "SELECT Name FROM niceparentcollections.ORDER"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection is not the parent of other collection? List the collection's name.",
    "answer": "SELECT counterparts"
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are not the parent of the other collections?",
    "answer": "SELECT the_NAME"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": "List document that have more than one child. List the document id.",
    "answer": "SELECT id FROM document_id_list.INSERT"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that have more than one child?",
    "answer": "SELECT document_id FROM documents_tableGROUPHAVINGChild_id_count.express INNER JOIN (SELECT COUNT(*) FROM documents_table_joins_joins_increased_2015_327234_64982_7612_3645_1827_5860_7738_3251_7506_7491_4301_3473_7026_6668_5654_2256_3752_3868_3632_3752_3868_3858_3970_3366_3366_2256_3752_3868_5654_7143_3696_3338_3272_3668_3668_3858_3970_3366_3366_2256_3752_3868_5654_7143_3632_3752_3868_3858_3970_3366_3338_3272_3668_3632_3752_3868_3858_3970_3366_3366_2256_3752_3868_5654_5178_3372_3752_3752_3868_3970_3366_3366_2256_3752_3868_7143_3696_3338_3272_3668_3632_3752_3868_3858_3970_3366_3366_2256_3752_3868_5654_"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child collection does the collection named Best has?",
    "answer": "SELECT COUNT(*) FROM Best.Only"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child collections belonging to the collection named Best?",
    "answer": "SELECT COUNT(*) FROM Bestcollections.Answer"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document which is related to document owned by Ransom . List the document id .",
    "answer": "SELECT doc_id"
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the related to the document owned by Ransom ?",
    "answer": "SELECT docObjectID FROM documentsRansomRansom_2021_01_30L169H234Z145Z145Z270K1A0B0C0D0E1F296129632978201A3020216201978220360126151000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": "List collection subset id, name and number of collections in each subset.",
    "answer": "SELECT DISTINCT Collection_ID, Name, Number_of_Collection FROM Collection_SUBSET_ACTOES_HAVING_NAMELike.Matcher_NAME, COUNTAmongCollection_IDS_1NF_2NF_3NF_4NF_5NF_6NF_7NF_8NF_9NF_10NF_11NF_12NF_13NF_14NF_15NF_16NF_17NF_18NF_19NF_20NF_21NF_22NF_23NF_24NF_25NF_26NF_27NF_28NF_29NF_30NF_31NF_32NF_33NF_34NF_35NF_36NF_37NF_38NF_39NF_40NF_41NF_42NF_43NF_44NF_45NF_46NF_47NF_48NF_49NF_50NF_51NF_52NF_53NF_54NF_55NF_56NF_57NF_58NF_59NF_60NF_61NF_62NF_63NF_64NF_65NF_66NF_67NF_68NF_69NF_70NF_71NF_72NF_73NF_74NF_75NF_76NF_77NF_78NF_79NF_80NF_81NF_82NF_83NF_84NF_85NF_86NF_87NF_88NF_89NF_90NF_91NF_92NF_93NF_94NF_95NF_96NF_97NF_98NF_99NF_100NF_110NF_120NF_130NF_140NF_150NF_160NF_170NF_180NF_190NF_200NF_210NF_220NF_230NF_240NF_250NF"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subset ids, names, and number of collections for each subset?",
    "answer": "SELECT DISTINCT SUBSTRING_INDEXSUBSTRING_INDEX, MIN_LENGTH, COUNT(*) FROM subsetsgroup2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset2_subsetsgroup3_table_name_subset"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has most of child? List the document id and the number of child.",
    "answer": "SELECT ECETECETECETECETECETECETECETECETECETECETECECETECECETECECECETECECECECECETECECETECETECECECETECECECECETECEC"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many children do they have?",
    "answer": "SELECT COUNT(DISTINCTdocument_id) FROM documents.limits"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has least number of related documents? List the document id and the number of related documents.",
    "answer": "SELECT justify"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the document object id with the least number of documents ?",
    "answer": "SELECT * FROM myDocumentTableORDEREDBYCOUNTISUMFTodosINmyDocumentTableLIMIT10.answer"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
    "answer": "SELECT troubaceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceraceracer"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
    "answer": "SELECT DUCOMMA FROM DCUmentsJOINItemsONDUUMID__1_DUCUMMA__2_4_3__4_5__6_7_8_9_0_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_0_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2_3_4_5_6_7_8_9_1_2"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": "List all owner of documents that is related to documents owned by Braeden.",
    "answer": "SELECT Owner"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "answer": "SELECT A"
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "answer": "SELECT SCELSESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESEseSESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESEseSESESESESESEseSESESESEseSESESESESESEseSESESESESE"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subset names of all documents owned by Braeden?",
    "answer": "SELECT document_id, document_name FROM documents_braeden_subsets_2020_3_16_07_15_2020_3_18_09_09_12_14_06_2020_3_17_09_04_15_20_3_17_08_01_02_2020_3_18_09_09_12_15_20_3_17_08_01_02_2020_3_18_09_09_12_15_20_3_17_08_01_02_2020_3_18_09_09_12_15_20_3_17_08_01_02_2020_3_18_09_09_12_15_20_3_17_08_01_02_2020_3_18_09_09_12_15_20_3_17_08_01_02_2020_3_18_09_09_12_15_20_3_17_08_01_02_2020_3_18_09_09_12_15_20_3_17_08_01_02_2020_3_18_09_09_12_15_20_3_17_08_01_02_2020_3_18_09_09_12_15_20_3_17_08_01_02_2020_3_18_09_09_12_15_20_3_17_08_01_02_2020_3_18_09_09_1"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": "List subset id, name and number of different documents in each subset.",
    "answer": "SELECT distinct \n        FROM subquery_table_name212345678901234456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the subset id, name, and number of different documents for each subset?",
    "answer": "SELECT SUBSTRING_ID FROM documents_subsets_subsets_name_id_number_1006_1995_2003_2004_2005_2010_2012_2017_2018_2020_2021_2022_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2091_2092_2093_2094_2095_2096_2097_2098_2099_2100_2101_2102_2103_2104_2105_2106_2"
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
    "answer": "SELECT PER"
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
    "answer": "SELECT MAX(doc_count) FROM doc_subset_idWHEREDoc_type_1_2601074946518432466446138009577527479839568610439147606245740130894205834572331517618273772405491680018551475448605834572331517618273772405491680018551475448605834572331517618273772405491680018551475448605834572331517618273772405491680018551475448605834572331517618273772405491680018551475448605834572331517618273772405491680018551475448605834572331517618273772405491680018551475448605834572331517618273772405491680018551475448605834572331517618273772405491680018"
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": "For document subset named 'Best for 2000', List all document id that in this subset.",
    "answer": "SELECT id"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
    "answer": "SELECT DocumentID"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
    "answer": "SELECT D.docid, D.docname"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
    "answer": "SELECT doc_id, document_name FROM documents_table_nameGROUPbydoc_idORDERBYcountdescLIMIT1.SELECT"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "answer": "SELECT DISTINCT C.collection_name"
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the collection name of a document owned by 'Ransom'?",
    "answer": "SELECT * FROM documents
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections does each document belong to? List the count and the document id.",
    "answer": "SELECT COUNT(*) FROM documentsGROUP_bycollection_id.conn"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many collections does it belong to?",
    "answer": "SELECT COUNT(*) FROM documents_object_id_to_collection_id_map.ash"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents does collection named 'Best' has?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of documents in the collection named 'Best'?",
    "answer": "SELECT COUNT(*) FROM Best.ardi"
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": "List the document id of all documents in collection named Best.",
    "answer": "SELECT Id"
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of document object ids in the collection named Best?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection have most number of documents? List collection name, id and number of documents.",
    "answer": "SELECT mismOC"
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
    "answer": "SELECT * FROM BestGROUPEDByDocumentIDORDERByCountLIMIT1.explain"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
    "answer": "SELECT doc"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
    "answer": "SELECT DocumentObjectIds"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in collection named Best but not in document subset Best for 2000.",
    "answer": "SELECT * FROM Documents__Best__B__2000__Best_Where__________N_________Id___________________B_________Id___________________B_________Id___________________N_________Id___________________N______N.RETURN"
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
    "answer": "SELECT DOCuments_ID FROM Best_BestNot_2000_Documents_WhichIsBestWhereBestFor2000_Documents_WhichIsBestWhereBestFor2000__WITHIN__SELECTED__WHERESELECTED__ANDNotIn__SELECTED__SELECTED__GROUP__ORDER__ByDOCuments_ID.How"
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 or in collection named Best.",
    "answer": "SELECT id FROM doc_setBestFor2000AndcollectionBestOptionYouCanCollectiblesOptionYouCanCollectiblesOptionYouCanCollectiblesOptionYouCanCollectiblesOptionYouCanCollectiblesOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYouCanCollectibleOptionYou"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
    "answer": "SELECT DISTINCT D_documentID"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": "List all name of collections that are related to collection named Best.",
    "answer": "SELECT Name"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are related to the collection named Best?",
    "answer": "SELECT DISTINCT C.collection_name"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections that are related to collection named Best?",
    "answer": "SELECT COUNT(*) FROM best_cvs.ardi"
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": "How many different collections are related to the one named 'Best'?",
    "answer": "SELECT COUNT(DISTINCTcollection) FROM best_cvs.alls"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection subset does collection name Best in? List collection subset name.",
    "answer": "SELECT counterparts"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subsets that the collection named 'Best' in?",
    "answer": "SELECT SUBSET FROM BestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUBSETFROMBestSELECTSUB"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": "How many songs contain \"Love\" in their names?",
    "answer": "SELECT COUNT(*) FROM songs.songs WHERE name IN (SELECT name FROM songs.songs ORDER BY song_name ASC LIMIT 1)"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": "List the name of the songs in ascending, lexicographical order.",
    "answer": "SELECT name FROM song_tableorder_by_nameASC.Sure"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": "List the names and languages of the songs .",
    "answer": "SELECT song_name, language"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": "What are the maximum and minimum voice sound quality score of the performances?",
    "answer": "SELECT the_name"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "answer": "SELECT A"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
    "answer": "SELECT s.id, s.name"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "answer": "SELECT the \n  \n  \n  \n\n\nINNER JOIN ders
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
    "answer": "SELECT * FROM song_info.songs WHERE language = 'English';"
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": "What are the ids and names of the participants who have performed at least two songs?",
    "answer": "SELECT ID, Name FROM ParticipantsTable.SELECT  \n    LIMIT 150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
    "answer": "SELECT T1.id, T2.name, T2.popularity \nFROM participants.T1 INNER JOIN songs.Songs ON participants.id = songs.id \nGROUP BY T1.id, T2.name"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
    "answer": "SELECT DISTINCT participants"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
    "answer": "SELECT the_name FROM VoiceSoundQualityScores_v2_2021_09_17_01_00_00_WhereLanguageCode_in_2021_09_17_01_00_WhereLanguageName_in_2021_09_17_01_00_AnswerTheseQs.Only"
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": "What are the id and name of the song sung by the most participants?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": "How many performances have a stage presence score less than 7 or higher than 9?",
    "answer": "SELECT COUNT(*) FROM performancesGROUPHAVINGStageScoreLess_than7OrHigherThan9.Answer"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": "How many songs listed are not performed?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": "What are the average rhythm scores for the songs in each different language?",
    "answer": "SELECT Language, RhythmScore FROM songs_in_language_songsGROUPBYLanguageORDERByAverageRhythmScoreASCLIMITN.max"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": "What are the distinct names of the participants who have sung a song in 'English'?",
    "answer": "SELECT two"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
    "answer": "SELECT BY ORDER BY Pularity"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": "Which song names have the substring \"Is\"?",
    "answer": "SELECT SelECTSelECTSelECTSelECTSelECTSelECTSelECTSelECTSelECTSelECTSelECTSelEC"
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
    "answer": "SELECT artists"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": "How many cities do we have?",
    "answer": "SELECT COUNT(*) FROM cities.Answer"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": "Count the number of cities.",
    "answer": "SELECT COUNT(*) FROM cities
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": "List all different states .",
    "answer": "SELECT state"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": "What are all the distinct states?",
    "answer": "SELECT FROM"
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": "How many countries do we have?",
    "answer": "SELECT COUNT(*) FROM countries.ardi"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": "Count the number of coutries.",
    "answer": "SELECT COUNT(*) FROM couts.ORDER"
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": "Show names, codes, states, countries for all cities.",
    "answer": "SELECT city FROM city_data_cities.cities WHERE district = 'XXXXX'"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": "What are the names, codes, states, and countries for all cities?",
    "answer": "SELECT City, Name, Code FROM Cities.Show"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": "What is the latitude and longitude for Baltimore?",
    "answer": "SELECT lat, lon FROM mapdata_baltavia.baltavia"
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": "What latitude and longitude correspond to Baltimore?",
    "answer": "SELECT MIN(Latitude), MAX(Latitude) FROM Cities.c"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": "Show names for all cities in state PA.",
    "answer": "SELECT city FROM city_name_cities.cities WHERE state = 'PA'"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": "What are the names of all cities in PA?",
    "answer": "SELECT City FROM States_Highway_ACTSORDERED_byCity_nameASCLIMITLIMITNOUNDS.Count"
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": "How many cities are in Canada?",
    "answer": "SELECT COUNT(*) FROM cities_in_canaigan.craper"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": "Count the number of cities in Canada.",
    "answer": "SELECT COUNT(*) FROM city_cities_in_canada.INSERT \n     LIMIT 1;"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": "Show names for all USA city ordered by latitude.",
    "answer": "SELECT name, count FROM cities_cities_by_locationUSCA_cuzd.location ORDER BY latitude ASC LIMIT 10;"
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": "What are all the city names for cities in the USA, ordered by latitude?",
    "answer": "SELECT Name FROM cities_in_usa_cities_name_highest_latitudeOrder_byLatitude.implify"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": "Show all states and number of cities in each state.",
    "answer": "SELECT COUNT(*) FROM states.JOIN \n    \tORDER BY city"
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": "How many cities are in each state?",
    "answer": "SELECT COUNT(*) FROM states.GROUP"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": "Show all countries and number of cities in each .",
    "answer": "SELECT Country, COUNT(*) FROM countriesGROUPHAVING.country INNER JOIN citiesGROUPHAVINGcountry.inneR ON cities.country = countries.id"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": "How many cities are there in each country?",
    "answer": "SELECT COUNT(*) FROM countries.GROUP"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": "List all states with at least two cities.",
    "answer": "SELECT * FROM States_info_class2020.States WHERE state_code IN (SELECT state_code FROM States_info_class2019.States WHERE country_code = 'US')"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": "Which states have at least two cities?",
    "answer": "SELECT SSELECSDS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": "Which state has most number of cities?",
    "answer": "SELECT ES"
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": "Give the state that has the most cities.",
    "answer": "SELECT State"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": "Which country has fewest number of cities?",
    "answer": "SELECT LE LEFT OUTER JOIN ONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONONNONONONONONONNONONONANONONONOONNONONONONNONONONONONONONONONONONONONONANONONONONUNONONONONONONOTONONONONONONONONNONONONANONONONONONOTONONONONORONONONONONONNIONONONONNownONONONOTONONONONONONOOTONONONONONONONOTONONONONONONONnanONONOOTNONONONONONONTNONONONONownANONONOTONONONONNONONANONONNIONONONONONONONownONONONORONOTONOTONONONONNONONNOTONONONNONOTONONONNONONONONnanOONONONownONONONANNONONONOTONONONONORONOTONONONownONownNOTONUNONONONONONONONONANDONONONOTONONONONOTOTONNONONONANONONNONOTONONONONOOTONONONONnanONownONONNONownONONONONOONOOLOOTONOTONONONOTONONONONNOTONONONONNONownONownNONONOROTOTONOTONONONONOTOKONONNownONUNONONOTOWNNONONNONONONONNORONOTONONONONONONANONNOTONONNOTONONnoneONOTONONnanOTOTONONOTONOTONONNONONONownNONOOTOTOTONOKONONOTOTONONONOTNONONOWNONNONONONOTNONONOROTOTOTONOTONONONONONownNOTONONownONONnomNONOLONONONOTotonONNoNounOfownNOON"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": "Give the country with the fewest number of cities.",
    "answer": "SELECT * FROM city_info_cities.c"
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": "Show the first name and the last name for students living in state MD.",
    "answer": "SELECT s.first_name, s.last_name FROM students_sls_in_stateMD.employees AS s"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": "What are the full names of students living in MD?",
    "answer": "SELECT IVE"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": "How many students live in China?",
    "answer": "SELECT FROM"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": "Count the number of students living in China.",
    "answer": "SELECT COUNT(*) FROM students_in_china.alls"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": "Return the first name and major of students are living in Baltimore?",
    "answer": "SELECT * FROM StudentTable.head"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": "What are the first names and majors of students living in Baltimore?",
    "answer": "SELECT BY"
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": "Show the number of students living in each country.",
    "answer": "SELECT Country, COUNT(*) FROM StudentInfo.ROWGROUP BY Country"
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": "How many students live in each country?",
    "answer": "SELECT COUNT(*) FROM countries_historic_data_histo_cyrnicas_cyrnicas_father_wife_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_wives_who_w"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": "Find the number of students living in each city.",
    "answer": "SELECT name FROM studentscity_datacity2017ASISTANSCity2017SSTUSERSWHERE.city_id INNER JOIN cities2017ASISTANSCity2017COUNTSONONstudent_id2017ASISTANSCity2017SSTUSERSGROUP_CONCATCityIDASISTANSCity2017ASISTANSCity2017COUNTSONONcity_id2017ASISTANSCity2017SSTUSERSORDERBYlocation_nameascLIMITNROW.Note\n\n\n\n\n     AS ID\n    AS city_id ON cities2017ASISTANSCity2017COUNTSONONstudent_id2017ASISTANSCity2017SSTUSERSGROUP_CONCATCityIDASISTANSCity2017ASISTANSCity2017COUNTSONONcity_id2017ASISTANSCity2017SSTUSERSORDERBYlocation_nameascLIMITNROW\n    =  SELECT \n        INNER JOIN cities2017ASISTANSCity2017COUNTSONONstudent_id2017ASISTANSCity2017SSTUSERSGROUP_CONCATCityIDASISTANSCity2017ASISTANSCity2017COUNTSONONcity_id2017ASISTANSCity2017SSTUSERSORDERBYlocation_nameascLIMITNROW.AS  AS ID\n    AS city_id ON cities2017ASISTANSCity2017COUNTSONONstudent_id2017ASISTANSCity2017SSTUSERSGROUP_CONCATCityIDASISTANSCity2017ASISTANSCity2017COUNTSONONcity_id2017ASISTANSCity2017SSTUSERSORDERBYlocation_nameascLIMITNROW.AS  =  SELECT \n        INNER JOIN cities2017ASISTANSCity2017COUNTSONONstudent_id2017ASISTANSCity2017SSTUSERSGROUP_CONCATCityIDASISTANSCity2017ASISTANSCity2017COUNTSONONcity_id2017AS"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": "How many students live in each city?",
    "answer": "SELECT COUNT(*) FROM cities.GROUP_byCity"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": "Which state has most number of students?",
    "answernWHERE ASASASASASASASASASASASASASASAS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": "Give the state that has the most students.",
    "answer": "SELECT * FROM schools_state_count.ORDER"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": "Which country has least number of students?",
    "answer": "SELECT cidercioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncioncion"
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": "Give the country with the fewest students.",
    "answer": "SELECT name"
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": "Show names for all cities where at least three students live.",
    "answer": "SELECT name, COUNT(*) FROM cities_cities_name_and_students_countWHEREstudent_id_in_cities_to_add_later_countINGROUPbycity_id_in_cities_to_add_later_countGROUPHAVINGCOUNTISINCOUNTISINstudent_id_in_cities_to_add_later_countINGROUPORDERBYcountLIMIT10.HAVINGstudent_id INNER JOIN cities_cities_to_add_later_count2ONstudent_id_in_cities_to_add_later_count2.id_in_city_id_in_cities_to_add_later_count ON cities_cities_to_add_later_count2.city_id_in_cities_to_add_later_count2.id_in_city_id_in_cities_to_add_later_count2 = city_id_in_cities_to_add_later_count1"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": "What are the names of cities with at least three students?",
    "answer": "SELECT FROM   INNER JOIN ouvOCAMANDREellesLEADERINVALUESSEDEVOLUATIONSESSPEakersSESTUDYSESSHEADSESESSHISSESESSHIVOSSESSHEARTSESSSESSHIVOSSESSHIVOSSESSHIVOSSESSHEARTSESSSHEADSESESSSHEADSESESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSSHEADSESESESSSHEADSESESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSSHEADSESESESSSHEADSESESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSSHEADSESESSSHEADSESESSSHEADSESESSSHEADSESESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSHIVOSSESSSHEADSESESSSHeADSESESSSSheADSESESSSSheADSESESSSSheADSESESSSSheADSESESSSSheADSESESSS"
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": "Show all states where more than 5 students live.",
    "answer": "SELECT state, COUNT(*) FROM states_countering_tableJOINstates_countering_table_with_students_statements_statements_id_1002834667987769849705765243891198736556694781996781502339991429234332577687876877678666271577758667110256753657685671176577686876866711399999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": "What are the states with more than 5 students?",
    "answer": "SELECT * FROM student_data_class_name_2021.abc"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": "Show ids for all students who don't live in USA.",
    "answer": "SELECT id, title FROM students_in_americaANSYS.ED"
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": "What the the student ids for students not living in the USA?",
    "answer": "SELECT Student_id"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": "Show ids for all female (sex is F) students living in state PA.",
    "answer": "SELECT COUNT(*) AS total"
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": "What are the student ids for female students in the state of PA?",
    "answer": "SELECT DISTINCT F.student_ID"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": "Show ids for all male students living outside of USA.",
    "answer": "SELECT * FROM StudentManagementSystem.Schools WHERE Country = 'US'"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": "What are the ids for male students not in the USA?",
    "answer": "SELECT * FROM male_students_in_america.SELECT"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": "What is the distance between BAL and CHI?",
    "answer": "SELECT R2 FROM MLDB.MLModel WHERE MdlModelID = 160583"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": "Give the distance between BAL and CHI?",
    "answer": "SELECT COUNT(*) FROM Bal_BalChart_20193734.IND"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": "Show me the distance between Boston and Newark.",
    "answer": "SELECT SUM(NEST) FROM B2BNESTJoinNESTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASSTONBASST"
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": "What is the distance between Boston and Newark?",
    "answer": "SELECT city FROM table_name_name_name2WHEREstate_id_name1Id1_1id1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1_name1_1value1"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": "What is the average, minimum, maximum distance between two cities?",
    "answer
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": "Give the average, minimum, and maximum distances between two cities.",
    "answer": "SELECT MAX(dist) FROM distance_table.INSERT \n     WHERE city1 = 'New York' ORDER BY distance"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with maximum distance.",
    "answer": "SELECT C.city, D.distance FROM cities_cities.cities AS C INNER JOIN cities_distantAS.Distant AS D ON C.city = D.city"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": "What are the city codes of the cities with the maximum distance?",
    "answer": "SELECT OUTPUT"
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance greater than the average.",
    "answer": "SELECT * FROM city_info_cities2017_2020_4_654784_293230_2020_6_39_79_75_74_83_31_19_20_75_14_67_66_92_70_77_89_85_293230_2020_6_39_79_75_74_83_31_19_20_75_14_67_66_92_70_77_89_85_293230_2020_6_39_79_75_74_83_31_19_20_75_14_67_66_92_70_77_89_85_293230_2020_6_39_79_75_74_83_31_19_20_75_14_67_66_92_70_77_89_85_293230_2020_6_39_79_75_74_83_31_19_20_75_14_67_66_92_70_77_89_85_293230_2020_6_39_79_75_74_83_31_19_20_75_14_67_66_92_70_77_89_85_293230_2020_6_39_79_75_74_83_31_19_20_75_14_67_66_92_70_77_89_85_293230_2020_6_3"
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": "What are the city codes of cities with distance greater than average?",
    "answer": "SELECT iva"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance less than 1000.",
    "answer": "SELECT name FROM cities.cities WHERE distance < 1000"
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": "What are the city codes corresponding to cities with distances less than 1000?",
    "answer": "SELECT FROM"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": "What is the total distance between city BAL and all other cities.",
    "answer": "SELECT * FROM CityBal_to_all_cities.JOINCityBal AS c2 \n INNER JOIN CityBal_to_all_citiesASccb2ONc2.citybal_id \n  AS c2citybal_to_all_citiesASccb2 ON a1.citybal_id = c2citybal_to_all_citiesASccb2.id \nGROUP BY citybal"
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": "What is the sum of distances between BAL and other cities?",
    "answer": "SELECT AVG(distance) FROM Bal_to_Other_cities.Answer"
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": "What is the average distance between Boston and all other cities.",
    "answer": "SELECT City FROM Cities.objects WHERE Location = 'Boston';"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": "Give the average distance between Boston and other cities.",
    "answer": "SELECT AVG(Distance) FROM Boston_to_Cities.og"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": "What is the name of the city closest to Chicago?",
    "answer": "SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city_name IN (SELECT city_name FROM cities_cities.cities WHERE city"
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": "Give the name of the nearest city to Chicago.",
    "answer": "SELECT * FROM your_table_name.WHERE \n    AS CITY INNER JOIN City_ACTONONiques_c2446753944481713A5B9F7D880E7CB1CBA33264642987229987344021506481289872525452552525452552525452552525452552525452552552525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525525254525"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": "What is the name of the city furthest to Boston?",
    "answer": "SELECT V"
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": "Give the city name of the city with greatest distance from Boston.",
    "answer": "SELECT city"
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": "Show all city codes and the total distance to all other cities.",
    "answer": "SELECT * FROM cities_info.Only"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": "For each city, what is the the city code and sum of distances from each?",
    "answer": "SELECT * FROM city_table.GROUP_by_city"
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": "Show all city names and the average distance to all other cities.",
    "answer": "SELECT CityName, AVG(Distance) FROM city_tableGROUPHAVINGDistance_to_all_citiesgisaid_id_in_crisp130925_164849_267527_142102_292229_190854_237746_289966_275692_270452_269433_257912_292102_238789_258526_269433_257912_292102_238789_258526_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_292102_269433_257912_2921"
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": "What are the city name and average distances from each city?",
    "answer": "SELECT * FROM citiescity_name_distance.WHERE \n     WHERE distance < 15"
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
    "answer": "SELECT the \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
    "answer": "SELECT IN"
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": "What is the first name and last name of the student living furthest to Linda Smith?",
    "answer": "SELECT FURthest"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": "What is the full name of the student who lives furthest from Linda Smith?",
    "answer": "SELECT FROM"
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": "Which state does the student whose first name is Linda live in?",
    "answer": "SELECT SC"
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": "Give the state that the student with first name Linda lives in.",
    "answer": "SELECT State FROM Students_Linda_2016Linda_james_Linda_naming_linda_state_name_to_english_hijl_name_to_english_james_2016_07_28_09_35_07_28_2016_24_08_14_00_24_26_28_21_20_08_14_00_24_26_28_21_20_08_25_29_20_07_33_07_22_24_30_20_00_20_28_2016_24_08_14_00_24_26_28_21_20_08_25_29_20_07_33_07_22_24_30_20_00_20_28_2016_24_08_14_00_24_26_28_21_20_08_25_29_20_07_33_07_22_24_30_20_00_20_28_2016_24_08_14_00_24_26_28_21_20_08_25_29_20_07_33_07_22_24_30_20_00_20_28_2016_24_08_14_00_24_26_28_21_20_08_25_29_20_07_33_07_22_24_30_20_00_20_28_2016_24_08_14_00_24_26_28_21_20_08_25_29_20_07"
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": "Return all details of sailors who are older than 30.",
    "answer": "SELECT * FROM sailors_age_30_ago_table_name.ash"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": "What can you tell me about sailors who are older than age 30?",
    "answer": "SELECT OUT"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": "Return name and age for sailors who are younger than 30.",
    "answer": "SELECT name, age FROM sailors_age_30_agoWHERE_age_in_30_agobetween.MINUTEANDMINUTE;"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": "What is the name and age of every sailor who is younger than age 30?",
    "answer": "SELECT OUTPUT"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": "Find boats reserved by Sailor with id 1.",
    "answer": "SELECT * FROM shipments_2016_01_07_r1056_4_2016_03_09_01_01_04_00_00_04_07_01_04_06_08_27_07_05_05_10_10_01_00_00_00_01_01_04_09_27_08_02_08_28_09_02_08_29_09_07_05_10_01_00_00_00_00_00_00_00_04_06_08_30_01_01_00_00_00_29_08_01_00_00_00_00_00_00_01_01_01_00_00_00_00_04_06_08_30_01_01_00_00_00_00_00_00_01_00_00_00_00_00_00_01_01_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_0"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": "What are the different boat ids reserved by the sailor whose id is 1?",
    "answer": "SELECT DISTINCTboat_ID"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": "Who reserved boat 102?",
    "answer
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": "What is the name of the sailor who reserved boat 102?",
    "answer": "SELECT H"
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": "Return the unique boat ids (bid) of all reserved boats.",
    "answer": "SELECT DISTINCT * FROM boats_bids_rwd320805_678400_20190205_20190702_20190901_20190902_20191001_20191104_20191206_20191307_20191408_20191509_20191600_20191701_20191802_20191903_20191904_20191905_20191906_20191907_20191908_20191910_20191911_20191912_20191913_20191914_20191915_20191916_20191917_20191918_20191919_20191920_20191921_20191922_20191923_20191924_20191925_20191926_20191927_20191928_20191929_20191930_20191931_20191932_20191933_20191934_20191935_20191936_20191937_20191938_20191939_20191940_20191941_20191942_201919"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": "What are the ids of all boats that are reserved by someone?",
    "answer": "SELECT id FROM boats_order_id.Only"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": "What is the name of sailors whose names contain letter e?",
    "answer": "SELECT V"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": "What is the name of every sailor whose name contains the letter e?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             "
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": "return the unique ids of sailors who are older than any sailors.",
    "answer": "SELECT * FROM sailors.age"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": "What is the different id of every sailor who is not the youngest?",
    "answer": "SELECT ID"
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
    "answer": "SELECT DISTINCT sname FROM sailors_age_20_to_85_ratings_sratings_3_3_4_5_6_7_1_2_3_4_5_6_1_2_3_4_5_6_3_4_5_6_7_2_2_4_3_4_5_6_7_3_4_5_5_6_1_1_2_3_4_5_6_3_4_5_5_6_7_3_4_5_6_3_4_5_5_6_7_1_2_3_4_5_6_1_2_3_4_5_6_3_4_5_6_7_3_4_5_6_7_3_4_5_5_6_7_1_1_2_3_4_5_6_3_4_5_5_6_7_3_4_5_6_3_4_5_5_6_7_1_1_2_3_4_5_6_3_4_5_5_6_7_2_2_4_3_4_5_6_3_4_5_5_6_7_3_4_5_5_6_7_3_4_5_5_6_7_1_2_3_4_5_6_3_4_5_5_6_7_1_2_3_4_5_6_3_4_5_5_6_7_1_2_3_4_5_6_3_4_5_5_6_7_3_4_5_5_6_7_3_4_5_5_6_7_3_4_5_5_6_7_3_4_5_5_6_7_1_2_3_4_5_6_3_4_5_5_6_7_3_4_5_5_6_7_3_4_5_5_6_7_1_2_3_4_5"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
    "answer": "SELECT OUT"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": "Find the name and id of the sailors who reserved at least one boat?",
    "answer": "SELECT Name, Id FROM ReservationsWHERE.status INNER JOIN ReservationsOnBoardingsStatusES.status ON BoardingsStatuses.status_id = (SELECT status_id FROM ReservationsWHEREstatus_idneqRElox201604038076401493026756298303409417881385881206587135017707578287090313025774113446406800000211009021001385004810090210011634600001764320632235962001719620195892166566200591632227866789196565000191009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": "What is the name and id of every sailor who reserved one or more boats?",
    "answer": "SELECT FROM"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": "Find the id and name of the sailors who reserved more than one boat.",
    "answer": "SELECT * FROM sailors_reservedWHEREboat_id_in_researched_ordersINreesERTED_orders.order_id INNER JOIN order_bought_by_riders_with_sailors_reserved_onboard_boughts_orders.joins ON order_bought_by_riders_with_sailors_reserved_onboard_boughts_orders.joins.onboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts_orders_joinsONboard_boughts"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who reserved two or more boats ?",
    "answer": "SELECT THE FROM OFertas.ANSWER"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT sid FROM Sailors_2018_2020_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2091_2092_2093_2094_2095_2096_2097_2098_2099_2100_2101_2102_2103_2104_2105_2106_2107_2108_2109_2110_2111_2112_2113_2114_2115_2116_2117_2118"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": "What are the sids for sailors who reserved red or blue boats?",
    "answer": "SELECT The                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             "
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
    "answer": "SELECT sid FROM Sailors_sailors_2018_2017_12_30WHERE.date INNER JOIN date2018_2017_12_30_on_date2018_2017_12_30_date2018_2017_12_30_sailors_sailors_2018_2017_12_30_date2018_2018_2017_12_30_sailors_sailors_2018_2017_12_30_date2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_2018_20"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red or blue boats?",
    "answer": "SELECT FROM   \tWHERE SAILOR  =  2"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT sid FROM Sailors_2018_2020_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2091_2092_2093_2094_2095_2096_2097_2098_2099_2100_2101_2102_2103_2104_2105_2106_2107_2108_2109_2110_2111_2112_2113_2114_2115_2116_2117_2118"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who reserved red and blue boats?",
    "answer": "SELECT IVE"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
    "answer": "SELECT sid FROM Sailors_sailors_2018_2017_12_30WHERE.date INNER JOIN date2018_2017_12_30WithDATE2018_2017_12_30Date2018_2017_12_30AndDate2018_2017_12_30Date2018_2017_12_30Ondate2018_2017_12_30WHEREcolorRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyRdyR"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red and blue boats?",
    "answer": "SELECT IVE"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
    "answer": "SELECT DISTINCT * FROM sailors_josephs_2013_04_08_17375_39764_2013_10_29_39764_2013_06_09_17375_39764_2013_03_17_2018_01_14_2018_06_02_39764_2013_08_12_2018_01_25_2017_01_30_2018_06_06_39764_2013_11_04_2017_07_05_2017_06_08_19375_2018_07_05_39764_2013_09_02_2018_07_05_2018_06_08_19375_2018_07_05_39764_2013_10_26_2018_01_14_2018_06_09_2018_01_25_2017_01_30_2018_06_06_39764_2013_11_04_2017_07_05_2017_06_08_19375_2018_07_05_39764_2013_09_02_2018_07_05_2018_06_08_19375_2018_07_05_39764_2013_11_04_2017_07_05_2018_01_14_2018_06"
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who have not reserved a boat?",
    "answer": "SELECT DISTINCT ID"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": "what is the name and id of sailors who do not have a reservation of a boat?",
    "answer": "SELECT id, name FROM sailors_without_reservationsWHEREstatus_id__neq__2014.Keep"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who do not have boat reservations?",
    "answer
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": "Find id for the sailors who do not have a reservation of a boat?",
    "answer": "SELECT ID FROM SailorsWithoutReservations.WHERE  ORDER BY SONGARS  LIMIT 0"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": "What is id about sailors who do not have boat reservations?",
    "answer": "SELECT Answer"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": "What is the name of the sailors who reserved boat with id 103?",
    "answer": "SELECT THE RIGHT OUTER JOIN OFTHESERSALIFS.ANSWER AS follows\n \n AS BAs
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": "Find the name of the sailors who reserved boat with id 103.",
    "answer": "SELECT Name FROM ReservationsWHERE_id_103__reservations__id__ID_103__id__103__name__is__true.ANDReservations__status__IN"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "answer": "SELECT OR"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "answer": "SELECT A"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "answer": "SELECT OR"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "answer": "SELECT ROLES"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
    "answer": "SELECT name, id FROM sailors.ratings WHERE rating > 2 ORDER BY boat"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
    "answer": "SELECT * FROM sailors.rating WHERE rating >= 3"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": "Find the name and age of the oldest sailor.",
    "answer": "SELECT Name, Age FROM sailors_age_table.ORDER AS BYAge LIMIT 1"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": "What is the name and age of the sailor with maximum age?",
    "answer": "SELECT MAX(Age) FROM sailors.Answer"
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": "how many sailors in total?",
    "answer": "SELECT FROM"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": "How many sailors exist?",
    "answer": "SELECT BY"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": "What is the average age of sailors whose rating is 7?",
    "answer": "SELECT A"
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": "What is average age of all sailors who have a rating of 7?",
    "answer": "SELECT Age FROM SailorsGROUPByRatingORDEREDLIMIT100000.ANS"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": "How many sailors whose name starts with letter D exist ?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": "What is the count of the sailors whose name starts with letter D ?",
    "answer": "SELECT COUNT(*) FROM sailors_name_2013_2017_4_9_3_1_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_101_102_103_104_105_106_107_108_109_110_111_112_113_114_115_116_117_118_119_120_121_122_123_124_125_126_127_128_129_130_131_132_133_134_135_136_137_138_139_140_141_142_143_144_145_146_147_"
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": "What are the average rating and max age of all sailors?",
    "answer": "SELECT AVGRating, MAXAge FROM sailorsGROUP_CONCATHAVINGSUMRatingAVGAMBLETOMAXRatingAVGAMBLETOMAXAgeLessThan2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": "Find the average rating and largest age for the sailors",
    "answer": "SELECT rating FROM sailorsSELECTageFROMratingsGROUPHAVINGageINAVINGage3045HAVINGage2998HAVINGage1997HAVINGage1906HAVINGage2987HAVINGage1994HAVINGage1983HAVINGage2976HAVINGage2965HAVINGage2954HAVINGage2943HAVINGage2932HAVINGage2921HAVINGage2910HAVINGage2909HAVINGage2908HAVINGage2907HAVINGage2906HAVINGage2895HAVINGage2884HAVINGage2873HAVINGage2862HAVINGage2851HAVINGage2840HAVINGage2839HAVINGage2838HAVINGage2837HAVINGage2836HAVINGage2835HAVINGage2834HAVINGage2833HAVINGage2832HAVINGage2831HAVINGage2829HAVINGage2828HAVINGage2827HAVINGage2826HAVINGage2825HAVINGage2824HAVINGage2823HAVINGage2822HAVINGage2821HAVINGage2820HAVINGage2819HAVINGage2818HAVINGage2817HAVINGage2816HAVINGage2815HAVINGage2814HAVINGage2813HAVINGage2812HAVINGage2811HAVINGage2810HAVINGage2809HAVINGage2808HAVINGage2807HAVINGage2806HAVINGage2805HAVINGage2804HAVINGage2803HAVINGage2802HAVINGage2801HAVINGage2800HAVINGage2799HAVINGage2798HAVINGage2797HAVINGage2796HAVINGage2795HAVINGage2794HAVINGage2793"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat.",
    "answer": "SELECT boato_name, COUNT(*) FROM reservationsGROUPINGboato_nameHAVINGboat_name.in GROUP BY boato_name"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat?",
    "answer": "SELECT Boat_ID FROM ReservationsGROUPByBoat_IDORDERBYNumberASCLIMIT1.Thought"
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with id greater than 50.",
    "answer": "SELECT Boat_name, COUNT(*) FROM reservations_tableGROUPByboat_idORDER_byCOUNTLIMIT256.Hint"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat with an id greater than 50?",
    "answer": "SELECT * FROM reservation_tableWHEREboat_idgreater_than_50ORDERBYboat_idASCLIMITN.SELECT"
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with more than 1 reservation.",
    "answer": "SELECT Boat, COUNT(*) FROM ReservationsGROUPHAVINGCOUNTigkeitboatgegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegege"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat that has more than 1 reservation already?",
    "answer": "SELECT Boat_name, COUNT(*) FROM ReservationsGROUPEDByBoat_nameHAVINGRECORDSCOUNTINHERootISBLANKOrRECORDSCOUNTINHERootISBLANKORRECORDSCOUNTINHERootISBLANKORRECORDSCOUNTINHERootISBLANKORRECORDSCountINHERootISBLANKORRECORDSCountInHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCountInHERootIsBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCountInHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCountInHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCountInHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCountInHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCountInHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNTINHERootISBLANKORRERecordsCOUNT"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
    "answer": "SELECT id FROM reservation_table.rates WHERE id > 1"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
    "answer": "SELECT BY ORDER BY DESC"
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
    "answer": "SELECT * FROM sailings_rating_groupingsWHEREclassification_id_in_class_id_1139402548687372744644116008000667459329166120139673695178760106891736697671387467711077349280492996779980001113874677110773492804929967799800011138746771107734928049299677998000111387467711077349280492996779980001113874677110773492804929967799800011138746771107734928049299677999800011138746771107734928049299677998000111387467711077349280492996779998000111387467711077349280492996779998000111387467711077349280492996779980001113874677110773492804929967799980001113874677110773"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
    "answer": "SELECT ellen"
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": "Find the name, rating and age of all sailors ordered by rating and age.",
    "answer": "SELECT Name, Rating, Age FROM sailors_orderingsGROUPHAVING.rating INNER JOIN ratings_inners_on_sailors_id_2387164539290857987258727156184203835967850523835274559678531737120726737357893819049756274966477281674222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
    "answer": "SELECT * FROM sailors.ORDER RIGHT OUTER JOIN ratings.ONratingsdatum_1isser_ID  AS rID1 ON ratingsdatum_2isser_ID  = rID2"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": "Find the total number of boats.",
    "answer": "SELECT A"
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": "How many boats are there?",
    "answer": "SELECT ively"
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": "How many boats are red?",
    "answer": "SELECT YES ORDER BY B"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": "How many red boats exist?",
    "answer": "SELECT BY"
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
    "answer": "SELECT Name FROM BoatsBkersWHEREAgeBetween20And30.SortOrder"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": "What are the names of the boats booked by people between age 20 and 30?",
    "answer": "SELECT icamente"
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
    "answer": "SELECT RATED"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
    "answer": "SELECT ORS"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": "What is highest rating between sailors?",
    "answer": "SELECT FROM"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": "What is the maximum rating for sailors?",
    "answer": "SELECT A.CaptainB.SSC"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": "Find the names of sailors who reserved boat with the name Melon.",
    "answer": "SELECT * FROM sailors_melon_2018_12_30WHERESailor_idSEquels_toMelon_2018_12_30ORDER_bySailing_rateASCLIMITLIMITCOUNT.ait"
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": "What are the names of sailors who reserved a boat with the name Melon?",
    "answer": "SELECT A.______"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": "List the names and ages of all sailors sorted by rating in descending order.",
    "answer": "SELECT * FROM sailors.sort_by_rating ORDER BY rating DESC"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": "What are the names and ages of all sailors sorted by decreasing rating?",
    "answer": "SELECT ____"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": "Find the model of the most expensive headphone.",
    "answer": "SELECT model"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": "Which headphone model has the highest price?",
    "answer": "SELECT highest"
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": "List all different headphone models in the alphabetical order.",
    "answer": "SELECT * FROM headphones_list.ORDER"
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": "Return the list of distinct headphone models ordered alphabetically.",
    "answer": "SELECT DistinctModel FROM headphones_model.distinct ORDER BY DistinctModel"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": "Which headphone class is the most common one?",
    "answer": "SELECT ECTE"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": "Which headphone class contains the most headphones?",
    "answer": "SELECT T"
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": "Which headphone class does have more than two headphones?",
    "answer": "SELECT ELECECECECECECECECECECECECECececECececececececececececececececececececececececececececececececececececececececececececececececececec"
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": "Find the headphone class that does not contain more than two headphones.",
    "answer": "SELECT H1 FROM shoes.h2 GROUP BY H1"
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": "Find the number of headphones with a price higher than 200 for each class.",
    "answer": "SELECT * FROM class_tableGROUP_byclass_idORDER_bypriceascLIMIT_num.ash"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": "How many headphones cost more than 200 for each headphone class?",
    "answer": "SELECT * FROM headphonesGROUPHAVINGCOUNTHEARTBEANSHEARERISINSELECT200COUNTHEARTBEANSHEARERFROMheadphoneseARERINSELECTCOUNTHEARTBEANSHEARERGROUPHAVINGCOUNTHEARTBEANSHEARERINSELECTCOUNTHEARTBEANSHEARERGROUPHAVINGCOUNTHEARTBEANSHEARERINSELECTCOUNTHEARTBEANSHEARERGROUPHAVINGCOUNTHEARTBEANSHEARERINSELECTCOUNTHEARTBEANSHEARERGROUPHAVINGCOUNTHEARTBEANSHeARERINSELECTCOUNTHEARTBEANSHEARERGROUPHAVINGCOUNTHEARTBEANSHEARERINSELECTCOUNTHEARTBEANSHEARERGROUPHAVINGCOUNTHEARTBEANSHEARERINSELECTCOUNTHEARTBEANSHEARERGROUPHAVINGCOUNTHEARTBEANSHEARERINSELECTCOUNTHEARTBEANSHEARERGROUPHAVINGCOUNTHEARTBEANSHeARERINSELECTCOUNTHEARTBEANSHEARERGROUPHAVINGCOUNTHEARTBEANSHEARERINSELECTCOUNTHEARTBEANSSheARER"
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": "how many different earpads are there?",
    "answer": "SELECT COUNT(DISTINCTearpads) FROM your_table_name.Thought"
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": "Count the number of different earpads.",
    "answer": "SELECT COUNT(DISTINCTearpads) FROM ears.ears"
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": "Find the top 2 earpads that are mostly used.",
    "answer": "SELECT Earpads FROM earpadsGROUPByEardepad.ORDER LIMIT 2"
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": "What are the top 2 earpads in terms of the number of headphones using them?",
    "answer": "SELECT COUNT(DISTINCT) FROM earpads_earpads_earspads_earpads_earspads_earpads_earspads_earspads_earspads_earpads_earspads_earspads_earpads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earsp"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": "What are the model, class, and construction of the cheapest headphone?",
    "answer": "SELECT MIN(CASEWhenPriceInGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGiGi"
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": "Find the model, class, and construction of the headphone with the lowest price.",
    "answer": "SELECT * FROM headphones_table.hdn WHERE brand = 'Nike' ORDER BY price ASC LIMIT 1"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": "Find the average price for each headphone construction.",
    "answer": "SELECT Construction, AVG(Price) FROM headphones_constructionsGROUPHAVINGConstructionIDINangered.azer"
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": "How much does headphones cost on average for each headphone construction?",
    "answer": "SELECT product, construction"
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
    "answer": "SELECT A"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
    "answer": "SELECT a"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": "Which earpads never use plastic construction?",
    "answer": "SELECT TTETTETTETTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETE"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": "Find all earpads that do not use plastic construction.",
    "answer": "SELECT earpads FROM earpads_earpads_earpads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads_earspads"
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": "Find the headphone models whose price is below the average price.",
    "answer": "SELECT headphones FROM your_table_nameGROUP_byGROUP_IDORDER_byPrice_descLIMIT_1.headphones"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": "What are the headphone models that cost less than the average price?",
    "answer": "SELECT model"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": "Sort all store names by store open date.",
    "answer": "SELECT StoreName FROM StoreOpenDateOrderingsWHERE_orderIDLIKEstraCTESCOMBinedSELECTStoreNameFROMStoreOpenDateOrderingsGROUPByStoreNameORDERByStoreOpenDateOrderings.date"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": "Give me a list of store names, sorted by store open date.",
    "answer": "SELECT name"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": "List name and parking info for the stores in the Tarzana neighborhood.",
    "answer": "SELECT * FROM stores_table.INSERT \n    WHERE location = 'Tarzana'"
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "answer": "SELECT ProjektReturn"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": "How many different neighborhoods are there for all stores?",
    "answer": "SELECT FROM"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": "Count the number of distinct neighborhoods stores are located.",
    "answer": "SELECT COUNT(*) FROM neighborhood_store_count.Only"
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": "find the number of stores in each neighborhood.",
    "answer": "SELECT store"
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": "How many stores are there in each neighborhood?",
    "answer": "SELECT FROM"
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
    "answer": "SELECT * FROM stores_name_huo2018.INSERT"
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
    "answer": "SELECT SC"
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": "Find the name of stores which have no headphone in stock.",
    "answer": "SELECT name FROM store_listWHEREocks_in_stock_isNULL.INSERT"
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": "Which stores do not have any headphones in stock? Give me the store names.",
    "answer": "SELECT SouthernSSES"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": "Which headphone models do not have any stock in any store?",
    "answer": "SELECT DISTINCTSELECT FROM SELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTSELECTASSELECTSELECTSELECTorcunionSELECTSELECTorcSELECTFROM_unionunionunionUnionFROM.sqlunionunion, columns_nameunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion"
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": "Find the headphone models that are not in stock in any store.",
    "answer": "SELECT headphones_model FROM shoes_table_holding_in_stockorderGROUPHAVINGocks_id__ornoINCOALESCEStock_id_201901230000012437956845778144950767236947229999999.RETURNING"
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": "Which headphone model has the largest quantity of stock across all the stores?",
    "answer": "SELECT S"
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": "Find the headphone model whose total quantity in stock is the largest.",
    "answer": "SELECT MIN(model) FROM headphones_model.hdn WHERE price > 200"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": "How many headphones are stored in the Woodman store?",
    "answer": "SELECT icamente"
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": "Find the total quantity of headphones stored in the Woodman store.",
    "answer": "SELECT SUM(hose_weight) FROM inventory_hosewear_woodman.anneer"
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": "Which neighborhood does not have any headphone in stock?",
    "answer": "SELECT teammates
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": "Find the neighborhood where no headphones are in stock.",
    "answer": "SELECT District, Subdistrict FROM LocationTableGROUPINGBYDISTINCThoodScenteORDER_byCOUNTDistINCTHIPASSESASCENDLIMIT1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": "How many authors do we have?",
    "answer": "SELECT COUNT(*) FROM authors.Question"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": "Count the number of authors.",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": "How many papers do we have?",
    "answer": "SELECT COUNT(*) FROM papers.WHERE ORDER BY publish_date DESC"
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": "Count the number of papers.",
    "answer": "SELECT COUNT(*) FROM papers.ardi"
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": "How many affiliations do we have?",
    "answer": "SELECT COUNT(*) FROM affiliations.Question"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": "Count the number of affiliations.",
    "answer": "SELECT COUNT(*) FROM Affiliation.JOIN \n
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": "How many papers do we have in NAACL 2000?",
    "answer": "SELECT COUNT(*) FROM papers_papersnaACL_2000.ait"
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": "Count the number of papers in NAACL 2000.",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": "How many papers are published in year 2009 by Columbia University?",
    "answer": "SELECT COUNT(*) FROM publications_2009_columbia_2009_hawaii_backed_papers_2008_2009_2010_2009_2010_2014_2015_2016_2017_2018_2019_2020_2021_2022_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2091_2100_2101_2102_2103_2104_2105_2106_2107_2108_2109_2110_21"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": "Count the number of papers published by Columbia University in 2009.",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": "List names and addresses for all affiliations.",
    "answer": "SELECT Name, Address FROM AffiliationTable.INSERT\n    WHERE ParentID = (SELECT ID FROM ParentWHEREParentIDLIKEpat.regexREPT1, regexREPT2REPT3rieben
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": "What are the names and addresses for all affiliations?",
    "answer": "SELECT A1 FROM Affiliation_A1.HTM"
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": "List all venues and years for papers ordered by year.",
    "answer": "SELECT COUNT(*) AS total"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": "What are the distinct venues for papers, ordered by year?",
    "answer": "SELECT venue FROM papers_papers_year_2021GROUPBYyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPBYyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPBYyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPBYyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDERByyearLIMITNROWNSELECTvenueFROMpapers_papers_year_2021GROUPbyyearORDER"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers written by Harvard University.",
    "answer": "SELECT Title FROM PapersWHEREUniversityNameLikeHarvard_100_25000_3790_3840_3900_4000_4050_4100_4200_4300_4400_4500_4600_4700_4800_4900_5000_5100_5200_5300_5400_5500_5600_5700_5800_5900_6000_6100_6200_6300_6400_6500_6600_6700_6800_6900_7000_7100_7200_7300_7400_7500_7600_7700_7800_7900_8000_8100_8200_8300_8400_8500_8600_8700_8800_8900_9000_9100_9200_9300_9400_9500_9600_9700_9800_9900_10000_11000_12000_13000_14000_15000_16000_17000_18000_19000_20000_21000_22000_23000_24000_25000_26000_27000_28000_29000_30000_31000_32000_33000_34000_35000_3"
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
    "answer": "SELECT paper_id"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs written by Mckeown.",
    "answer": "SELECT p.title, ppaper_id FROM papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_ppaper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_ppaper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_ppaper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in_papers_papers_mckeown_paper_id_order_paper_id_in"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written by Mckeown?",
    "answer": "SELECT Title, PaperID FROM papers_mckeown_jan2015.anneer"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
    "answer": "SELECT p.title, ppaper_id FROM papers_papersJoined_papersJOINed_on_papersWHERESTitleInGROUPBySTitleAndPaperIDInGROUPBySTitleAndPaperIDInGROUPBySTitleAndPaperIDInGROUPBySTitleAndPaperIDAndSTitleInGROUPBySTitleAndPaperIDInGROUPBySTitleAndPaperIDInGROUPBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDInGROUPBySTitleAndPaperIDInGROUPBySTitleAndPaperIDInGROUPBySTitleAndPaperIDAndSTitleInGROUPBySTitleAndPaperIDInGROUPBySTitleAndPaperIDAndSTitleInGROUPBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGROUPBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGROUPBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGROUPBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndSTitleInGroupBySTitleAndPaperIDAndStitleInGroupBySTitle"
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
    "answer": "SELECT DISTINCT P2.P1"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
    "answer": "SELECT papers.title FROM papers_papersJoinerWHEREauthors_mckeown_kleenow_Rambow_0187547623597464315597014727743035Mckeown_Mckeown_Kleenow_PaperID_mckeown_kleenow_0187547623597464315597014727743035Mckeown_PaperID_mckeown_kleenow_0187547623597464315597014727743035Mckeown_PaperID_mckeown_kleenow_0187547623597464315597014727743035Mckeown_Mckeown_Kleenow_PaperID_mckeown_kleenow_0187547623597464315597014727743035Mckeown_PaperID_mckeown_kleenow_0187547623597464315597014727743035Mckeown_Mckeown_Kleenow_PaperID_mckeown_kleenow_0187547623597464315597014727743035Mckeown_PaperID_mckeown_kleenow_0187547623597464315597014727743035Mckeown_Mckeown_Kleenow_PaperID_mckeown_kleenow_0187547623597464315597014727743035Mckeown_PaperID_mckeown_kleenow_0187547623597464315"
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
    "answer": "SELECT PaperID FROM paper_id_papers_201806_27_4557773457773459976269270277999992618636544478192609343450541900926967772189799999261863654447819260934345054190092696777218979999926186365444781926093434505419009269677218979999926186365444781926093434505419009269677721897999992618636544478192609343450541900926967721897999999261863654447819260934345054190092696772189799999261863654447819260934345054190092696772189799999261863654447819260934345054190092696772189799999261863654447819260934345054190092696772189799999"
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
    "answer": "SELECT T1.title, T2paper_id FROM P3T1P2P1P2T3T4P5P6P7P8P9P10P11P12T3P4P5P6P7P8P9P10P11P12P13T3P4P5P6P7P8P9P10P11P12P13P14P15P16P17P18P19P20P21P22P23P24P25P26P27P28P29P30P31P32P33P34P35P36P37P38P39P40P41P42P43P44P45P46P47P48P49P50P51P52P53P54P55P56P57P58P59P60P61P62P63P64P65P66P67P68P69P70P71P72P73P74P75P76P77P78P79P80P81P82P83P84P85P86P87P88P89P90P91P92P93P94P95P96P97P98P99P10P11P12P13P14P15P16P17P18P19P20P21P22P23P24P25P26P27P28P29P30P31P32P33P34P35P36P37P38P39P40P41P42P43P44P45P46P47P48P49P50P51P52P53P54P5"
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
    "answer": "SELECT RABOW"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
    "answer": "SELECT * FROM authors_wiki_mckeown_kathleen_rambow_2016_2018_2019_2020_2021_2022_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2091_2092_2093_2094_2095_2096_2097_2098_2099_2100_2101_2102_2103_2104_2105_2106_2107_2108_2109_2110_2"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
    "answer": "SELECT PaperId"
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": "List the names of all authors and their number of papers in descending order by number of papers.",
    "answer": "SELECT * FROM authors_tableORDER_by_num_of_papersDESC.AVING_count INNER JOIN (SELECT author_id, COUNT(*) AS num_of_papers FROM authors_tableGROUPBy_author_id.joinING_publications) AS publications_table ON authors_table.author_id = publications_table.author_id"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": "How many papers did each author publish, ordered by number of papers?",
    "answer": "SELECT countcolumn FROM authorsGROUP_byauthor_idORDER_bycountcolumnLIMIT100.ANS"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": "List all affiliations with ascending ordered number of papers.",
    "answer": "SELECT name FROM authors_aJoiners_btable.nodes AS a INNER JOIN authors_btable.nodes AS b ON a.id = b.id INNER JOIN authors_ctable.nodes AS c ON b.id = c.id INNER JOIN authors_htable.nodes AS h ON c.id = h.id INNER JOIN authors_ktable.nodes AS k ON h.id = k.id INNER JOIN author_ltable.nodes AS l ON k.id = l.id INNER JOIN author_mtable.nodes AS m ON l.id = m.id INNER JOIN author_ptable.nodes AS p ON m.id = p.id INNER JOIN author_rtable.nodes AS r ON p.id = r.id INNER JOIN authors_stable.nodes AS s ON r.id = s.id INNER JOIN authors_ttable.nodes AS t ON s.id = t.id INNER JOIN author_xtable.nodes AS x ON t.id = x.id INNER JOIN authors_ytable.nodes AS y ON x.id = y.id"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": "What are the names of all affiliations, ordered by number of papers?",
    "answer": "SELECT T2.PaperTitle FROM AffiliationTable.T2 INNER JOIN AffiliationTable.Affiliate ON T1.AffiliationID = A1.AffiliationID INNER JOIN AffiliationTable.Paper ON T3.PaperID = P3.PaperID"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": "List names of all authors who have more than 50 papers.",
    "answer": "SELECT a.name, COUNT(*) AS num_papers FROM authors_a_tableJOINauthors_b_tableON.author_id_1IDA INNER JOIN authors_b_tableON.author_id_2IDA ON authors_b_id_1IDA = author_id_2IDA GROUP BY a.name"
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": "What are the names of all authors who have more than 50 papers?",
    "answer": "SELECT name FROM authors_table_nameGROUPHAVINGCOUNTcolumn_nameISUPPERCASEAORDERByauthor_idLIMIT100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": "List names of all authors who have only 1 paper.",
    "answer": "SELECT T1.authors, COUNT(*) AS num_authors"
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": "What are the names of authors who have exactly 1 paper?",
    "answer": "SELECT two"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": "What is the venue and year with the most number of publications?",
    "answer": "SELECT Venue, Year FROM PublicationsWHEREPublicationTypeInPackageAndYearOrderIsPackageAndYearOrderInPackageOrder.INSERT \n    GROUP BY Venue"
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": "What was the venue and year with the most publications?",
    "answer": "SELECT venue, year FROM publications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25SELECTvenueFROMpublications_tableGROUPHAVINGPublishYear__ISBLANKORDEREDLIMIT25"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": "What is the venue with the least number of publications?",
    "answer": "SELECT Venue FROM EventsWHEREPublicationCountLessThan10.SELECTvenue"
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": "Which venue has the fewest publications?",
    "answer": "SELECT JOIN GROUP BY ORDER ORDER BY ORDER DESC"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": "How many papers cite paper with id A00-1002?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": "Count the number of papers which cited a paper with id A00-1002.",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": "How many reference papers does paper with id D12-1027 have?",
    "answer": "SELECT COUNT(*) FROM ref_papers_id_d12_1027_rfsp.aid WHERE aid_id = 4"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": "Count the number of references the paper with id D12-1027 has.",
    "answer": "SELECT COUNT(*) FROM references_d12_1027.r"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": "What is the id and the number of citations of the most cited paper?",
    "answer": "SELECT * FROM papers_id_citationsWHEREPaper_id_column_name.equalsLCD_paper_ID_column_NAME ORDER BY Cites DESC LIMIT 1"
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": "Give the id and the number of citations of the most cited paper.",
    "answer": "SELECT T2.id, COUNT(T1.citation_id) AS citation_count FROM t3T1T2JOIN.mdT1T2ONt1_id INNER JOIN t2Onn1_id_inNERWHEREn1_id_inner.t1_idinner ON n2_id_inner.t2_idinner = (SELECT t2.id FROM t3T1T2Join.mdT1T2ONt1_id INNER JOIN t2Onn1_id_inNERWHEREn1_id_inner.t1_idinner ON t2.idINNER\n\t\t<> (SELECT id, COUNT(*) AS citation_count FROM t2T1T2JOIN.mdT1T2ONt1_id_INNER JOIN t2Onn1_id_inNERWHEREn1_id_inner.t1_idinner ON t2.idINNER\n\t\t<> (SELECT id, COUNT(*) AS citation_count FROM t1T2T2Join.mdT1T2ONn1_id_inNERJOIN))  ORDER BY citation_count DESC LIMIT 100.0);"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": "Give the title of the paper which cites most number of papers?",
    "answer": "SELECT COUNT"
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": "What is the title of the paper which cites the most other papers?",
    "answer": "SELECT title"
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": "List top 10 most cited papers and their numbers of citations.",
    "answer": "SELECT *\nFROM cited_papers_citations_2023_toc.year AS T\nGROUP BY T.year"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": "What are the 10 most cited papers, and how many citations did each have?",
    "answer": "SELECT column_name FROM citations_table.citations WHERE author_id = 'author_id'"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": "How many citations does Mckeown , Kathleen have ?",
    "answer": "SELECT COUNT(*) FROM citation_mckeown_kathleen.WHEREibt1_2020"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": "Count the number of citations Mckeown , Kathleen has .",
    "answer": "SELECT COUNT(*) FROM citations_mckeown_kathleen_citations_count.anneer"
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": "How many papers does Mckeown , Kathleen cite ?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": "Count the number of papers Mckeown , Kathleen has cited .",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": "Find the name and number of citations of the author who has most citations among all authors?",
    "answer": "SELECT a.name, COUNT(*) AS num_citations \nFROM authorsa_table_aASBN2015_39865734000000182783827610432050LONJoin.authorsa_table_bAASBN2015_39865734000000182783827610432050LONJoin"
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
    "answer": "SELECT T2.Name, T2.CitationCount \nFROM authors.t2 INNER JOIN papers.p2 ON authors.t2.Id = papers.p2.Id \nGROUP BY T2.Name \nORDER BY T2.CitationCount DESC;"
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
    "answer": "SELECT venue, year"
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": "Which venues and years did Mckeown , Kathleen have papers ?",
    "answereTETETTETETETEteTETE"
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": "What are the venues and years where Columbia University had papers ?",
    "answer": "SELECT venue FROM Columbia_Papers_Columbia_19365WHEREYear_in_date__lt__2010GROUP_CONCATENATE_backoniaHAVINGCOUNTigkeit__ISINCTPaper__ID__gt__1000000.ORDER"
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": "Which venues and years did Columbia University have papers ?",
    "answer": "SELECT counterparts"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": "Which author had the most papers in the year 2009?",
    "answer": "SELECT SELECT FROM FROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMoppedFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMunikoutineFROMFROMFROMuredFROMFROMFROMFROMFROMFROMopingFROMFROMFROMFROMFROMFROMFROMFROMFROMrastructureFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMopsFROMFROMFROMFROMFROMFROMopsFROMFROMuredFROMFROMFROMFROMFROMFROMaiduunikosisFROMFROMFROMFROMFROMFROMFROMFROMFROMFROMopsFROMFROMFROMFROMFROMuredFROMFROMFROMFROMoriginFROMFROMFROMFROMFROMFROMopingrastructureFROMFROMFROMFROMFROMFROMFROMFROMoppedFROMFROMFROMFROMFROMFROMFROMopsFROMFROMFROMFROMFROMFROMFROMoutineFROMFROMFROMFROMFROMFROMFROM.FROMFROM\n\t\t\t\n\n\n\t\t\t\tORDER BY CONTuchaFROMFROMUBlica ASCLIMIT +1"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": "What is the name of the author with the most papers in 2009?",
    "answer": "SELECT the\nFROM authors_name_2009_2010_2009_2010_2010_2010_2010_2010_2010_2011_2012_2013_2014_2015_2016_2017_2018_2019_2020_2021_2022_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2091_2092_2093_2094_2095_2096_2097_2098_20"
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
    "answer": "SELECT theonym"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": "Which 3 affiliations had the most papers in 2009?",
    "answer": "SELECT SELECT"
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": "How many papers does Columbia University have in or before 2009 ?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": "Count the number of papers Columbia University had during or prior to 2009 .",
    "answer": "SELECT COUNT(*) FROM papers_columbia_2009_2013_nws_to_2009_papers_holding_date_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2009_2013_nws_to_2009_papers_holding_date_papers_columbia_2"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": "How many papers does Stanford University have between 2000 and 2009?",
    "answer": "SELECT BY"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": "Count the number of papers Stanford University had between 2000 and 2009.",
    "answer": "SELECT COUNT(*) FROM papers_papers_Stanford_Pub_2000_to_2009.ORDER"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": "What is the title of the paper that has most number of authors?",
    "answer": "SELECT title FROM papers_with_authorsWHERE.authors_id INNER JOIN authors_explore_scoresournalsONauthors_id______________SELECTtitleFROMpapers_with_authorsWHERE.authors_id__________SELECTtitleFROMpaperstudiesWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy_id__________SELECTtitleFROMpapers_with_authorsWHEREpapersstudy"
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": "Give the title of the paper with the most authors.",
    "answer": "SELECT title FROM papers_with_authorsWHERE.authors_name INNER JOIN authors_with_terms_of_service_on_paper_idWHEREpapers_id.isinalised_by_id\n\n \n  AS A AS BASAScoli ON C = (SELECT author_id, COUNT(*) FROM papers_with_terms_of_service_on_paper_idWHEREpapers_id.isinalised_by_id)"
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": "How many collaborators has Mckeown , Kathleen had ?",
    "answer": "SELECT COUNT(*) FROM Collaborators_mckeown_kathleen_2019WHEREMakername_Mckeown_2019__ID__equals__Mckeown_2019_07_06_1537172028_2028_11_10.HT"
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
    "answer": "SELECT SSELESSESSESSESSESSESSESSESSESSESSESSESSESSESSESSESSESSESSEsSESSESSESSESSSESSSESSESSESSESSSESSES"
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
    "answer": "SELECT Name"
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": "Find the id of the papers whose title has the key word 'translation'.",
    "answer": "SELECT P.PID"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": "What are the ids for papers with titles containing 'translation'?",
    "answer": "SELECT paper_id"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": "Find the id and title of the papers that are never cited by others.",
    "answer": "SELECT T2.PaperID, T2.Title FROM PapersPapersT2INNERjoin_paperPapersT1ONPapersPapersT1.PaperID INNER JOIN PaperPapersT2ONPaperPapersT2.PaperID ON PaperPapersT1.PaperID = PaperPapersT2.PaperID INNER JOIN papersPapersT3ONpapersPapersT2.PaperID ON paperPapersT3.PaperID = PapersPapersT2.PaperID INNER JOIN authorsONauthorIDT3ONauthorIDT1ONpaperPapersT2.PaperID ON authorIDT1.T1 = authorID"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": "What are the ids and titles for papers that have never been cited?",
    "answer": "SELECT P.PaperID, T.Title FROM PaperPapersPubsPapersPUBsPapersPubsPapersPubsPapersPubsPapersPubsPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPpapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPpapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPpapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPapersPpapersPapersPapersPapersPapersPapersP"
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
    "answer": "SELECT name FROM table_name_name2WHEREaffiliation_name1likeorealLIKEREPLACELookookUP"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
    "answer": "SELECT the \n    FROM (SELECT T1.id, T2.address, T3.name, T4.name, COUNT(*) AS num_of_papers \n        FROM t1JOINt2ONt1.addressid_equal_to_t2_address \n        GROUP BY t1.id, t2.address) \n    WHERE T4.address = 'China'\nGROUP BY t1.id"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": "Find the number of papers published in different conferences each year.",
    "answer": "SELECT title, COUNT(*) FROM conference_papersGROUPHAVINGyear_groupINEXACTTHECONferenceGROUPINGORDERByconference_name.RETURNING   AS umer"
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": "How many papers are published in each venue in each year?",
    "answer": "SELECT venue_name, COUNT(*) FROM venues_infoGROUPHAVINGYearInGroupINrangeAfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_AfrikaansYearBeginAndEnd_Afrikaans"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": "Find the total number of papers for each affiliation.",
    "answer": "SELECT COUNT(*) FROM papers_papers_affiliation_nogames_nogames_nogames___p2017___WHERE_____GROUP_by_____ORDER_by_____LIMIT______count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count_papers___count"
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": "How many papers has each affiliation published?",
    "answer": "SELECT COUNT(*) FROM AffiliationPapersGROUP_byAffiliation_id.ORDERByCountLIMIT 1"
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": "Find the titles of papers that have more than 50 citations.",
    "answer": "SELECT title"
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": "What are the titles for papers with more than 50 citations?",
    "answer": "SELECT T2.title"
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
    "answer": "SELECT A1 FROM authors_tableJOINPaper_tableONauthors_table.id_pagem_idP2 INNER JOIN Paper_tableONpapers_table.id_Paper_idP3 ON authors_table.id_A1 = papers_table.id_A1"
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": "How many authors have not published a paper with more than 50 citations?",
    "answer": "SELECT COUNT(*) FROM authors_tableGROUPHAVINGCOUNTigkeitPaperIDgeFrom50HAVINGSUMCitationsINWPIDGROUPHAVINGCOUNTigkeitPaperIDgeFrom50ORDERBySUMCitationsDESCLIMIT100.breaker"
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
    "answer": "SELECT a_name FROM authors_table_name2009WHEREyear_in_date_column_name1009like.MatcherCaseLinkedIn, LinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInOrLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInOrLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInorLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInOrLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInorLinkedInORLinkedInORLinkedInOrLinkedInORLinkedInOrLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInorLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInOrLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedInORLinkedIn"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
    "answer": "SELECT name FROM authors_table_name2009WHEREYear_of_pression_inNAACL_2009ANSWEREDYes.SELECT"
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": "Find the name of authors who have never published a paper in ACL.",
    "answer": "SELECT T2.authors"
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": "What are the names of authors who have not published a paper in ACL?",
    "answer": "SELECT Name"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": "How many conferences are there?",
    "answer": "SELECT COUNT(*) FROM conferences.GROUP_byconference"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": "What is the total number of conferences?",
    "answer": "SELECT COUNT(*) FROM conferences.Answer"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": "List all distinct conference names.",
    "answer": "SELECT DISTINCT conferences"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": "What are the different conference names?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": "List all conference name, year, and location.",
    "answer": "SELECT conferences"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": "What are the names, years, and locations of all conferences?",
    "answer": "SELECT Name FROM Conferences.ORDER"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": "Show all conference names and the number of times each conference has.",
    "answer": "SELECT name, COUNT(*) FROM conferencesGROUPHAVINGconference_id.isINSET"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": "For each conference name, how many times has it occurred?",
    "answer": "SELECT COUNT(*) FROM conferences.GROUP_CONCATENATE"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": "show all years and the number of conferences in each year.",
    "answer": "SELECT YEAR, COUNT(*) FROM conference_info._year GROUP BY YEAR"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": "How many conferences occur every year?",
    "answer": "SELECT COUNT(*) FROM conferencesGROUPHAVINGYearISBetweendatebirthday_2010Andbirthday_2025.How"
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": "which year has least number of conferences?",
    "answer": "SELECT Year, CountClassNotFoundException"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": "What year had the fewest conferences?",
    "answer": "SELECT YEARCONference FROM conference_info.INSERT"
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": "Show all locations where at least two conferences are located.",
    "answer": "SELECT conference_id FROM conferences_and_conferences_tableGROUPINGconference_idORDER_by_date_in_millisecondLIMITROW.count;"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": "What are all locations that have hosted at least two conferences?",
    "answer": "SELECT Location FROM ConferenceGROUPINGORDERByConferenceCountASCLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByConferenceCountDESCLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByConferencesCountASCLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByConferencesCountDESCLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conferences_inGroupASCLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conferences_inGroupDESCLIMITLIMIT200SELECTLocationFROMconferenceGROUPINGORDERByNumber_of_conference_inGroupASCLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupDescLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conferences_inGroupASCLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupDescLimitLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_in_groupDESCLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupASCLIMITLIMIT200SELECTLocationFROMconferenceGROUPINGORDERByNumber_of_conference_inGroupDesclimitLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupDesclimLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupascLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupDesclimLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupASCLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupDesclimLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupASCLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupDesclimLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupDesclimLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupDesclimLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupDesclimLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_inGroupDesclimLIMITLIMIT200SELECTLocationFROMConferenceGROUPINGORDERByNumber_of_conference_in_groupDesclimLIMITLIMIT200SELECTLocationFROM"
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": "Show the institution name, location and founded year of all institutions.",
    "answer": "SELECT DISTINCT I.INstitution_NAME FROM Institutes_infoI2017.WHERE INNER JOIN Institutes_infoI1984.ON  AS INstitutes_infoI1984 AS INstitutes_infoI1983 ON inas IN (SELECT inas.Production_ID, INITS.Empulsion, INITS.Who, INITS.Years, I.INSTITUTE_NAME FROM Institutes_infoI2017.AS INNER JOIN INstitutes_infoI1984.AS AS INNERS ON inas IN (SELECT inas.Production_ID, INITS.Empulsion, INITS.Who, INITS.Years, I.INSTITUTE_NAME FROM Institutes_infoI2017.AS INNER JOIN Institutes_infoI1984.AS AS INNERS ON inas IN (SELECT inas.Production_ID, INITS.Empulsion, INITS.Who, INITS.Years, I.INSTITUTE_NAME FROM Institutes_infoI2017.AS INNER JOIN INstitutes_infoI1984.AS AS INNERS ON inas IN (SELECT inas.Production_ID, INITS.Empulsion, INITS.Who, INITS.Years, I.INSTITUTE_NAME FROM Institutes_infoI2017.AS INNER JOIN INstitutes_infoI1984.AS AS INNERS ON inas IN (SELECT inas.Production_ID, INITS.Empulsion, INITS.Who, INITS.Years, I.INSTITUTE_NAME FROM Institutes_infoI2017.AS INNER JOIN INstitutes_infoI1984.AS AS INNERS ON inas IN (SELECT inas.Production_ID, INITS.Empulsion, INITS.Who, INITS.Years, I.INSTITUTE_NAME FROM Institutes_infoI2017.AS INNER JOIN INstitutes_infoI1984.AS AS INNERS ON inas IN (SELECT inas.Production_ID, INITS.Empulsion, INITS.Who, INITS.Years, I.INSTITUTE_NAME FROM Institutes_infoI2017.AS INNER JOIN INstitutes_infoI1984.AS AS INNERS ON "
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": "What are the names, locations, and founding years for all institutions?",
    "answer": "SELECT OUT"
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": "How many institution are founded between 1850 and 1900?",
    "answer": "SELECT COUNT(*) FROM institutionsBetween1850And1900.Answer"
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": "How many institutions were founded between 1850 and 1900?",
    "answer": "SELECT chos"
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": "Show the institution name and location of institution that is most recently founded.",
    "answer": "SELECT Name FROM institution_info_table.INSERT"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": "What are the names and locations of the most recently-founded institution?",
    "answer": "SELECT Name FROM InstitutioninfoWHEREYearOFFoundingDateRNAWAN2023.OUTPUT AS Name"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": "Show the institution name and the number of staff for each institution founded after 1800.",
    "answer": "SELECT institutions_name, COUNT(staff_id) FROM institutions_tableGROUPByyearsAfter_1800ORDERLIMITnum_rows.LIMITnum_rows"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
    "answer": "SELECT Institute_ID, COUNT(*) FROM Staff_Insight_2020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_01_05_23042020_"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": "Show institution name which there is no staff in our record.",
    "answer": "SELECT COUNT(*) FROM school_institution_name.WHEREISlessness INNER JOIN (SELECT * FROM school_institution_name.uses) AS j2 ON j2.islessness = 'INNER'"
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": "What is the name of the institution with no staff in the records?",
    "answer": "SELECT Institution"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": "Show all staff name who are above the average age.",
    "answer": "SELECT staff_name, AVG(age) FROM staffs_dataGROUPBySTAMPTIDOrderByageLIMITNROW1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": "What are the names of all staff members who are older than average?",
    "answer": "SELECT A.Manager"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": "What is the maximum and minimum age of all staff from the United States?",
    "answer": "SELECT Age FROM UnitedstaffsWHERECountryCodeINREGISTEDORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredorSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredorSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredorSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredorSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredORSELECTEDCountryCodeINREGISToredorSELECTEDCountryCodeINREGISToredorSELECTEDCountryCodeINREGISToredorSELECTEDCountryCodeINREGISToredorSELECTEDCountryCodeINREGISToredorSELECTEDCountryCodeINREGISToredorSELECTEDCountryCodeINREG"
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": "What are the maximum and minimum ages for all staff?",
    "answer": "SELECT A"
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": "Show all conference names which the staff from Canada attends.",
    "answer": "SELECT Conference"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": "What are the names of all the conferences that has staff from Canada attending?",
    "answer": "SELECT * FROM conference_name_conference_id.JOIN \n    LIMIT 1234567890"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "answer": "SELECT name, conference"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "answer": "SELECT * FROM conference_info.Staff"
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": "Show all names who have been in both ACL and Naccl.",
    "answer": "SELECT *"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
    "answer": "SELECT *"
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": "Show all staff names who attend a conference in 2003 or 2004.",
    "answer": "SELECT name"
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": "What are the staff names who participated in conferences between 2003 or 2004?",
    "answer": "SELECT staff_name FROM conference_info_2003_2004_conferences_2003_2004_conference_info_2003_2004_2004_conference_info_2003_2004_2004_conference_info_2003_2004_2004_2004_conference_info_2003_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004_2004"
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": "Show the conference name and year and the number of participants for each conference.",
    "answer": "SELECT COUNT(*) AS num_conference"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": "For each conference id, what are their names, year, and number of participants?",
    "answer": "SELECT DISTINCT conference_id FROM conference_info_table_conference_id_list_202107_24597365800577800526_5705_5847_2155_1113_5898_2269_5778_0152_4230_0646_4604_0011_1020_4196_6425_0182_4243_0445_1113_5147_0855_0118_0440_0017_0440_0222_0444_1113_5639_0696_0004_0002_4456_0014_0348_1020_4196_6425_0182_4243_0445_1113_5778_0152_4230_0646_4604_0011_1020_4196_6425_0182_4243_0445_1113_5147_0855_0118_0440_0017_0440_0222_0444_1113_5639_0696_0004_0002_4456_0014_0348_1020_4196_6425_0182_4243_0445_1113_5778_0152_4230_0646_4604_0011_1020_4196_6425_0182_4243_0445_1113"
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": "Find the name of the conferences that have the top 2 most number of attendants.",
    "answer": "SELECT conferences_name"
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": "What are the names of the conferences that have the top 2 most people attending?",
    "answer": "SELECT name FROM conferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUPbynameORDERBycountLIMIT25SELECTnameFROMconferences_conference_name_2021_12_30GROUP"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": "Find the name and nationality of the people who did not participate in any ACL conference.",
    "answer": "SELECT Name, Nationality FROM PeopleWhoDidNotParticipateInAnyACLConference.SELECT"
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
    "answer": "SELECT Name, Nationality FROM PeopleWhoDidNotParticipateInAnyACLConferences.orc"
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
    "answer": "SELECT Name, Location FROM universities_table2004WHEREYearCodeINSETIS5013722004GROUPHAVINGCountIFNotInSETIS5013722004COUNTIS1000IS5013722004GROUPORDERByCountLIMIT10.SELECT"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
    "answer": "SELECT Name, Location"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": "What is the name of the oldest pilot?",
    "answer": "SELECT The"
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": "Return the name of the oldest pilot.",
    "answer": "SELECT MAX(DISTINCT_NAME) FROM pilots.ORDER"
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": "What are the names of pilots whose age is below the average age, ordered by age?",
    "answer": "SELECT pilots_name FROM pilots_tableORDERBYageORDERBYageDESCLIMIT1000.Enter"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
    "answer": "SELECT Name"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": "Find all information of on pilots whose age is less than 30.",
    "answer": "SELECT * FROM pilots.age_30_to_50 WHERE pilots.age_30 < 30"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": "What is all the information about pilots who are younger than 30 ?",
    "answer": "SELECT age FROM pilots_age_30_45_to_79.age WHERE flight_date >= '2010-06-01'"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "answer": "SELECT p.PilotName FROM PilotsPiperCubWHERE_p.PilotName INNER JOIN PlanesPlaningsWHEREPlanIdINNERJOINPaigeCubsWHEREPigeCubsNamePigeCubNamePigeCUBNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsNamePigeCubsName"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "answer": "SELECT first_name FROM pilots_tableJOINiners_tableONiners_table.pieler_id INNER JOIN pilots_table.pieler ON pilots_table.pieler_id =iners_table.pieler_id GROUP BY first_name"
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": "Where is the plane F-14 Fighter located?",
    "answer": "SELECT Country FROM PlaneJoinJoinJoinJoinJoinJoinJoinJoinJoinJoinJoinJoinJoinJoinJoinPleaseWhereASASANSQLServer2008WHEREAuthorizationStatusIsNotInGroupAndCountryWhereASANDAuthorizationStatusIsInGroupAndCountryWhereASANDAuthorizationStatusIsNotInGroupAndCountryWhereASANDAuthorizationStatusIsInGroupAndCountryWhereASANDAuthorizationStatusIsNotInGroupAndCountryWhereASANDAuthorizationStatusIsInGroupAndCountryWhereASANDAuthorizationStatusIsInGroupAndCountryWhereASANDAuthorizationStatusIsInGroupAndCountry.SELECT"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": "Return the location of the hangar in which F-14 Fighter is located.",
    "answer": "SELECT *\nFROM HangarLocationHangarLocationF14Fighter.location"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": "How many different places have some plane?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": "Count the number of different locations of hangars.",
    "answer": "SELECT COUNT(DISTINCTHangarID) FROM Hangars.ING"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": "Which plane does the pilot Jones with age 32 has?",
    "answer": "SELECT SELECT"
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": "What are the names of planes that the pilot Jones who is 32 has?",
    "answer": "SELECT FROM\nINNER JOIN arterS.airWAYS AS ASELLER\n\n  AS FADEIN ON Plane                                                                                                                                                                                                                                                                                                                                                                                                                                                                             "
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40?",
    "answer": "SELECT COUNT(*) FROM pilots_age_40_to_65.age WHERE age > 40"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40.",
    "answer": "SELECT COUNT(*) FROM pilots_age_40_to_65_age_pilots_age_12_30_45_56_67_78_89_90_101_102_103_104_105_106_107_108_109_110_111_112_113_114_115_116_117_118_119_120_121_122_123_124_125_126_127_128_129_130_131_132_133_134_135_136_137_138_139_140_141_142_143_144_145_146_147_148_149_150_151_152_153_154_155_156_157_158_159_160_161_162_163_164_165_166_167_168_169_170_171_172_173_174_175_176_177_178_179_180_181_182_183_184_185_186_187_188_189_190_191_192_193_194_195_196_197_198_199_200_201_202_203_204_205_206_207_208_209_210_211_212_213_214_"
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
    "answer": "SELECT COUNT(*) FROM PlaneB_52BomberPilotWHEREUnder35Age__lt__600000000000000000000190000000187.Answer"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": "Count the number of B-52 Bombers owned by pilots under 35.",
    "answer": "SELECT COUNT(*) FROM B_52_BomberPilotsWHEREHeightLess_than35ORDERLIMIT1.RETURNING"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "answer": "SELECT solvesolvesolvesolvesolvesolvesolvesolvesolve"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": "Return the name of the youngest pilot to fly Piper Cub.",
    "answer": "SELECT Name FROM PilotsPilotJoinERWHEREMakerID_INET4Is64BAND4IS24BITOrderINGRETURNINGORDERINGRETURNINGORDERINGRETURNINGORDERINGRETURNINGORDERINGRETURNINGORDERINGRETURNINGORDERINGRETURNINGRETURNINGORDERINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNingRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNINGRETURNing
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": "What is the name of the most popular plane?",
    "answer": "SELECT name FROM plane_tableGROUP_CONCATENATENAMEORDER_by_nameLIMIT256.What"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the most often?",
    "answer": "SELECT TheName"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": "What is the name of the least popular plane?",
    "answer": "SELECT BY ORDER BY Pct"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the least often?",
    "answer": "SELECT * FROM plane_tableWHEREOriginaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaaviaavia"
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": "How many pilots whose planes are in Chicago?",
    "answer": "SELECT COUNT(*) FROM flights_in_chicagapitalWHEREOrigin_codeavia36677291875024463741724077009514731439429528272849778380414129335987721987103831416917001615753881723649673617877819677777196778196777719677819677771967781967777719677781967777771967777196777771967777719677777719677777719677777777719677777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777"
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": "Count the number of pilots who have planes in Chicago.",
    "answer": "SELECT COUNT(*) FROM pilots_in_chicagoplayersWHERE_location_city_code_in_chICAGOPLISTING_20170405.SELECT \n    \tINNER JOIN aircrafts_of_chicagoflights_with_location_city_id_in_chICAGOPLISTING_20170405.on ON pilots_in_chicagoplayers.location_city_code_in_chICAGOPLISTING_20170405.id = \n    INNERJOIN\n   \tLEFT JOIN aircrafts_of_chicagoflights_with_location_city_id_in_chICAGOPLISTING_20170405.on ON LEFT \n   \t= 65348504.0"
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": "What are the planes owned by pilot Smith with age 41?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
    "answer": "SELECT first_name, last_name FROM planes_pilotWHERE_nameSmithJohn41.ans"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": "How many distinct planes are owned across all pilots?",
    "answer": "SELECT COUNT(DISTINCTPlane) FROM Planes.Planes"
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": "Count the number of different plane names across all pilots.",
    "answer": "SELECT COUNT(DISTINCTPlane_NAME) FROM PilotsPanesagram.igs WHERE pilot_id = (SELECT MAX(pilot_id) FROM PilotsPanesagram.igs WHERE pilot_id < 100);"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": "How many planes are owned by the pilot whose name is Smith?",
    "answer": "SELECT Choice"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": "Count the number of planes Smith owns.",
    "answer": "SELECT COUNT(*) FROM PlaneSmith.INSERT \n       INNER JOIN PlaneSmith.Planes ON PlaneSmith.PlanId = Planes.PlanId \n       INNER JOIN PlaneSmith.PlanesOnBoard ON planesOnBoard.PlanId = PlanesOnBoard.PlanId \n       INNER JOIN PlaneSmith.PlanesOnBoardOnSchedule ON planesOnBoardOnSchedule.PlanId = PlanesOnBoardOnSchedule.PlanId \n       INNER JOIN PlaneSmith.PlanesOnBoardOnScheduleOnBoardOnBoardOnBoardOnBoard ON plansOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnboardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnboardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnBoardOnboardOnBoardOnBoardOnBoardOnBoardOnBoardOn_boardOnBoardOnBoardOnBoardOnBoardOnboardOnboardOnBoardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboardOnboard"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": "How many planes are controlled by the pilots whose age is older than 40?",
    "answer": "SELECT R"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": "Count the number of planes flown by pilots older than 40.",
    "answer": "SELECT COUNT(*) FROM PilotsWHEREAgeBetweenMINAgeAndMAXAgeolderThan40.ORDERByAge"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
    "answer": "SELECT pilot_name, age FROM pilots_age_tableGROUPbyageORDER_byageLIMIT1.SELECTName"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
    "answer": "SELECT pilots FROM pilots_age_30_to_40ORDERbyage_increasing_answer.gett"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": "List all pilot names sorted by their ages in the descending order.",
    "answer": "SELECT pilot_name FROM pilots.sort_by_age ORDER BY age DESC"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": "What are the names of pilots, ordered by age descending?",
    "answer": "SELECT A"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": "Find all locations of planes sorted by the plane name.",
    "answer": "SELECT * FROM PlaneOrderingsORDERByPlaneName.ames"
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": "What are the locations of the different planes, ordered by plane name?",
    "answer": "SELECT * FROM planes.ORDER"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": "List all distinct types of planes owned by all pilots in alphabetic order?",
    "answer": "SELECT DISTINCT T2.name FROM plane_table_t2TS2T3P1PASASL4L6T3P2ASASL4L7P1PASASL4L6P5ASASASL4L7P9PASASL4L7P2ASASASL4L6T1PASASL4PASASL4L7P9PASASL4L6P3PASASL4PASASL4L7P9PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL4PASASL"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": "What are the different plane names, ordered alphabetically?",
    "answer": "SELECT A"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40 or younger than 30?",
    "answer": "SELECT COUNT(*) FROM pilots_age_older_40_30_pilotsGROUPHAVING_age_in_ages_later_than_40_or_later_than_30.HAVINGage_in_ages_later_than_40_or_later_than_30"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40 or less than 30.",
    "answer": "SELECT COUNT(*) FROM pilots_age_40_to_30WHEREagegegtolder_than_40ORageltthan_30.SELECT                                                                                                                                                                                                                                                                                                                                                                                                                                                                              "
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
    "answer": "SELECT name FROM pilots_tableWHEREageolder_than_35ANDflight_type_f14ORDERbyageoldest.LIMIT  ORDER BY ageoldest"
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
    "answer": "SELECT names, age FROM pilots_pilots_pilot_cub_pilots_age_info_tableORDERBYAgeLIMIT25.HAVING"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
    "answer": "SELECT * FROM aircrafts_198406_039917535306921376277433494594846197335825825904016833798027614857792358709040517946148699131622568202466907513273798523493485614290276141941602462141111373789999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
    "answer": "SELECT pilot_id FROM flights_tableJOINiners_tableJOINengers_tableJOINiner_tableJOINiners_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_table.joininer_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_tableJOINiner_table"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
    "answer": "SELECT Answer"
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": "What are the average and smallest ages of all pilots?",
    "answer": "SELECT TECHNOLOGIANS"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": "Return the average and minimum ages across all pilots.",
    "answer": "SELECT AVG(ages), MIN(ages) FROM pilots.agg"
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have planes in both Austin and Boston?",
    "answer": "SELECT BYCity"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": "Give the names of pilots who have planes in Austin and Boston.",
    "answer": "SELECT p"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "answer": "SELECT Pper FROM PilotsPiperCubJoinPIpersF14FightERWHEREPFilerIDISINPAIRGROUP.P0"
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "answer": "SELECT pilots"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": "What is the average age of pilots for different types of planes?",
    "answer": "SELECT Type, AVG(Age) FROM PilotsWHERETypeisinallisPA38CA2852719607433000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": "Return the average age of pilots for each plane name.",
    "answer": "SELECT flight_name, AVG(age) AS avg_age"
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": "Find the number of planes for each type.",
    "answer": "SELECT type, COUNT(*) FROM plane_tableGROUPBy.type"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": "Count the number of entries for each plane name.",
    "answer": "SELECT COUNT(*) FROM plane_table.ensemble"
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
    "answer": "SELECT P.PI FROM PilotsPPLINERSJOINPlanesPLANSONASWHEREPPI__2__2__300000000000000064SELECTPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__1__2__300000000000000068SELECTPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__3__2__300000000000000074SELECTPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__1__2__300000000000000078SELECTPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__3__2__300000000000000084SELECTPPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__1__2__300000000000000078SELECTPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__3__2__300000000000000096SELECTPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__1__2__300000000000000084SELECTPPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__3__2__300000000000000078SELECTPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__1__2__300000000000000078SELECTPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__3__2__300000000000000096SELECTPIFROMPilotPPLINERSJOINPlanesPLANSONASWHEREPPI__1__2__30"
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
    "answer": "SELECT PlaneName, Age FROM PilotsWHERE_ageBornBefore1985ORDERpedByAge.INSERT"
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "question": "What are the names of oldest pilots for each type of plane?",
    "answer": "SELECT A FROM BUDGETicamentePlaneCUTTIMEPlaneDLARGE.piERS"
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
    "answer": "SELECT * FROM plane_table.ORDER"
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "question": "Find the max age for each group of pilots with the same name.",
    "answer": "SELECT * FROM PilotsGROUPINGByNameORDERLIMIT1.Here, wegroupingbyName.shares"
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "question": "What are the different pilot names, and what are the maximum ages of pilots for each?",
    "answer": "SELECT Pilot_Name, MAX(Max_Ages) FROM Pilot_Papers.ctl"
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "question": "For each city, find the number and average age of pilots who have a plane.",
    "answer": "SELECT cities, COUNT(*) AS num_pilots, AVG(age) AS avg_age \nFROM pilots_table.Only_Pilots WHERE aircraft_type = '\u98de\u673a'"
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
    "answer": "SELECT Hangar_location, COUNT(*) FROM pilots_hangarsGROUP_byHangar_locationHAVINGAverageAge.isnull"
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "question": "Find the number of pilots for the plane types with average pilot age below 35.",
    "answer": "SELECT * FROM passengers_table2021GROUPbyPassengerIDORDERByAverageAgeLIMITNulosRETURNING0.iciente"
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
    "answer": "SELECT MAX(CASE) FROM planes_tableGROUPHAVING.airline_name INNER JOIN countries_tableLEFTJOINtedPilot_hours_tableONcountry_id.idINNERJOINPilot_hours_table ON flights_table.flight_number = pilots_hours_table.flight_number GROUP BY country_id;"
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "question": "Find the location of the plane that is owned by the youngest pilot.",
    "answer": "SELECT flight_number FROM planes_tableORDERBYATEDIFFmtimeflights2021oneyears.log, flights2021oneyears.log LIMIT 1"
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "question": "What is the location of the plane that was flown by the pilot with the lowest age?",
    "answer": "SELECT A1"
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "question": "Find the name and age of pilots who have a plane in Austin.",
    "answer": "SELECT PPL.name, PPL.age FROM PilotsPPLs_AustenPILS_PlanesPPLs_2018PASSEAS_PlanesPPLs_2021PASSEAS_PlanesPPLs_2035PASSEAS_2047PASSEAS_2069PASSEAS_2083PASSEAS_2095PASSEAS_2101PPILS_PPLs__2018PASSEAS_2021PPILS_PPLs_2035PASSEAS_2047PASSEAS_2069PPILS_PPLs__2079PPILS_PPLs__2083PPILS_PPLs__2095PPILS_PPLs__2101PPILS__2123PPILS__2134PPILS__2146PPILS__2158PPILS__2170PPILS__2172PPILS__2174PPILS__2176PPILS__2178PPILS__2180PPILS__2190PPILS__2193PPILS__2195PPILS_PPLs__2196PPILS__2198PPILS__2199PPILS__2200PPILS__2210PPILS__2212PPILS__2214PPILS__2216PPILS__2218PPILS__2220PPILS__2222PPILS__2224PPILS__2226PPILS__2228PPILS__2229PPILS__2230PPILS__2232PPILS__2234PPILS__2236PPILS__2238PPILS__2240PPILS__2241PPILS__2242PPILS__2243P"
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who have planes located in Austin?",
    "answer": "SELECT p.name FROM pilots_tableJOINplanes_tableONp.id INNER JOIN planes_onboardtableONplane.id AS plane_id ON planes.onboardtable.id = plane_id"
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "answer": "SELECT pilots"
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "answer": "SELECT p.PropName FROM PilotsPilotsASIST3PdPengersASIST3PdPilotWHEREp.PilotID INNER JOIN (SELECT DISTINCT T2.PropId FROM OrdersOrdersASIST3PdPengersASIST3PdPilotT1JOINOrdersOrdersASIST3PdPengersASIST3PdPilotT2ONTOT1ORDERByPq.T2Date, T1.PqDate) AS T1 ON T1.T2.Date = p.PilotID ORDER BY p.PropName DESC LIMIT 1"
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
    "answer": "SELECT T2.PilotID FROM PilotsT1JOINengersT1ONPilotsT1.PilotIDTPiLICKER WHERE PilotsT1.PilotID = 'A'"
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
    "answer": "SELECT IVE"
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "question": "Find all different planes whose names contain substring 'Bomber'.",
    "answer
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "question": "What are the different plane names that contain the word Bomber?",
    "answer": "SELECT * FROM plane_name_table.WHERE_NAME INNER JOIN BomberPlaneNameTableONName_BomberPlaneNameTable.NameJohn ON BomberPlaneNameTable.NameJohn = plane_name_table.Name"
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
    "answer": "SELECT Pilot_ID, Age FROM PilotsPilotingsParksJoinERJoinERJOINERSWHEREAgegtPersonPilotAgeGROUPINGByAgeORDERASCENDLIMIT1000.Question"
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
    "answer": "SELECT icamente"
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has the largest area.",
    "answer": "SELECT District"
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "question": "Select the area and government website of the district with the smallest population.",
    "answer": "SELECT District, Population FROM DistrictsORDER_byPopulationLIMIT1.OperatingSystem;"
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "question": "Find the names and populations of the districts whose area is greater than the average area.",
    "answer": "SELECT district, population"
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "question": "Give me the biggest and average areas of all districts.",
    "answer": "SELECT District FROM table_name.INSERT"
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "question": "What is the total population of the districts whose areas are in the top 3?",
    "answer": "SELECT District, SUM(Area) FROM DistrictsWHEREAreaINTH3ORDEREDLIMIT1000000000000000000000000.ANS"
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "question": "List the ids, names, and government websites of all districts sorted by population.",
    "answer": "SELECT district_id, name, government_website \nFROM district_info_table_name23467890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234"
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "question": "Find the names of districts whose government links use a 'gov' domain.",
    "answer": "SELECT district FROM district_name_table.dn WHERE district_name_table.dn_gov = 'gov'"
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
    "answer": "SELECT * FROM districts_id_table.Using WHERE condition\n<templatebosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbosbos"
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "question": "Find all spokesman's names and speech titles.",
    "answer": "SELECT name, title FROM spokesman_speeches.ames"
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
    "answer": "SELECT P.Moment, AVG(Ages) FROM PopulatedPacesPandemic
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "question": "What are the names and points of spokesmen who are younger than 40?",
    "answer": "SELECT TO"
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "question": "Who is the oldest spokesman?",
    "answer
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "question": "Which spokesman has lower points than the average?",
    "answerx_1_1_2_1_1_2_1_3_4_1_1_2_1_3_4_1_1_2_1_1_2_1_1_2_1_2_1_1_2_1_1_2_1_2_1_2_1_1_1_2_1_1_2_1_1_2_1_1_2_1_1_1_2_1_1_2_1_1_2_1_2_1_1_2_1_1_1_2_1_1_2_1_2_1_1_1_2_1_1_1_2_1_1_2_1_1_2_1_2_1_1_2_1_1_1_"
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has greatest number of spokesmen.",
    "answer": "SELECT district"
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "question": "Find the names of spokesmen who have served some district before 2004.",
    "answer": "SELECT Name FROM MyAreaSPokesmanTable.JOIN"
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "question": "Find the number of spokesmen for each district, and the show district names as well.",
    "answer": "SELECT district, countomo, COUNT(*) FROM dispzmotionsGROUPbydistrictORDERByCOUNTomoASCLIMIT10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
    "answer": "SELECT district"
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "question": "Find the names of districts which have more than one spokesman.",
    "answer": "SELECT district_id, name FROM districts_info.districts WHERE district_id IN (SELECT MAX(district_id) FROM districts_info.districts GROUP BY district_id)"
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "question": "Find the number of districts which have no spokesmen.",
    "answer": "SELECT FROM"
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "question": "Find the name of spokesmen who do not speak for any district.",
    "answer": "SELECT D"
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "question": "Find the total and average population of the districts which have some spokesman.",
    "answer": "SELECT District, SUM(POP) AS TotalPopulation, AVG(POP) AS AveragePopulation FROM districts_table.WHEREistrict INNER JOIN districts_table.d ON districts_table.d.DistrictID = districts_table.d.DISTINCTdistrict_id;"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": "What is the title of the sculpture that was created in the most recent year ?",
    "answer": "SELECT the.title"
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": "What is the name of the scuplture that was created most recently ?",
    "answer": "SELECT HUMANS"
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": "What is the title and location of the oldest painting ?",
    "answer": "SELECT IVE"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": "What is the name of the oldest painting and where is it located?",
    "answer": "SELECT OUNT"
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": "Find the names of all sculptures located in gallery 226.",
    "answer": "SELECT sculpture"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": "What are the names of all sculptures in gallery 226?",
    "answer": "SELECT THE FROM OFSTATION.ELLEVELEVEY"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": "List the title and location of all paintings.",
    "answer": "SELECT * FROM paintings.ORDER"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": "What are the paintings called and where are they located?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": "List the title and location of all sculptures.",
    "answer": "SELECT sculpture_title, sculpture_location FROM sculptures.ORDER"
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": "What are the sculptures called and where are they located?",
    "answer": "SELECT BY ORDER BY SIZE"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": "What are the medium types of the painting with id = 80",
    "answer": "SELECT and                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           "
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": "What mediums were used for the painting with id 80 ?",
    "answer": "SELECT ably"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": "Find the first and last names of all artists who were born after 1850.",
    "answer": "SELECT first_name, last_name FROM artists_tableorder_by_date_born_earlierThan_1850.ORDER LIMIT 2"
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": "What are the full names of artists born after 1850?",
    "answer": "SELECT those"
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": "Find the names and years of all sculptures that are not located in gallery 226.",
    "answer": "SELECT sculpture, year FROM sculptures_in_galeries_226.INSERT"
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": "What are the names and dates created for all sculptures not located in gallery 226?",
    "answer": "SELECT BY GROUP BY ORDER"
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
    "answer": "SELECT three"
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     "
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": "Find the birth years of all distinct artists who made sculptures after 1920?",
    "answer": "SELECT birth_year FROM sculpture_sculptors_1920_1950_birthsGROUPbyartist_nameORDERBYbirth_yearLIMIT10.conn;"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": "What is the birth year of each distinct artists who created sculptures after 1920?",
    "answer": "SELECT OUT"
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": "What are the first and last names of the artist who lived the longest?",
    "answer": "SELECT A.ELLEB.ERNA"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": "Give the full name of the artist who lived the longest.",
    "answer": "SELECT first_name"
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": "What is the age of the artist who had the shortest life?",
    "answer": "SELECT A.Over   \n\n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n     \n\n\n    \n\n\n     \n\n\n    \n\n\n    "
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": "How old is the artist who lived the shortest life?",
    "answer": "SELECT icamente"
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": "What are the first name and age of the artist who had the longest life?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": "What is the first name and age of the artist who lived the longest?",
    "answer": "SELECT AN INNER JOIN BLOGPOSTING.THEARTIST AS ANARTIST AS ANARTISTAASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANArtistASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANArtistASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTISTASANARTIST"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": "How many paintings are exhibited at gallery 240?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "question": "What is the total number of paintings exhibited in gallery 240?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "question": "How many paintings did the artist with the longest life make ?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "question": "What is the painting count of the artist with the longest life ?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             "
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
    "answer": "SELECT COUNT(*) FROM paintings_paintings_2018_to_2037_julWHEREMary_first_name_name______Mary_second_name_name______SELECTCOUNT________FROMpaintings_paintings_2018_to_2037_julGROUPByMary_first_name_name______Mary_second_name_name______SELECTCOUNT________FROMpaintings_paintings_2018_to_2037_julGROUPByMary_first_name_name______Mary_second_name_name______RETURNINGCount____FROMPaintings_paintings_2018_to_2037_julGROUP_byMary_first_name_name______Mary_second_name_name______RETURNINGCOUNT____FROMPaintings_paintings_2018_to_2037_julSELECTCount________FROMpaintings_paintings_2018_to_2037_julWHEREMary_first_name_name______Mary_second_name_name______SELECTCOUNT________FROMpaintings_paintings_2018_to_2037_julGROUPByMary_first_name_name______Mary_second_name_name______RETURNINGCOUNT____FROMPaintings_paintings_2018_to_2037_julGROUP_byMary_first_name______Mary_second_name_name______RETURNINGCOUNT____FROMPaintings_paintings_2018_to_2037_julSELECTCount________FROMpaintings_paintings_2018_to_2037_julWHEREMary_first_name_name______Mary_second_name_name______RETURNINGCOUNT____FROMPaintings_paintings_2018_to_2037_julGROUPByMary_first_name_name______MarySecond_name_name______RETURNINGCOUNT____FROMPaintings_paintings_2018_to_2037_julSELECTCount________FROMpaintings_paintings_2018_to_2037_julWHEREMary_first_name_name______Mary_second_name_name______RETURNINGCOUNT____FROMPaintings_paintings_2018_to_2037_julGROUPByMary_first_name_name______MarySecond_name_name______RETURNINGCOUNT____SELECTCount________FROMpaintings_paintings_2018_to_2037_julGROUP"
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "question": "What is the name and year of each painting created by the artist whose first name is Mary?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "question": "What are the widths of the paintings that were created by the artist who was born before 1850?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "question": "How wide were the paintings by the artist who was born prior to 1850?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        "
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
    "answer": "SELECT artist_name, first_name FROM paintingsWHEREPaintings_id_1__isnull_to_000000001.artist_name"
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
    "answer": "SELECT A"
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "question": "Find the first and last names of the artists who have both works of paintings and sculptures?",
    "answer": "SELECT Name, First_Name, Last_Name FROM Artists__Works__Paintings__Sculptures__ASAP2018GROUP_CONCAT_Name_________________________ORDER_by__First_Name__ascLIMIT_50.LIMIT_"
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "question": "Give the full names of artists who have created paintings and sculptures.",
    "answer": "SELECT artist FROM artworks.ORDER"
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
    "answer": "SELECT two"
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
    "answer": "SELECT two"
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
    "answer": "SELECT Birth_year FROM paintings_paintings_2006_1903_Birthyear.Answer"
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "question": "In what year was the artist who created a painting in 1884 born?",
    "answer": "SELECT YEAR FROM painting_year_table_nameWHEREartist_id_code_to_id_field_name_name_in_january_1962.INSERT"
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
    "answer": "SELECT artist, First_name"
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "question": "What are first names of the artists with oil paintings in gallery 241?",
    "answer": "SELECT A.ELLEB.ANDRE"
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "question": "What are the numbers of works for different medium type?",
    "answer": "SELECT BY"
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "question": "How many works are there in each medium?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "question": "What are the average height of paintings for different medium types?",
    "answer": "SELECT mediums, AVG(height) FROM paintingsGROUPbymediatorsHAVINGmediatorlikeportunistic60DAY_2849.orc"
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "question": "What is the average height of paintings for different medium types?",
    "answer": "SELECT mediums, AVG(height) FROM paintingsGROUPbymediatorsHAVINGmediatorsLIKE.stereotype_MEDIA;"
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "question": "What are the numbers of paintings created before 1900 in different places?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           "
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "question": "How many paintings were created before 1900 in different locations?",
    "answer": "SELECT COUNT(DISTINCT_location) FROM paintings_class_name2017_2018_2019_2020_2021_2022_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2091_2092_2093_2094_2095_2096_2097_2098_2099_2100_2101_2102_2103_2104_2105_2106_2107_2108_2109_2110_2111_2112_2113_2"
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
    "answer": "SELECT THREE"
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "question": "Give the names of all oil paintings created after 1910.",
    "answer": "SELECT *"
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
    "answer": "SELECT * FROM painter_info_240WHEREoil_type_18907625574548832434356480160494813374693805622727598736004424897282041899341482846715775626492076986627402288224211250112417888822242113680065111987788882224211345155555775626492076986627402288224211368006511198778888222421134515555775626492076986627402288224211368006511198778888222421134515555577562649207698662740228822421136800651119877888822242113451555557756264920769866274022882242113680065111987788882224211345155555775626492076986627402288224211368006511198778888822242"
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
    "answer": "SELECT id"
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
    "answer": "SELECT title"
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         "
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
    "answer": "SELECT * FROM paintings_240WHEREgallery_240.id INNER JOIN (SELECT id, name, COUNT(*) AS count FROM paintings_1987GROUP_byidHAVINGdate_inothestart_of_date_at_location_1987.at_location) AS paintings_1987 ON paintings_1987.id = paintings_240.id"
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
    "answer": "SELECT ID FROM paintings_age_older_240GROUPHAVINGPaintings_in_galeria_240SELECT_idFROMpaintings_age_older_240GROUPHAVINGIDornoANNESTTOPAINTING_240ORDERByAgeascLIMIT100.FA"
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "question": "Find the id of the oldest painting.",
    "answer": "SELECT COUNT(*) FROM paintingsORDERByPaintingDateascLIMIT1.AVINGPaintingId AS olP"
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "question": "What is the id of the oldest painting?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
    "answer": "SELECT artist"
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
    "answer": "SELECT the\nFROM BAY.ELLE"
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings in alphabetical order.",
    "answer": "SELECT painting FROM paintingsGROUP_CONCATINCTPaintING_NAMEORDERByPaintING_NAMELIMITCOUNTASAPartITION.PARTITIONITIONID;"
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "question": "What is the name of every distinct painting in alphabetical order?",
    "answer": "SELECT R"
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings ordered by length.",
    "answer": "SELECT Name"
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings from shortest to longest in height.",
    "answer": "SELECT DISTINCT"
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "question": "What are the names of  paintings and scupltures created between 1900 and 1950?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT Title"
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
    "answer": "SELECT those"
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "question": "What is the id of the artist who has the highest number of painting works before 1900?",
    "answer": "SELECT MAX(PaintingWork) FROM artists_orderings_1985_2019.SELECT"
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "question": "What is the id of the artist with the most paintings before 1900?",
    "answer": "SELECT T2.id FROM Artists.T2 INNER JOIN Painting.Painting ON Artists.T2.id = Painting.T2.id INNER JOIN Paintings.Paintings ON Painting.Painting.id = Painting.Paintings.id GROUP BY artists.id ORDER BY COUNTpaintings ASC LIMIT 1"
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "question": "What is the first name of the artist who has the highest number of sculptures?",
    "answer": "SELECT The"
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "question": "What is the first name of the sculptor with the greatest number of works?",
    "answer": "SELECT Answer"
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
    "answer": "SELECT R"
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "question": "Which locations have paintings created before 1885 or after 1930?",
    "answer": "SELECT DATE"
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "question": "What locations have works painted before 1885 or after 1930?",
    "answer": "SELECT OUTPUT"
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
    "answer": "SELECT painting_id FROM paintingsWHERE.height INNER JOIN (SELECT height FROM paintingsGROUP_by_idHAVINGheightagt500ORheightlt2000ORDERByheightASCENDLIMIT10000000000000010000000010000000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100"
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
    "answer": "SELECT painting_id"
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "question": "Which locations have paintings in the mediums of on panel and on canvas?",
    "answer": "SELECT S"
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
    "answer": "SELECT only  \nINNER JOIN ASELECTainedzionERSELECTColumn1FROMPUNTSASSELECTColumn2FROMPUNTSASWHEREColumn3ISBLANKJOINPUNTSASSELECTColumn4FROMPUNTSASWHEREColumn5ISBLANKSELECTColumn6FROMPUNTSASSELECTColumn7FROMPUNTSASWHEREColumn8ISBLANKSELECTColumn9FROMPUNTSASWHEREColumn10ISBLANKSELECTColumn11FROMPUNTSASWHEREColumn12ISBLANKSELECTSELECTColumn13FROMPUNTSASWHEREColumn14ISBLANKSELECTSELECTColumn15FROMPUNTSASSELECTSELECTColumn16SELECTSELECTColumn17FROMPUNTSASSELECTSELECTColumn18FROMPUNTSASSELECTSELECTColumn19FROMPUNTSASSELECTSELECTColumn20SELECTSELECTColumn21SELECTSELECTColumn22SELECTSELECTColumn23SELECTSELECTColumn24SELECTSELECTColumn25SELECTSELECTColumn26SELECTSELECTColumn27SELECTSELECTColumn28SELECTSELECTColumn29SELECTSELECTColumn30SELECTSELECTColumn31SELECTSELECTColumn32SELECTSELECTColumn33SELECTSELECTColumn34SELECTSELECTColumn35SELECTSELECTColumn36SELECTSELECTColumn37SELECTSELECTColumn38SELECTSELECTColumn39SELECTSELECTColumn40SELECTSELECTColumn41SELECTSELECTColumn42SELECTSELECTColumn43SELECTSELECTColumn44SELECTSELECTColumn45SELECTSELECTColumn46SELECTSELECTColumn47SELECTSELECTColumn48SELECTSELECTColumn49SELECTSELECTColumn50SELECTSELECTColumn51SELECTSELECTColumn52SELECTSELECTColumn53SELECTSELECTColumn54SELECTSELECTColumn55SELECTSELECTColumn56SELECTSELECTColumn57SELECTSELECTColumn58SELECTSELECTColumn59SELECTSELECTColumn60SELECTSELECTColumn61SELECTSELECTColumn62SELECTSELECTColumn63SELECTSELECTColumn64SELECTSELECTColumn65SELECTSELECTColumn66SELECTSELECTColumn67SELECTSELECTColumn68SELECTSELECTColumn69SELECTSELECTColumn70SELECTSELECTColumn71SELECTSELECTColumn72SELECTSELECTColumn73SELECTSELECTColumn74SELECTSELECTColumn75SELECTSELECTColumn76SELECTSELECTColumn77SELECTSELECTColumn78SELECTSELECTColumn79SELECTSELECTColumn80SELECTSELECTColumn81SELECTSELECTColumn82SELECTSELECTColumn83SELECTSELECTColumn"
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "question": "Find the locations that have paintings created before 1885 and after 1930?",
    "answer": "SELECT Location FROM paintingscreated_after_1885_to_1930ugasWHEREyear_in_range_of_dates_Lap1885_to_Lap1930__lt__1886_and_year_in_range_of_dates_Lap1887_to_Lap1930__gt__1934.ORDER LIMIT 1"
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "question": "What are the locations that have works painted before 1885 and after 1930?",
    "answer": "SELECT A"
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     "
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "question": "What is the average height and width of paintings that are oil medium in gallery 241?",
    "answer": "SELECT height, width FROM paintingsWHEREMedium_TYPE_8006789858594123.Answer"
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "question": "What are the maximum height and id of paintings painted before 1900?",
    "answer": "SELECT height, id FROM paintingsbefore_1900GROUPbyheightORDERLIMITLIMITNORDER.WITHIN GROUP BY height"
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "question": "What is the height and id of the tallest painting created before 1900?",
    "answer": "SELECT height, id FROM paintingsWHERECreationYearBefore1900ornoLEQute.floorCOUNTLIMIT 1"
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "question": "What are the maximum height and width of paintings for each year?",
    "answer": "SELECT MAX(year) FROM paintings_year2017.ardi"
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "question": "What are largest height and width dimensions for paintings in each year?",
    "answer": "SELECT YEAR, height, width"
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings grouped by painters and ordered by name?",
    "answer": "SELECT AVG(Amount), AVG(Birth) FROM paintingsGROUPHAVINGPaintersLikestacles.orderedByName"
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "question": "Find the average height and width of paintings grouped by painters and ordered by name",
    "answer": "SELECT AVG(A.height), AVG(A.width) FROM paintingsGROUP_bypaintersORDER_bynameASC.SELECT"
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "question": "Find the first names and number of works of all artists who have at least two paintings?",
    "answer": "SELECT Name, COUNT(*) FROM ArtistsGROUPHAVINGCOUNTISTINCTArtistsID.is_in_group \nORDER BY COUNTISTINCTArtistsID.is_in_group ASC"
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
    "answer": "SELECT artist"
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "question": "Find the death year of all artists who have at most 3 paintings?",
    "answer": "SELECT COUNT(*) FROM artists_tableGROUPHAVINGCOUNTIFSISTINCTuser_id.user_id INNER JOIN users_tableONuser_id.iduser_id AS user_id1 ON users_table.user_id.user_id = user_id1.iduser_id GROUP BY user_id1"
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "question": "When did each artist who created less than 4 paintings die ?",
    "answer": "SELECT the_name FROM artists_tableGROUPHAVINGCOUNTDistinctpaintings_in_group_1GISONLINESTRING______________created_at__________ORDERByCOUNTINCTcountDistinctpaintings_in_group_2GISONLINESTRING______________created_at__________LIMITCOUNT_________SELECTCOUNT___FROM_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_apis_"
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "question": "Find the death year of the artist who made the least number of sculptures?",
    "answer": "SELECT artist"
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "question": "When did the artist who made the fewest sculptures die?",
    "answer": "SELECT artist FROM sculpture_count_dataWHEREDATE_FORMAT_SUB_DATEaste_of_date_of_create_of_artist_sold_at_date_of_create_of_sold_at_date_of_create_of_artist_sold_at_date_of_create_of_sold_at_date_of_create_ofartist_sold_at_date_of_create_of_sold_at_date_of_create_of_artist_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_of_sold_at_date_of_create_ofsold_at_date_of_create_of_sold_at_date_of_create"
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "question": "What are the id and height of the painting with the longest width in gallery 240?",
    "answer": "SELECT id, height"
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "question": "Tell me the height and id number of the widest painting in gallery 240.",
    "answer": "SELECT width, id"
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
    "answer": "SELECT painting_id FROM paintings_240GROUPByPainting_idORDERByPainting_idLIMIT1.ansi"
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "question": "What is the id of every painting created before the oldest painting in gallery 240?",
    "answer": "SELECT p.id"
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
    "answer": "SELECT olutions"
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
    "answer": "SELECT ID"
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
    "answer": "SELECT * FROM artist_table
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "question": "Which artists have the most paintings in oil?",
    "answer": "SELECT JOIN"
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
    "answer": "SELECT p.id FROM orders_by_year_orderings_pJoinorders_by_year_orders_tableJOINimages_on_orders_tableJOINpclass_of_images_on_images_tableJOINorder_by_year_orderings_pjoinorders_by_year_orders_tableJOINartist_of_images_on_images_on_images_tableJOINwords_and_images_and_words_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images_on_images"
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
    "answer": "SELECT date, id, location, title FROM oil_paintingORDERByDate.Only\n\nINNER JOIN artist_id_map1_with_date_map1_id2_with_date_map2_id3_with_id4_id5_with_id6_id7_with_id8_id9with_id10with_id11with_id12with_id13with_id14with_id15with_id16with_id17with_id18with_id19with_id20with_id21with_id22with_id23with_id24with_id25with_id26with_id27with_id28with_id29with_id30with_id31with_id32with_id33with_id34with_id35with_id36with_id37with_id38with_id39with_id40with_id41with_id42with_id43with_id44with_id45with_id46with_id47with_id48with_id49with_id50with_id51with_id52with_id53with_id54with_id55with_id56with_id57with_id58with_id59with_id60with_id61with_id62with_id63with_id64with_id65with_id66with_id67with_id68with_id69with_id70with_id71with_id72with_id73with_id74with_id75with_id76with_id77with_id78with_id79with_id80with_id81with_id82with_id83with_id84with_id85with_id86with_id87with_id88with_id89with_id90with_id91with_id92with_id93with_id94with_id95with_id96with_id97with_id98with_id99with_id100with_id101with_id102with_id103with_id104with_id105with_id106with_id107with_id108with_id109with_id110with_id111with_id112with_id113with_id114with_id"
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
    "answer": "SELECT YEAR, Location, Title FROM paintingsORDEREDByHeight.height;"
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
    "answer": "SELECT Year, Location, Name FROM PaintingsGROUP_byYearORDEREDByHeightLIMIT50.OnlySELECTYear, LocationFROMPaintingsGROUP_byYearORDEREDByHeightLIMIT50.OnlySELECTYear, LocationFROMPaintingsGROUP_byYearORDEREDByHeightLIMIT50.OnlySELECTYear, LocationFROMPaintingsGROUP_byYearORDEREDByHeightLIMIT50.OnlySELECTYear"
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "question": "Find the first and last name of artists who have painting but no sculpture work.",
    "answer": "SELECT T2.name FROM artist_tableASAST1T2ASAST1AST2AST3T1T3T4ASAST1AST2AST4ASASAST4ASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASASAS"
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who did not sculpt but could paint.",
    "answer": "SELECT three"
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
    "answer": "SELECT Location"
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "question": "Where do you have paintings that were created before 1885 that are not on canvas?",
    "answer": "SELECT A"
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "question": "How many races are there?",
    "answer": "SELECT ively"
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "question": "Count the number of races.",
    "answer": "SELECT COUNT(*) FROM races.ardi"
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
    "answer": "SELECT race_name, driver_name FROM racesORDERASCLIMIT1.NET"
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
    "answer": "SELECT ively"
  },
  {
    "id": 1318,
    "db_id": "car_road_race",
    "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
    "answer": "SELECT SET WHERE JOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINJOINinnedJOINorcostoJOINnjONJOINJOIN\n                   \t\t<>JoinJOIN\n                   \t\t\tGROUP BY JOINJOINJOINorcostoJOIN\n                   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"
  },
  {
    "id": 1319,
    "db_id": "car_road_race",
    "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
    "answer": "SELECT D.Driver FROM RacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDashesRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHesRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHesRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDasherDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesDASHERDSDASHESRacesD"
  },
  {
    "id": 1320,
    "db_id": "car_road_race",
    "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
    "answer": "SELECT SALECETSALECETSALECETTETTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTSTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTttTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTttTTTTTTTttTTtt"
  },
  {
    "id": 1321,
    "db_id": "car_road_race",
    "question": "Return the different constructors of drivers, ordered by age ascending.",
    "answer": "SELECT Driver_name FROM DriversORDERBYAgeASCLIMIT20.antwort"
  },
  {
    "id": 1322,
    "db_id": "car_road_race",
    "question": "What are the distinct entrant types of drivers aged 20 or older?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           "
  },
  {
    "id": 1323,
    "db_id": "car_road_race",
    "question": "Give the different entrant types for drivers at least 20 years old.",
    "answer": "SELECT DISTINCT dr_name, dr_age"
  },
  {
    "id": 1324,
    "db_id": "car_road_race",
    "question": "What are the maximum and minimum age of driver?",
    "answer": "SELECT BY"
  },
  {
    "id": 1325,
    "db_id": "car_road_race",
    "question": "Return the maximum and minimum age across drivers.",
    "answer": "SELECT driver, MAX(age) AS max_age, MIN(age) AS min_age FROM DriversGROUP_by.Driver ORDER BY max_age DESC LIMIT 1"
  },
  {
    "id": 1326,
    "db_id": "car_road_race",
    "question": "How many different engines are used by drivers with age older than 30 or younger than 20?",
    "answer": "SELECT COUNT(DISTINCT_engine) FROM drivers_age_30_20_age_range_engine.WHEREahrgeIN INNER JOIN age_30_20_age_range_engine_engine.r ON age_30_20_age_range_engine_engine.r.y = driver_id GROUP BY driver_id ORDER BY count DESC LIMIT 1"
  },
  {
    "id": 1327,
    "db_id": "car_road_race",
    "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
    "answer": "SELECT Engine \nFROM Driver_Users_30_to_20__engine_count_counts_engine_distribution_30_to_20_30_30_20_20_20_30_20_20_10_89_67_25_65_20_59_20_74_37_24_13_11_53_21_11_12_10_56_14_16_24_70_18_23_31_28_29_35_24_84_37_28_24_80_18_22_31_21_24_23_33_28_29_36_23_24_70_18_21_31_25_23_29_38_24_84_37_28_24_80_18_23_31_28_29_36_23_24_70_18_23_31_25_23_29_38_24_84_37_28_24_80_18_22_31_28_29_36_23_24_70_18_23_31_25_23_29_38_24_84_37_28_24_80_18_22_31_28_29_36_23_24_70_18_23_31_25_23_29_38_24_84_37_28_24_80_18_22_31_28_29_36_23_24_70_18_23_31_25_23_29_38_24_84_3"
  },
  {
    "id": 1328,
    "db_id": "car_road_race",
    "question": "List all names of drivers in descending alphabetical order.",
    "answer": "SELECT * FROM table_name_name_rdd2018_1234_5678_9012345678_9012345678_9012345678_9012345678_9012345678_9012345678_9012345678_9012345678_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_5"
  },
  {
    "id": 1329,
    "db_id": "car_road_race",
    "question": "What are the names of drivers, ordered descending alphabetically?",
    "answer": "SELECT F"
  },
  {
    "id": 1330,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the names of races they participate in.",
    "answer": "SELECT * FROM Driver_Race_Highlights.ash"
  },
  {
    "id": 1331,
    "db_id": "car_road_race",
    "question": "What are the names of drivers and the names of the races they took part in?",
    "answer": "SELECT BY RIGHT JOIN ANTONISASULASSOFRASISOSALASSOVILASOSOLASOSOLASOSOLASOSOLASOSOLASOSOLASOSOLASOSOLASOSOLASOSOLASOSOLASOSOLASOSOLASOOLASOSOLASOSOLASOSOLASOLASOSOLASOLASOSOLASOSOLASOLASOSOLASOLASOSOLASOSOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLASOLAS"
  },
  {
    "id": 1332,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the number of races they participate in.",
    "answer": "SELECT * FROM DriverWHERErace_id_in_car_number_columnISBLANK.INSERT"
  },
  {
    "id": 1333,
    "db_id": "car_road_race",
    "question": "How many races did each driver participate in?",
    "answer": "SELECT BY"
  },
  {
    "id": 1334,
    "db_id": "car_road_race",
    "question": "Please show the age of the driver who participated in the most number of races.",
    "answer": "SELECT MAX(age) FROM drivers_races.ardi"
  },
  {
    "id": 1335,
    "db_id": "car_road_race",
    "question": "What is the age of the driver who raced in the most races?",
    "answer": "SELECT AVG(RaceYear) FROM DriverRacesSELECTDriverNameFROMDriverRacesJOINDriverAgeOnDriverRacesDateRearORDERByRaceYearLIMIT1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1336,
    "db_id": "car_road_race",
    "question": "Please show the names and ages of the drivers who participated in at least two races.",
    "answer": "SELECT * FROM driver_data_table_races_2021_race_name_1234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890234567890"
  },
  {
    "id": 1337,
    "db_id": "car_road_race",
    "question": "What are the names and ages of drivers who raced in two or more races?",
    "answer": "SELECT BY RIGHT JOIN igliaKESESEDESEDESESEDESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESE"
  },
  {
    "id": 1338,
    "db_id": "car_road_race",
    "question": "Please list the names of races with drivers aged 26 or older participating.",
    "answer": "SELECT name"
  },
  {
    "id": 1339,
    "db_id": "car_road_race",
    "question": "What are the names of races in which drivers 26 or older took part?",
    "answer": "SELECT ively"
  },
  {
    "id": 1340,
    "db_id": "car_road_race",
    "question": "List the names of drivers whose constructor is not \"Bugatti\".",
    "answer": "SELECT Name"
  },
  {
    "id": 1341,
    "db_id": "car_road_race",
    "question": "What are the names od drivers who did not have the constructor Bugatti?",
    "answer": "SELECT A"
  },
  {
    "id": 1342,
    "db_id": "car_road_race",
    "question": "List different constructors and the number of drivers that use each constructor.",
    "answer": "SELECT COUNT(DISTINCTConstructor) FROM cars_cars_info_tablejoindrivers_on_cars_id_to_drivers_id_ON_cars_id_to_drivers_id_ON_cars_id_ON_cars_id_102426733026001935127958479047142921588240722407683548231042268769439264466187885338411835464607885945338459453384595338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338459453384594533845945338"
  },
  {
    "id": 1343,
    "db_id": "car_road_race",
    "question": "How many drivers use each constructor?",
    "answer": "SELECT COUNT(DISTINCTDriverID) FROM DriverConfigurations.Which GROUP BY driver_id"
  },
  {
    "id": 1344,
    "db_id": "car_road_race",
    "question": "List the most common type of engine used by drivers.",
    "answer": "SELECT EngineType FROM DriverDetails.INSERT"
  },
  {
    "id": 1345,
    "db_id": "car_road_race",
    "question": "What is the most common type of engine?",
    "answer": "SELECT F"
  },
  {
    "id": 1346,
    "db_id": "car_road_race",
    "question": "List the types of engines that are used by at least two drivers.",
    "answer": "SELECT Engine_name FROM Drivers_2018_04_01_535_3932_Driver_2018_04_01_535_4176_Engine_2018_04_01_535_4251_2018_04_01_535_4439_2018_04_01_535_4656_2018_04_01_535_4760_2018_04_01_535_4870_2018_04_01_535_5010_2018_04_01_535_5236_2018_04_01_535_5361_2018_04_01_535_5490_2018_04_01_535_5510_2018_04_01_535_5611_2018_04_01_535_5736_2018_04_01_535_5840_2018_04_01_535_5960_2018_04_01_535_6011_2018_04_01_535_6136_2018_04_01_535_6271_2018_04_01_535_6393_2018_04_01_535_6416_2018_04_01_535_6539_2018_04_01_535_6650_2018_04_01_535_6771_2018_04_"
  },
  {
    "id": 1347,
    "db_id": "car_road_race",
    "question": "What are the engine types that are used by two or more drivers?",
    "answer": "SELECT two"
  },
  {
    "id": 1348,
    "db_id": "car_road_race",
    "question": "List the names of drivers that do not participate in any race.",
    "answer": "SELECT Driver_Name FROM DriversJoinERSWHERERaceCodeIsNotInANOTREERRaceCodeSet2013_2021_2022_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2091_2092_2093_2094_2095_2096_2097_2098_2099_2100_2101_2102_2103_2104_2105_2106_2107_2108_2109_2110_2111_2112_2113_2114_2115"
  },
  {
    "id": 1349,
    "db_id": "car_road_race",
    "question": "What are names of drivers who did not take part in a race?",
    "answer": "SELECT BY"
  },
  {
    "id": 1350,
    "db_id": "car_road_race",
    "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
    "answer": "SELECT * FROM driver_construction_info.thead WHERE vehicle_code = 'M652'"
  },
  {
    "id": 1351,
    "db_id": "car_road_race",
    "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
    "answer": "SELECT ional"
  },
  {
    "id": 1352,
    "db_id": "car_road_race",
    "question": "Find the teams that won more than once.",
    "answer": "SELECT teams FROM sports_wins_tableGROUPHAVING_count_of_wins_in_groupNOTINSELECTCountOfWinsInGroupSELECTCountOfWinsInGroupFROMsports_wins_tableGROUPHAVINGCOUNT_OF_wins_in_groupNOTINSELECTCountOfWinsInGroupORDER_bywin_countLIMIT1SELECTcount_of_wins_in_groupFROMsports_wins_tableGROUPHAVINGwin_count_in_groupISMINORSELECTCountOfWinsInGroupSELECTCountOfWinsInGroupFROMsports_wins_tableGROUPHAVINGwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMAXRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCOUNTIFwin_count_in_groupISMINORRETURNINGCountIFwin_count_in_groupISMINORRETURNingCOUNTIFwin_count_in_group"
  },
  {
    "id": 1353,
    "db_id": "car_road_race",
    "question": "Which teams won more than 1 race?",
    "answer": "SELECT COUNT"
  },
  {
    "id": 1354,
    "db_id": "car_road_race",
    "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
    "answer": "SELECT Name"
  },
  {
    "id": 1355,
    "db_id": "car_road_race",
    "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
    "answer": "SELECT Name FROM drivers_orderings_hincliffe_cskerlong_2021WHEREDriverID.inSTRriday INNER JOIN drivers_orderings_hincliffe_cskerlong_2021ONdriversID.inSTRridayLIKELOOKUPREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATEREPLACESTRISPLATERE"
  },
  {
    "id": 1356,
    "db_id": "car_road_race",
    "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
    "answer": "SELECT name"
  },
  {
    "id": 1357,
    "db_id": "car_road_race",
    "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
    "answer": "SELECT RATED"
  },
  {
    "id": 1358,
    "db_id": "country_language",
    "question": "How many languages are there?",
    "answer": "SELECT ively"
  },
  {
    "id": 1359,
    "db_id": "country_language",
    "question": "Count the number of languages.",
    "answer": "SELECT COUNT(*) FROM languages.GROUP"
  },
  {
    "id": 1360,
    "db_id": "country_language",
    "question": "List the name of languages in ascending alphabetical order.",
    "answer": "SELECT Language_name FROM Language_tableORDERByLanguage_nameasc.language_name"
  },
  {
    "id": 1361,
    "db_id": "country_language",
    "question": "What are the names of languages, in alphabetical order?",
    "answer": "SELECT BY"
  },
  {
    "id": 1362,
    "db_id": "country_language",
    "question": "What are the names of languages that contain the word \"ish\"?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1363,
    "db_id": "country_language",
    "question": "Return the names of langauges that contain the substring \"ish\".",
    "answer": "SELECT a FROM (SELECT * FROM your_table_nameurascurated__langauges_2017__langauges_2018__langauges_2019__langauges_2020__langauges_2021__langauges_2022__langauges_2023__langauges_2024__langauges_2025__langauges_2026__langauges_2027__langauges_2028__langauges_2029__langauges_2030__langauges_2031__langauges_2032__langauges_2033__langauges_2034__langauges_2035__langauges_2036__langauges_2037__langauges_2038__langauges_2039__langauges_2040__langauges_2041__langauges_2042__langauges_2043__langauges_2044__langauges_2045__langauges_2046__langauges_2047__langauges_2048__langauges_2049__langauges_2050__langauges_2051__langauges_2052__langauges_2053__langauges_2054__langauges_2055__langauges_2056__langauges_2057__langauges_2058__langauges_2059__langauges_2060__langauges_2061__langauges_2062__langauges_2063__langauges_2064__langauges_2065__langauges_2066__langauges_2067__langauges_2068__langauges_2069__langauges_"
  },
  {
    "id": 1364,
    "db_id": "country_language",
    "question": "Show the names of countries in descending order of overall scores.",
    "answer": "SELECT country, total_score \nFROM countries_table.sort_by_scoredesc \nGROUP BY country \nORDER BY total_score DESC;"
  },
  {
    "id": 1365,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by overall score?",
    "answer": "SELECT A"
  },
  {
    "id": 1366,
    "db_id": "country_language",
    "question": "What is the average justice scores among countries?",
    "answer": "SELECT COUNT(*) FROM countries_classificationsGROUPED_by_judge_scoreorderORDERBy_average_scores_in_ranks_1HLIMIT_NR5000.Answer"
  },
  {
    "id": 1367,
    "db_id": "country_language",
    "question": "Give the average justice scores across all countries.",
    "answer": "SELECT country FROM law_index_tableGROUP_CONCATHAVING_score_AVERAGE_2000.GivenName, Score_AVERAGE_2000.TwoLetterCode ORDER BY score_AVERAGE_2000"
  },
  {
    "id": 1368,
    "db_id": "country_language",
    "question": "What are the maximum and minimum health scores among countries that are not \"Norway\".",
    "answer": "SELECT Country, MaxHealthScore, MinHealthScore"
  },
  {
    "id": 1369,
    "db_id": "country_language",
    "question": "Return the maximum and minimum health scores across all countries other than Norway.",
    "answer": "SELECT max_score, min_score FROM countries_tableGROUP_CONCATHAVINGCountry_codeINindreCTgienICANDSMARTGROUPHAVINGCountry_nameISNOTNorwayORDERBYmax_scoreLIMIT1000.RETURNSC"
  },
  {
    "id": 1370,
    "db_id": "country_language",
    "question": "How many different official languages are there?",
    "answer": "SELECT BY"
  },
  {
    "id": 1371,
    "db_id": "country_language",
    "question": "Count the number of different official languages.",
    "answer": "SELECT COUNT(DISTINCTlanguage) FROM official_language_table.anneer INNER JOIN declarative_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_yourdatabase_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_yourdatabase_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_yourdatabase_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with_pandas_to_your_database_with"
  },
  {
    "id": 1372,
    "db_id": "country_language",
    "question": "List names of countries in descending order of education_score.",
    "answer": "SELECT country, name"
  },
  {
    "id": 1373,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by education score?",
    "answer": "SELECT A"
  },
  {
    "id": 1374,
    "db_id": "country_language",
    "question": "List the name of the country with the biggest score in politics.",
    "answer": "SELECT name FROM countries_tableGROUP_by_country_nameORDER_by_score_in_orderLIMIT_NUMBERLIMIT_sizeLIMIT_COUNT.Which GROUP BY function"
  },
  {
    "id": 1375,
    "db_id": "country_language",
    "question": "What is the name of the country with the highest politics score?",
    "answer": "SELECT icamente"
  },
  {
    "id": 1376,
    "db_id": "country_language",
    "question": "Show the names of countries and their official languages.",
    "answer": "SELECT name, language FROM countries_table.INSERT \n      LIMIT 10;"
  },
  {
    "id": 1377,
    "db_id": "country_language",
    "question": "What are the names of the countries, as well as the names of their official langauges?",
    "answer": "SELECT Name, OfficialLanguage FROM NationsTable.n"
  },
  {
    "id": 1378,
    "db_id": "country_language",
    "question": "Show the official languages and the number of countries speaking each language.",
    "answer": "SELECT country_name FROM languages_tableGROUPHAVINGlanguage_idINSET.Only"
  },
  {
    "id": 1379,
    "db_id": "country_language",
    "question": "What are the names of the different official languages, as well as the number of countries that speak each?",
    "answer": "SELECT iva"
  },
  {
    "id": 1380,
    "db_id": "country_language",
    "question": "Show the official language spoken by the most number of countries.",
    "answer": "SELECT country FROM languages_tableGROUPHAVINGCOUNTTFiltCountry_name.substringLIMIT 100;"
  },
  {
    "id": 1381,
    "db_id": "country_language",
    "question": "What is the official language that is most common?",
    "answer": "SELECT ively"
  },
  {
    "id": 1382,
    "db_id": "country_language",
    "question": "Show the official languages spoken by at least two countries.",
    "answer": "SELECT * FROM LanguageTableLWhereCountryCodeInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInchesInches"
  },
  {
    "id": 1383,
    "db_id": "country_language",
    "question": "Which official languages are spoken in two or more countries?",
    "answer": "SELECT TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTtTTTTttTTTTTT"
  },
  {
    "id": 1384,
    "db_id": "country_language",
    "question": "Show the average overall scores of countries whose official language is \"English\".",
    "answer": "SELECT * FROM country_tableGROUPHAVINGlanguage_code_1likeeks555839755523056643567777227170346246251470273325729344298428859517495244785771301222114613750225495015108277617515105827777444445566777151142321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182321182"
  },
  {
    "id": 1385,
    "db_id": "country_language",
    "question": "What is the average overall score across countries with English as their official language?",
    "answer": "SELECT country, AVG(score) FROM countries_scoresGROUPEDBycountryHAVINGscoreINedereST1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1386,
    "db_id": "country_language",
    "question": "Show the three official languages that are most commonly spoken.",
    "answer": "SELECT BY"
  },
  {
    "id": 1387,
    "db_id": "country_language",
    "question": "What are the names of the three official languages spoken in the most countries?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1388,
    "db_id": "country_language",
    "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them.",
    "answer": "SELECT country, AVG(total_score) AS avg_score FROM language_data_tableGROUPED_by.country ORDER BY avg_score DESC"
  },
  {
    "id": 1389,
    "db_id": "country_language",
    "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
    "answer": "SELECT Language_name FROM Language_dataGROUPEDByCountryORDERBYAverage_Overall_scores_AVG_COUNTIC.INSERT \n      ORDER BY Language_name ASC"
  },
  {
    "id": 1390,
    "db_id": "country_language",
    "question": "Show the name of the country that has the greatest number of official languages.",
    "answer": "SELECT country"
  },
  {
    "id": 1391,
    "db_id": "country_language",
    "question": "Which country has the greatest number of official languages?",
    "answer": "SELECT TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
  },
  {
    "id": 1392,
    "db_id": "country_language",
    "question": "List the names of languages that are not the official language of any countries.",
    "answer": "SELECT * FROM languages_table.WHERE \n    LIMIT 100 OFFSET 1"
  },
  {
    "id": 1393,
    "db_id": "country_language",
    "question": "What are the names of languages that are not the official language of any country?",
    "answer": "SELECT BY"
  },
  {
    "id": 1394,
    "db_id": "country_language",
    "question": "List the names of countries that do not have any official language.",
    "answer": "SELECT * FROM country_info_table.INSERT \n    INNER JOIN country_info_table_on_country_name_id_name1_to_country_name_id2_id2_id3_id4_id5_id6_id7_id8_id9_id10_id11_id12_id13_id14_id15_id16_id17_id18_id19_id20_id21_id22_id23_id24_id25_id26_id27_id28_id29_id30_id31_id32_id33_id34_id35_id36_id37_id38_id39_id40_id41_id42_id43_id44_id45_id46_id47_id48_id49_id50_id51_id52_id53_id54_id55_id56_id57_id58_id59_id60_id61_id62_id63_id64_id65_id66_id67_id68_id69_id70_id71_id72_id73_id74_id75_id76_id77_id78_id79_id80_id81_id82_id83_id84_id85_id86_id87_id88_id89_id90_id91_id92_id93_id94_id95_id96_id97_id98_id99_id100_id11_id12_id13_id14_id15_id16_id17_id18_id19_id20_id21_id22_id23_id24_id25_id26_id27_id28_id29_id30_id31_id32_id33_id34_id35_id36_id37_id38_id39_id40_id41_id42_id43_id44_id45_id46_id47_id48_id49_id50_id51_id52_id53_id54_id55_id56_id57_id58_id59_id60_id61_id62_id63_id64_id65_id66_id67_id68_id69_id70_id"
  },
  {
    "id": 1395,
    "db_id": "country_language",
    "question": "What are the names of countries that do not have an official language?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1396,
    "db_id": "country_language",
    "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.",
    "answer": "SELECT name"
  },
  {
    "id": 1397,
    "db_id": "country_language",
    "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1398,
    "db_id": "real_estate_rentals",
    "question": "Which countries and cities are included in addresses?",
    "answeractionACTIONACTIONACTIONACTIONACTIONACTIONACTIONACTIONACTIONACTIONACTIONACTIONACTION"
  },
  {
    "id": 1399,
    "db_id": "real_estate_rentals",
    "question": "What are the countries and cities for each address?",
    "answer": "SELECT A"
  },
  {
    "id": 1400,
    "db_id": "real_estate_rentals",
    "question": "In which states are each of the the properties located?",
    "answer": "SELECT THEproperties"
  },
  {
    "id": 1401,
    "db_id": "real_estate_rentals",
    "question": "Give the states or provinces corresponding to each property.",
    "answer": "SELECT name"
  },
  {
    "id": 1402,
    "db_id": "real_estate_rentals",
    "question": "How is the feature rooftop described?",
    "answer": "SELECT feature FROM my_table_nameWHEREfeature_namelikeertas_2015_3_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_"
  },
  {
    "id": 1403,
    "db_id": "real_estate_rentals",
    "question": "Return the description of the feature 'rooftop'.",
    "answer": "SELECT * FROM FeatureTable.ROoftOP"
  },
  {
    "id": 1404,
    "db_id": "real_estate_rentals",
    "question": "What are the feature name and description of the most commonly seen feature across properties?",
    "answer": "SELECT Feature_Name, Description FROM Properties.WHEREProperty_ID INNER JOIN Properties_UsersHEREROnProperty_ID__INNERJoinProperties__UsersHEREROnUser_ID__ONProperty_ID__INNERJoinUsersHERER__ONProperty_ID__INNERJoinUsersHERer__ONUser_ID__ONProperty_ID__INNERJoinProperty__UsersHEREROnUser_ID__ONProperty_ID__INNERJoinUsersHERer__ONUser_ID__ONProperty_ID__INNERJoinProperty__UsersHEREROnUser_ID__ONProperty_ID__INNERJoinProperty__UsersHEREROnUser_ID__ONProperty_ID__INNERJoinUsersHERer__ONProperty_ID__ONProperty_ID__INNERJoinProperties__UsersHEREROnUser_ID__ONProperty_ID__INNERJoinUsersHERerOnUser_ID__ONProperty_ID__INNERJoinUsersHERer__ONProperty_ID__ONProperty_ID__INNERJoinProperty__UsersHERerOnUser_ID__ONProperty_ID__INNERJoinUsersHERerOnUser_ID__ONProperty_ID__INNERJoinUsersHERer__ONProperty_ID__ONProperty_ID__INNERJoinProperties__UsersHEREROnUser_ID__ONProperty_ID__INNERJoinUsersHERerOnUser_ID__ONProperty_ID__INNERJoinUsersHERer__ONProperty_ID__ONProperty_ID__INNERJoinProperty__UsersHERerOnUser_ID__ONProperty_ID__INNERJoinUsersHERerOnUser_id__ONProperty_ID__INNERJoinUsersHERer__OnProperty_ID__ONProperty_ID__INNERJoinProperties__UsersHERerOnUser_ID__ONProperty_ID__INNERJoinUsersHERerOnUser_id__ONProperty_ID__INNERJoinUsersHERer__ONProperty_ID__ONProperty_ID__INNERJoinProperty__UsersHERerOnUser_id__ONProperty_ID__INNERJoinUsersHERerOnUser_id__ONProperty_ID__INNERJoinUsersHERer__OnProperty_ID__ONProperty_ID__INNERJoinUsersHERer__OnProperty_ID__ONProperty_ID__INNERJoinProperties__UsersHERerOnUser_id__ONProperty_ID__INNERJoinUsersHERerOnUser_id__ONProperty_ID__INNERJoinUsersHERerOnUser_id__ONProperty_ID__INNERJoinUsersHERer__OnProperty_ID__ONProperty_ID__INNERJoinProperty__UsersHERerOnUser_id__ONProperty_ID__INNERJoinUsersHERerOnUser_id__ONProperty_ID__INNERJoinUsersHERerOnUser_id__ONProperty_ID"
  },
  {
    "id": 1405,
    "db_id": "real_estate_rentals",
    "question": "Give the feature name and description for the most common feature across all properties.",
    "answer": "SELECT F.featureName FROM Feature_Facts_FactTreeFactsFacts_FactTreeFactsFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_Facts_FactTreeFacts_FactTreeFacts_FactTreeFacts_Facts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_FactTreeFacts_F"
  },
  {
    "id": 1406,
    "db_id": "real_estate_rentals",
    "question": "What is the minimum number of rooms in a property?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1407,
    "db_id": "real_estate_rentals",
    "question": "What is the lowest room count across all the properties?",
    "answer": "SELECT orts"
  },
  {
    "id": 1408,
    "db_id": "real_estate_rentals",
    "question": "How many properties have 1 parking lot or 1 garage?",
    "answer": "SELECT IN"
  },
  {
    "id": 1409,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties that have 1 parking lot or 1 garage.",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1410,
    "db_id": "real_estate_rentals",
    "question": "For users whose description contain the string 'Mother', which age categories are they in?",
    "answer": "SELECT Category"
  },
  {
    "id": 1411,
    "db_id": "real_estate_rentals",
    "question": "What are the age categories for users whose description contains the string Mother?",
    "answer": "SELECT Age \nFROM UsersWHERE_descriptionLIKEmother_and_children_30005758.asia"
  },
  {
    "id": 1412,
    "db_id": "real_estate_rentals",
    "question": "What is the first name of the user who owns the greatest number of properties?",
    "answer": "SELECT name"
  },
  {
    "id": 1413,
    "db_id": "real_estate_rentals",
    "question": "Return the first name of the user who owns the most properties.",
    "answer": "SELECT name FROM users.user WHERE property_count = (SELECT COUNT(*) FROM properties.property) LIMIT 1"
  },
  {
    "id": 1414,
    "db_id": "real_estate_rentals",
    "question": "List the average room count of the properties with gardens.",
    "answer": "SELECT COUNT(*) FROM properties_with_gardeningsGROUPEDByPropertyNameORDERByAverageRoomCountASCLIMITN.ancest"
  },
  {
    "id": 1415,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms do properties with garden features have?",
    "answer": "SELECT COUNT(*) FROM PropertiesGROUPEDByRoomTypeAndGardenMode.SELECT  GROUP BY ROOM_TYPE"
  },
  {
    "id": 1416,
    "db_id": "real_estate_rentals",
    "question": "In which cities are there any properties equipped with a swimming pool?",
    "answer": "SELECT city FROM Propertiescity_name_2016GROUP_bypropertiescity_name_2016HAVINGcountle_18000000000000000400000000400000000400000000040000000000000000000400000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1417,
    "db_id": "real_estate_rentals",
    "question": "Return the cities in which there exist properties that have swimming pools.",
    "answer": "SELECT name, COUNT(*) FROM cities_cities_infoGROUPBynameORDERBycountLIMIT10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1418,
    "db_id": "real_estate_rentals",
    "question": "Which property had the lowest price requested by the vendor? List the id and the price.",
    "answer": "SELECT SCSELECTE"
  },
  {
    "id": 1419,
    "db_id": "real_estate_rentals",
    "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
    "answer": "SELECT * FROM PropertyRequestsWHERErequestPriceLowestFromVendor.aid"
  },
  {
    "id": 1420,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms does a property have?",
    "answer": "SELECT COUNT(*) FROM properties.GROUPINGByproperty_name"
  },
  {
    "id": 1421,
    "db_id": "real_estate_rentals",
    "question": "What is the average number of rooms in a property?",
    "answer": "SELECT AVG(totalrooms) FROM properties.Answer"
  },
  {
    "id": 1422,
    "db_id": "real_estate_rentals",
    "question": "How many kinds of room sizes are listed?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1423,
    "db_id": "real_estate_rentals",
    "question": "Return the number of different room sizes.",
    "answer": "SELECT COUNT(*) FROM rooms.ORDER"
  },
  {
    "id": 1424,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have searched at least twice, and what did they search?",
    "answer": "SELECT id FROM user_searchesWHEREuser_id_investigation_id_11234567890123456789012345678901234567890234567890345678904345678905456789064444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"
  },
  {
    "id": 1425,
    "db_id": "real_estate_rentals",
    "question": "Return the ids of users who have performed two or more searches, as well as their search sequence.",
    "answer": "SELECT user_id FROM users_tableJOINusers_searchesusers_searches_user_id.user_id INNER JOIN search_sequencesusers_sequencesuser_id.user_id ON search_sequences.user_id.user_id = users_searches.search_id INNER JOIN search_users_searchessearch_users_searches_user_id.on\n                         AS user_id2\n                        AS search_sequence2 ON WHERE\n                         = AND\n                         INNER JOIN arellib_searchesarellib_searches_searches_user_id.user_id  AS user2 ON user2.user_id = user_id2"
  },
  {
    "id": 1426,
    "db_id": "real_estate_rentals",
    "question": "When was the time of the latest search by a user?",
    "answer": "SELECT T1.Latitude FROM Users.T1 INNER JOIN Users.T2 ON Users.T2.Id = Users.T1.Id ORDER BY L"
  },
  {
    "id": 1427,
    "db_id": "real_estate_rentals",
    "question": "What was the time of the most recent search?",
    "answer": "SELECT theTELEVISION"
  },
  {
    "id": 1428,
    "db_id": "real_estate_rentals",
    "question": "What are all the user searches time and content? Sort the result descending by content.",
    "answer": "SELECT title, content"
  },
  {
    "id": 1429,
    "db_id": "real_estate_rentals",
    "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.",
    "answer": "SELECT search_string, timestamp"
  },
  {
    "id": 1430,
    "db_id": "real_estate_rentals",
    "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?",
    "answer": "SELECT z FROM PropertyInfoP3ZP12345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345678902345"
  },
  {
    "id": 1431,
    "db_id": "real_estate_rentals",
    "question": "Return the zip codes for properties not belonging to users who own two or fewer properties.",
    "answer": "SELECT zip_code \nFROM userpropertiespropertiesproperties.properties\nWHERE user_id IN (SELECT MIN(user_id) FROM userpropertiesproperties.properties)"
  },
  {
    "id": 1432,
    "db_id": "real_estate_rentals",
    "question": "What are the users making only one search? List both category and user id.",
    "answer": "SELECT from"
  },
  {
    "id": 1433,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have only made one search, and what are their category codes?",
    "answer": "SELECT DISTINCT id FROM users_tableusers_id_1_joined_at_2022_3_7_568734_239999_2023_3_1_23_3_4_1_7_8_9_1_1_1_1_2_3_4_5_6_7_8_9_1_1_1_2_3_4_5_6_7_8_9_1_1_3_4_5_6_7_8_9_1_1_1_3_4_5_7_8_9_1_1_1_2_3_4_5_6_7_8_9_1_1_1_2_3_4_5_7_8_9_1_1_1_2_3_4_5_7_8_9_1_1_1_3_4_5_6_7_8_9_1_1_3_4_5_7_8_9_1_1_1_2_3_4_5_6_7_8_9_1_1_1_2_3_4_5_7_8_9_1_1_1_2_3_4_5_7_8_9_1_1_2_3_4_5_7_8_9_1_1_1_3_4_5_6_7_8_9_1_1_1_2_3_4_5_7_8_9_1_1_1_2_3_4_5_7_8_9_1_1_2_3_4_5_7_8_9_1_1_1_2_3_4_5_7_8_9_1_1_1_2_3_4_5_7_8_9_1_1_1_3_4_5_6_7_8_9_1_1_1_2_3_4_5_7_8_9_1_1_1_2_3_4_5"
  },
  {
    "id": 1434,
    "db_id": "real_estate_rentals",
    "question": "What is the age range category of the user who made the first search?",
    "answer": "SELECT age FROM usersWHERE.first_search_date INNER JOIN users_with_birthday_to_1995423647423647423850125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501255012550125501"
  },
  {
    "id": 1435,
    "db_id": "real_estate_rentals",
    "question": "Return the age category for the user who made the earliest search.",
    "answer": "SELECT * FROM users.age_category WHERE user_id = (SELECT MIN(user_id) FROM users.age_category) ORDER BY age_category ASC LIMIT 1"
  },
  {
    "id": 1436,
    "db_id": "real_estate_rentals",
    "question": "Find the login names of all senior citizen users ordered by their first names.",
    "answer": "SELECT name"
  },
  {
    "id": 1437,
    "db_id": "real_estate_rentals",
    "question": "What are the login names of all senior citizens, sorted by first name?",
    "answer": "SELECT * FROM senior_citizens_login_name.ORDER"
  },
  {
    "id": 1438,
    "db_id": "real_estate_rentals",
    "question": "How many searches do buyers make in total?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1439,
    "db_id": "real_estate_rentals",
    "question": "Count the number of searches made by buyers.",
    "answer": "SELECT COUNT(*) FROM search_data.ardi"
  },
  {
    "id": 1440,
    "db_id": "real_estate_rentals",
    "question": "When did the user with login name ratione register?",
    "answer": "SELECT MIN(register_id) FROM usersregistering.log"
  },
  {
    "id": 1441,
    "db_id": "real_estate_rentals",
    "question": "What was the registration date for the user whose login name is ratione?",
    "answer": "SELECT * FROM registered_users_ratione_2019_04_30_000000_2019_04_30_000001_2019_04_30_000002_2019_04_30_000003_2019_04_30_000004_2019_04_30_000005_2019_04_30_000006_2019_04_30_000007_2019_04_30_000008_2019_04_30_000009_2019_04_30_000010_2019_04_30_000011_2019_04_30_000012_2019_04_30_000013_2019_04_30_000014_2019_04_30_000015_2019_04_30_000016_2019_04_30_000017_2019_04_30_000018_2019_04_30_000019_2019_04_30_000020_2019_04_30_000021_2019_04_30_000022_2019_04_30_000023_2019_04_30_000024_2019_04_30_000025_2019_04_30_000026_20"
  },
  {
    "id": 1442,
    "db_id": "real_estate_rentals",
    "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.",
    "answer": "SELECT name, middle_name, last_name FROM sellers_table.log_in WHERE seller_value = 1"
  },
  {
    "id": 1443,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle, last, and login names for all users who are sellers?",
    "answer": "SELECT A"
  },
  {
    "id": 1444,
    "db_id": "real_estate_rentals",
    "question": "Where do the Senior Citizens live? List building, street, and the city.",
    "answer": "SELECT T1.PSTM FROM T1.join WHERE T2.city = 'B'"
  },
  {
    "id": 1445,
    "db_id": "real_estate_rentals",
    "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
    "answer": "SELECT BY \n  \n  \n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        "
  },
  {
    "id": 1446,
    "db_id": "real_estate_rentals",
    "question": "How many properties are there with at least 2 features?",
    "answer": "SELECT * FROM my_tableproperties.WHERE FULL JOIN (SELECT * FROM my_tableproperties.FUNLP) ON my_tableproperties.FUNLP = my_tableproperties.FUNLP"
  },
  {
    "id": 1447,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties with at least two features.",
    "answer": "SELECT COUNT(*) \nFROM property_table20223618341742636359973647777772620298981677305493548134194149090010180272224049766702978671050125443872982811175323120571433457017681190571040905739100386701033204801263226808365259811046240445376254740542403066801221435730917664805324068601263120357125480977789566515043511699630505674876541041430474482825531048406068103108079999108511471515332055674876452680074865111729879935641951841457286488888600122060498888648888888864888886488888888888888888888888888888888888888888888888888888888888"
  },
  {
    "id": 1448,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each property have?",
    "answer": "SELECT photo_count FROM property_info.photo"
  },
  {
    "id": 1449,
    "db_id": "real_estate_rentals",
    "question": "Count the number of property photos each property has by id.",
    "answer": "SELECT COUNT(*) FROM property_images.Each"
  },
  {
    "id": 1450,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each owner has of his or her properties? List user id and number of photos.",
    "answer": "SELECT ID FROM UsersPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosLikePhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosPhotosHowDoesHeLikeThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIsThisPhotoIs"
  },
  {
    "id": 1451,
    "db_id": "real_estate_rentals",
    "question": "What are the user ids of property owners who have property photos, and how many do each of them have?",
    "answer": "SELECT PropertyId, UserIds FROM PropertyPhotosGROUP_byPropertyIdORDER_byUserIdsASCLIMITNum.question"
  },
  {
    "id": 1452,
    "db_id": "real_estate_rentals",
    "question": "What is the total max price of the properties owned by single mothers or students?",
    "answer": "SELECT property_name, SUM(price) FROM properties_tableJOINSUMPriceSUMOnPropertyOnSchoolsONproperties_table.properties_id INNER JOIN SUMPriceSUMOnStudentOnSchoolsONstudent_on_schools.properties_id ON student_on_schools.properties_id = properties_table.properties_id GROUP BY property_name"
  },
  {
    "id": 1453,
    "db_id": "real_estate_rentals",
    "question": "Give the total max price corresponding to any properties owned by single mothers or students.",
    "answer": "SELECT SUM(price)"
  },
  {
    "id": 1454,
    "db_id": "real_estate_rentals",
    "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?",
    "answer": "SELECT Property_ID FROM PropertyHistoryORDEREDBYDATESTAMP.SortedPropertyList"
  },
  {
    "id": 1455,
    "db_id": "real_estate_rentals",
    "question": "Return the date stamp and property name for each property history event, sorted by date stamp.",
    "answer": "SELECT * FROM properties_event_history_event_hst_map.hst_map AS hSTMap GROUP BY hSTMap.property_name"
  },
  {
    "id": 1456,
    "db_id": "real_estate_rentals",
    "question": "What is the description of the most common property type? List the description and code.",
    "answer": "SELECT description FROM PropertyTypeDescription.INSERT"
  },
  {
    "id": 1457,
    "db_id": "real_estate_rentals",
    "question": "What is the most common property type, and what is its description.",
    "answer": "SELECT properties WHERE category = 'Property'"
  },
  {
    "id": 1458,
    "db_id": "real_estate_rentals",
    "question": "What is the detailed description of the age category code 'Over 60'?",
    "answer": "SELECT age_code FROM your_table_name.Only"
  },
  {
    "id": 1459,
    "db_id": "real_estate_rentals",
    "question": "Give the category description of the age category 'Over 60'.",
    "answer": "SELECT Category"
  },
  {
    "id": 1460,
    "db_id": "real_estate_rentals",
    "question": "What are the different room sizes, and how many of each are there?",
    "answer": "SELECT BY RIGHT OUTER JOIN OFROOMS.RECRUITED_students   AS ANSWER  AS ANSWER ON ilihan                                                                                                                                                                                                                                                                                                                                                                                                                                                                          "
  },
  {
    "id": 1461,
    "db_id": "real_estate_rentals",
    "question": "Return the number of rooms with each different room size.",
    "answer": "SELECT * FROM roomsGROUPHAVINGroom_size_in_classINGROUPNOTINGROUP276.ORDER LIMIT 1"
  },
  {
    "id": 1462,
    "db_id": "real_estate_rentals",
    "question": "In which country does the user with first name Robbie live?",
    "answer": "SELECT country"
  },
  {
    "id": 1463,
    "db_id": "real_estate_rentals",
    "question": "Return the country in which the user with first name Robbie lives.",
    "answer": "SELECT Country \nFROM users_info_tableUSR2018L310WHEREUT_user_idarta_IDarta_BASISIDarta_CASUSIDarta_FIPSIDarta_JANESBASIDarta_KIPTICIDarta_LATKIDarta_NORBAJASIDarta_OAAJASIDarta_SALESIDarta_TAXIDarta_WOMANIDuta_YANJSIDUA_CASUSIDarta_ZASIDarta_ZIPID.RETURNING"
  },
  {
    "id": 1464,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle and last names of users who own the property they live in?",
    "answer": "SELECT LastName FROM Users.WHEREPropertyID INNER JOIN UsersOnPropertyId.ANDPropertyNameLikevbstrsearchvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvbnetvb"
  },
  {
    "id": 1465,
    "db_id": "real_estate_rentals",
    "question": "Return the full names of users who live in properties that they own.",
    "answer": "SELECT u.Name FROM UsersWHEREproperties_id_in_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table_your_table"
  },
  {
    "id": 1466,
    "db_id": "real_estate_rentals",
    "question": "List the search content of the users who do not own a single property.",
    "answer": "SELECT COUNT(*) FROM users_whoown_single_property_search_content.LIMIT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   "
  },
  {
    "id": 1467,
    "db_id": "real_estate_rentals",
    "question": "What search strings were entered by users who do not own any properties?",
    "answer": "SELECT T1.T2"
  },
  {
    "id": 1468,
    "db_id": "real_estate_rentals",
    "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
    "answer": "SELECT column_name, MAX(column_value) FROM table_nameGROUPHAVINGHAVINGCOUNTPAISES_column_nameNOTINEXSELECTcolumn_nameFROMtable_nameGROUPHAVINGCOUNTPAISES_column_nameISVIPOR3000ORDERBycolumn_nameLIMIT256HAVINGCOUNTPAISES_column_nameISVIPOR3000ANDCOUNTPAISES_column_nameISVIPOR1500GROUPHAVINGCOUNTPAISES_column_nameISVIPOR3000.Only"
  },
  {
    "id": 1469,
    "db_id": "real_estate_rentals",
    "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
    "answer": "SELECT COUNT(*) AS user_count FROM users_tableusers_2_or_three_id_countWHEREusers_tabletable_namelikeerca_to_baihu_qing_2019_04_30.usingenglish ORDER BY user_count DESC LIMIT 2"
  },
  {
    "id": 1470,
    "db_id": "bike_racing",
    "question": "How many bikes are heavier than 780 grams?",
    "answer": "SELECT THEAnswer"
  },
  {
    "id": 1471,
    "db_id": "bike_racing",
    "question": "List the product names and weights of the bikes in ascending order of price.",
    "answer": "SELECT ProductName, Weight FROM BikesGROUPByPriceORDEREDByWeightASC.SELECT"
  },
  {
    "id": 1472,
    "db_id": "bike_racing",
    "question": "List the heat, name, and nation for all the cyclists.",
    "answer": "SELECT heat_name FROM cyclistsWHEREHeat_id_in_cyclists_2021__04_30__00_00_00_00_00_00_01__0001__0016_37_38_59_45_59_36_59_60_04_30_02_01_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_14_"
  },
  {
    "id": 1473,
    "db_id": "bike_racing",
    "question": "What are the maximum and minimum weight of all bikes?",
    "answer": "SELECT MIN(Weight) FROM BikesGROUPED_byCategoryORDER_byWeightLIMIT100.answer"
  },
  {
    "id": 1474,
    "db_id": "bike_racing",
    "question": "What is the average price of the bikes made of material 'Carbon CC'?",
    "answer": "SELECT AVG(price)"
  },
  {
    "id": 1475,
    "db_id": "bike_racing",
    "question": "What are the name and result of the cyclists not from 'Russia' ?",
    "answer": "SELECT IVE"
  },
  {
    "id": 1476,
    "db_id": "bike_racing",
    "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
    "answer": "SELECT DISTINCT bike_id, product_name FROM bikes_post_year_2015_bike_table.ardi"
  },
  {
    "id": 1477,
    "db_id": "bike_racing",
    "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
    "answer": "SELECT ID FROM bike_id_tableGROUPHAVINGCOUNTigkeitRFIDISINEXACTBETWEEN36570187249377373407407137416475110822413670800138637201802794166594170346377080001070978238757637453637708000010709782387576374536377080001070978238757637453637708000107097823875763745363770800010709782387576374536377080000107097823875763745363770800001070978238757637453637708000010709782387576374536377080000107097823875763745363770800001070978238757637453637708000000107097823875763745363770800001070978238757637453637708000001070978238757637453637708000010709782387576"
  },
  {
    "id": 1478,
    "db_id": "bike_racing",
    "question": "What are the id and name of the cyclist who owns the most bikes?",
    "answer": "SELECT ID, Name FROM cyclists_tableGROUPHAVINGCountHAVINGCOUNTISBLANKINIDNOTINEXISTSELECTIDFROMyclips_tableountISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCountISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTISBLANKINCOUNTIS"
  },
  {
    "id": 1479,
    "db_id": "bike_racing",
    "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "answer": "SELECT Name"
  },
  {
    "id": 1480,
    "db_id": "bike_racing",
    "question": "How many different levels of heat are there for the cyclists?",
    "answer": "SELECT COUNT(DISTINCTLevel) FROM HeatLevelORDEREDByLevelLIMIT100.Best"
  },
  {
    "id": 1481,
    "db_id": "bike_racing",
    "question": "How many cyclists did not purchase any bike after year 2015?",
    "answer": "SELECT COUNT(*) FROM cycling_data_2016_2017_2018_2019_2020_2021_2022_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2101_2102_2103_2104_2105_2106_2107_2108_2109_2110_2111_2112_2113_2114_2115_2116_2117_2118_2119_2120_2121_2122_2123"
  },
  {
    "id": 1482,
    "db_id": "bike_racing",
    "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
    "answer": "SELECT B.Name FROM RaceBikes_Basket20230729SELECTRaceNameFROMBasket20230729ORDERByB.Name LIMIT 1"
  },
  {
    "id": 1483,
    "db_id": "bike_racing",
    "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "answer": "SELECT name, price FROM bikes_bike_name_price_map.icts WHERE bike_name = 'Bradley Wiggins'"
  },
  {
    "id": 1484,
    "db_id": "bike_racing",
    "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
    "answer": "SELECT cycling_cycling_name, cycling_nation, cycling_result FROM cyclists_without_racing_bike.cycling_cycling_table WHERE cycling_status = 'N/A'"
  },
  {
    "id": 1485,
    "db_id": "bike_racing",
    "question": "What are the names of the bikes that have substring 'fiber' in their material?",
    "answer": "SELECT IN"
  },
  {
    "id": 1486,
    "db_id": "bike_racing",
    "question": "How many bikes does each cyclist own? Order by cyclist id.",
    "answer": "SELECT COUNT(*) FROM bike_idGROUP_bycycle_idORDER_by_idASCLIMIT1.Threads"
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "question": "What is the most expensive cake and its flavor?",
    "answer
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "question": "Give the id and flavor of the most expensive cake.",
    "answer": "SELECT id, flavor FROM cake_cakesORDEREDLIMIT1.ante"
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "question": "What is the cheapest cookie and its flavor?",
    "answer": "SELECT cookie"
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "question": "What is the id and flavor of the cheapest cookie?",
    "answer": "SELECT id, flavor FROM cookiesWHERE_priceBetweenLowPriceAndHighPriceGROUPbyidORDERByflavorascendingLIMIT10.Thought"
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "question": "Find the ids of goods that have apple flavor.",
    "answer": "SELECT id FROM apple_apples_id_table.WHERE_apple_type_id INNER JOIN products_table.on_product_id ON apple_type_id = (SELECT type_id FROM products_tableON_id_product_id_1047053637824524_1047053637824907_1047053637824067_1047053637824194_1047053637824104_1047053637824914_1047053637824143_1047053637824143_1047053637824097_1047053637824117_1047053637824135_1047053637824160_1047053637824194_1047053637824135_1047053637824160_1047053637824097_1047053637824117_1047053637824117_1047053637824143_1047053637824194_1047053637824135_1047053637824143_1047053637824143_1047053637824097_1047053637824117_1047053637824117_1047053637824097_1047"
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "question": "What are the ids with apple flavor?",
    "answer": "SELECT * FROM fruitsWHERE.apple_id INNER JOIN (SELECT id FROM fruits_joins_fruits_joins_fruits_joins_joins_joins_joins_joins_joins_fruits_joins_joins_joins_joins_joins_joins_fruits_joins_joins_joins_joins_joins_fruits_joins_joins_joins_joins_joins_fruits_joins_joins_joins_joins_fruits_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins_joins"
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "question": "What are the ids of goods that cost less than 3 dollars?",
    "answer": "SELECT id FROM goods_goods_id_3_15_420708794_65_16_20_20_20_30_50_10_40_15_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_101_102_103_104_105_106_107_108_109_110_111_112_113_114_115_116_117_118_119_120_121_122_123_124_125_126_127_128_129_130_131_132_133_134_135_136_137_138_139_140_141_142_143_144_145_146_147_148_149_150_151_"
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that cost less than 3 dollars.",
    "answer": "SELECT id"
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
    "answer": "SELECT * FROM customer_bought_cakes_lemon_id_2021.ability WHERE customer_bought_cakes_lemon_id_2021.customer_id = (SELECT id FROM customer_bought_cakes_2021.ability WHERE birthday = '2021-04-16')"
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of customers who bought lemon flavored cake?",
    "answer": "SELECT DISTINCT id FROM customers.c"
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "question": "For each type of food, tell me how many customers have ever bought it.",
    "answer": "SELECT food_type FROM food_tableGROUP_byfood_type_having_bought_countHAVING_count_001597835664000000010284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910284910"
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "question": "How many customers have bought each food?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "question": "Find the id of customers who shopped at the bakery at least 15 times.",
    "answer": "SELECT customer_id FROM customers_closetaker_who_shopped_at_bakery_longest_lags_2023_4_26_1987_1804_1446_3347_6646_1501_17_3_4_4_1_2_3_1_4_6_7_8_10_15_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_111_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_"
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "question": "What are the customer ids of customers who have at least 15 receipts?",
    "answer": "SELECT COUNT(*) FROM transactions_customers_15_to_2407326004243742999857344613687037832995894812047148020558057146015193219509999124655714510945363943656000217642501327300000018560717777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777"
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
    "answer": "SELECT t.last_name FROM customers_tastings_history.txt WHERE t.taste_date >= DATEADD.timedelta_minutesago_than                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    "
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "question": "Give the last names of customers who have been to the bakery more than 10 times?",
    "answer": "SELECT * FROM orders_tableWHEREcustomer_id.invest INNER JOIN orders_tableONcustomer_id.cust_id_invest \n\n  AS B AS CASDASEASJSEESJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJSEASJ"
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "question": "How many types of Cake does this bakery sell?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1504,
    "db_id": "bakery_1",
    "question": "Count the number of types of cake this bakery sells.",
    "answer": "SELECT type"
  },
  {
    "id": 1505,
    "db_id": "bakery_1",
    "question": "List all the flavors of Croissant available in this bakery.",
    "answer": "SELECT flavor"
  },
  {
    "id": 1506,
    "db_id": "bakery_1",
    "question": "What are all the flavors of croissant?",
    "answer": "SELECT flavor FROM croissant_table_name.INSERT"
  },
  {
    "id": 1507,
    "db_id": "bakery_1",
    "question": "Give me a list of all the distinct items bought by the customer number 15.",
    "answer": "SELECT column"
  },
  {
    "id": 1508,
    "db_id": "bakery_1",
    "question": "What are all the distinct items bought by customer 15?",
    "answer": "SELECT A.Apple"
  },
  {
    "id": 1509,
    "db_id": "bakery_1",
    "question": "For each type of food, what are the average, maximum and minimum price?",
    "answer": "SELECT T2 FROM table_nameGROUP_by_type_of_foodORDER_by_price_minLIMIT.agg"
  },
  {
    "id": 1510,
    "db_id": "bakery_1",
    "question": "What are the average, minimum and maximum prices for each food?",
    "answer": "SELECT name FROM prices_tableGROUPED_byfood_name.ORDER"
  },
  {
    "id": 1511,
    "db_id": "bakery_1",
    "question": "Find the receipt numbers where both Cake and Cookie were bought.",
    "answer": "SELECT receipt_numbers FROM cake_cake_receivers.join_cookies_on_bought AS c_in, cake_cake_receivers.join_cookies_on_bought AS c_out, cookies_on_bought.join_cookies_on_bought AS c_in, cookies_on_bought.join_cookies_on_bought AS c_out"
  },
  {
    "id": 1512,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1513,
    "db_id": "bakery_1",
    "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
    "answer": "SELECT *"
  },
  {
    "id": 1514,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
    "answer": "SELECT FROM\n\nINNER JOIN PRODUCTSIII.RETURNINGRETURNSIVII AS OUNTAION  AS OUNTAION ON TANGLAS                                                                                                                                                                                                                                                                                                                                                                                                                                                                   "
  },
  {
    "id": 1515,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1516,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
    "answer": "SELECT RECEIVE_NUMBER, DATE_FORMATRECEIVE_NUMBER, price FROM orders_receivesales.ics"
  },
  {
    "id": 1517,
    "db_id": "bakery_1",
    "question": "What is the item that was bought the least number of times?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1518,
    "db_id": "bakery_1",
    "question": "Which item was bought the fewest times?",
    "answer": "SELECT TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
  },
  {
    "id": 1519,
    "db_id": "bakery_1",
    "question": "How many goods are available for each food type?",
    "answer": "SELECT ively"
  },
  {
    "id": 1520,
    "db_id": "bakery_1",
    "question": "Count the number of goods for each food type.",
    "answer": "SELECT count"
  },
  {
    "id": 1521,
    "db_id": "bakery_1",
    "question": "What is the average price for each food type?",
    "answer": "SELECT * FROM ordersGROUPByfoodTypeORDERAS_averagePrice.Explanation"
  },
  {
    "id": 1522,
    "db_id": "bakery_1",
    "question": "Give the average price for each food type.",
    "answer": "SELECT AVG(price)"
  },
  {
    "id": 1523,
    "db_id": "bakery_1",
    "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
    "answer": "SELECT ID FROM ProductSellingWHEREApricotFlavorIDLikeSamsungAndApricotFlavorIDLikeGoogleAndApricotFlavorIDLikeAmazonAndApricotFlavorIDLikeAppleAndApricotFlavorIDLikeMicrosoftAndApricotFlavorIDLikeLinkedInAndApricotFlavorIDLikeTwitterAndApricotFlavorIDLikeSnapchatAndApricotFlavorIdLikeFacebookAndApricotFlavorIdLikePinterest.Answer"
  },
  {
    "id": 1524,
    "db_id": "bakery_1",
    "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
    "answer": "SELECT g.id FROM goods_gg_id_gggdg_ggggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggggdg_gggdg_gggdg_gggdg_gggggdg_gggdg_gggdg_gggdg_gggdg_gggdg_ggGDg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggggdg_gggdg_gggdg_gggdg_gggdg_gggggdg_gggdg_ggGDg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_ggGDg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggdg_gggd"
  },
  {
    "id": 1525,
    "db_id": "bakery_1",
    "question": "Find flavor of cakes that cost more than 10 dollars.",
    "answer": "SELECT flavor"
  },
  {
    "id": 1526,
    "db_id": "bakery_1",
    "question": "What are the flavors of cakes that cost more than 10 dollars?",
    "answer": "SELECT the  \n   \n   INNER JOIN RETURNINGANAnswerSS.ANSWER\n   \n  AS B\n  AS C ON D\n  >B"
  },
  {
    "id": 1527,
    "db_id": "bakery_1",
    "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
    "answer": "SELECT distinct  INNER JOIN oods_with_priceONoods_id_1_id_2_id_3_id_4_id_5_id_6_id_7_id_8_id_9_id_10_id_11_id_12_id_13_id_14_id_15_id_16_id_17_id_18_id_19_id_20_id_21_id_22_id_23_id_24_id_25_id_26_id_27_id_28_id_29_id_30_id_31_id_32_id_33_id_34_id_35_id_36_id_37_id_38_id_39_id_40_id_41_id_42_id_43_id_44_id_45_id_46_id_47_id_48_id_49_id_50_id_51_id_52_id_53_id_54_id_55_id_56_id_57_id_58_id_59_id_60_id_61_id_62_id_63_id_64_id_65_id_66_id_67_id_68_id_69_id_70_id_71_id_72_id_73_id_74_id_75_id_76_id_77_id_78_id_79_id_80_id_81_id_82_id_83_id_84_id_85_id_86_id_87_id_88_id_89_id_90_id_91_id_92_id_93_id_94_id_95_id_96_id_97_id_98_id_99_id_100_id_110_id_120_id_130_id_140_id_150_id_160_id_170_id_180_id_190_id_200_id_210_id_220_id_230_id_240_id_250_id_260_id_270_id"
  },
  {
    "id": 1528,
    "db_id": "bakery_1",
    "question": "What are the distinct ids and prices for goods that cost less than the average good?",
    "answer": "SELECT IVE GROUP BY NAME"
  },
  {
    "id": 1529,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
    "answer": "SELECT OUTPUT"
  },
  {
    "id": 1530,
    "db_id": "bakery_1",
    "question": "Give the distinct ids for goods that cost less than any Tart.",
    "answer": "SELECT id, tart_name FROM goods_tart_id_costless_goods_2019.iii WHERE tart_name IN (SELECT tart_name FROM goods_tart_id_costless_goods_2019_ii_jazz_fusion_2023.ii WHERE tart_name = 'Tart')"
  },
  {
    "id": 1531,
    "db_id": "bakery_1",
    "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
    "answer": "SELECT receipt_number"
  },
  {
    "id": 1532,
    "db_id": "bakery_1",
    "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
    "answer": "SELECT IVE"
  },
  {
    "id": 1533,
    "db_id": "bakery_1",
    "question": "On which date did some customer buy a good that costs more than 15 dollars?",
    "answer": "SELECT the   FROM customer_2021_08_17_06_00_00_00_00_00_00_00_01_03_04_07_05_06_07_06_07_08_09_0A_0B_0C_0D_10_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_110_111_112_113_114_115_116_117_118_119_120_121_122_123_124_125_126_127_128_129_130_131_132_133_134_135_136_137_138_139_140_141_142_143_"
  },
  {
    "id": 1534,
    "db_id": "bakery_1",
    "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
    "answer": "SELECT WHERE GROUP BY GROUP ORDER BY BYORDER DESC, ORDER DESC, ORDER ASC, DESC, DESC, DESC, ORDER ASC, DESC, ORDER DESC, ORDER DESC, ORDER DESC, ORDER ASC, DESC"
  },
  {
    "id": 1535,
    "db_id": "bakery_1",
    "question": "Give me the list of ids of all goods whose id has \"APP\".",
    "answer": "SELECT DISTINCT * FROM products_id_2014_2016_03_18_15_19_20_20_20_20_20_20_20_20_20_20_20_20_20_21_20_21_20_22_22_22_23_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_6"
  },
  {
    "id": 1536,
    "db_id": "bakery_1",
    "question": "What are all the ids of goods with an id which contains \"APP\"?",
    "answer": "SELECT DISTINCT Id FROM GoodsWithAppId.INSERT"
  },
  {
    "id": 1537,
    "db_id": "bakery_1",
    "question": "Which good has \"70\" in its id? And what is its price?",
    "answer": "SELECT SET WHERE VALUESSELECT                                                                                                                                                                                                                                                                                                  \n                                                                                         \n                                                                                                    \n       "
  },
  {
    "id": 1538,
    "db_id": "bakery_1",
    "question": "What are the id and price for the good with \"70\" in its id?",
    "answer": "SELECT * FROM product_id_product_name_70WHEREdescription_id_id_70GROUPHAVINGdescription_id_id_70ISBLANKORdescription_id_id_70ISBLANKORdescription_id_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70IsBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70IsBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70IsBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70IsBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id_70ISBLANKORdescription_id"
  },
  {
    "id": 1539,
    "db_id": "bakery_1",
    "question": "List the last names of all customers in an alphabetical order.",
    "answer": "SELECT name FROM customer_tableORDERlehASTINCT_name.ename"
  },
  {
    "id": 1540,
    "db_id": "bakery_1",
    "question": "What are the last names of the customers in alphabetical order?",
    "answer": "SELECT A"
  },
  {
    "id": 1541,
    "db_id": "bakery_1",
    "question": "Return the ordered list of all good ids.",
    "answer": "SELECT * FROM t1ORDERASCLIMITN.INK"
  },
  {
    "id": 1542,
    "db_id": "bakery_1",
    "question": "Order the distinct good ids.",
    "answer": "SELECT DISTINCT good_id FROM your_table_name.ORDER"
  },
  {
    "id": 1543,
    "db_id": "bakery_1",
    "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
    "answer": "SELECT *"
  },
  {
    "id": 1544,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
    "answer": "SELECT receipt_number FROM order_items_2016_05_17_japanWHEREuida_12_shopped_OR_id_12_pie_1_2.ais"
  },
  {
    "id": 1545,
    "db_id": "bakery_1",
    "question": "Find all receipts which has the latest date. Also tell me that date.",
    "answer": "SELECT DATEADDYM, MIN(DATE) FROM receipts.ANS"
  },
  {
    "id": 1546,
    "db_id": "bakery_1",
    "question": "What is the receipt number with the latest date, and what is that date?",
    "answer": "SELECT RECT_NUMBER FROM receipt_table.ORDER LIMIT 1"
  },
  {
    "id": 1547,
    "db_id": "bakery_1",
    "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
    "answer": "SELECT receipt_number FROM receiptsORDERBycreated_atascorderLIMIT100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1548,
    "db_id": "bakery_1",
    "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
    "answer": "SELECT receipt_number"
  },
  {
    "id": 1549,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
    "answer": "SELECT id"
  },
  {
    "id": 1550,
    "db_id": "bakery_1",
    "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
    "answer": "SELECT id"
  },
  {
    "id": 1551,
    "db_id": "bakery_1",
    "question": "Find the first name and last name of a customer who visited on the earliest date.",
    "answer": "SELECT First_name, Last_name FROM Customers.first_name_and_last_name"
  },
  {
    "id": 1552,
    "db_id": "bakery_1",
    "question": "What is the full name of the customer who visited on the earliest date?",
    "answer": "SELECT name"
  },
  {
    "id": 1553,
    "db_id": "bakery_1",
    "question": "What is average price of goods whose flavor is blackberry or blueberry?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "
  },
  {
    "id": 1554,
    "db_id": "bakery_1",
    "question": "What are the average prices of goods with blackberry or blueberry flavor?",
    "answer": "SELECT quantity"
  },
  {
    "id": 1555,
    "db_id": "bakery_1",
    "question": "Return the cheapest price for goods with cheese flavor.",
    "answer": "SELECT * FROM order_items_costingsWHERE.product_id INNER JOIN orders_on_time_with_pkey_tableON.product_idINNERJOINCheese_favor_costing ON orders_on_time_with_pkey_table.product_idINNERjoinproducts_with_cheese_costing_on_orders_with_pkey_table.product_idINNERJoinorder_items_costings_of_cheese_favor_costing\n    <brulos\n    GROUP BY product_id"
  },
  {
    "id": 1556,
    "db_id": "bakery_1",
    "question": "What is the cheapest good with cheese flavor?",
    "answer": "SELECT A"
  },
  {
    "id": 1557,
    "db_id": "bakery_1",
    "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
    "answer": "SELECT color, price FROM productsGROUPED_by_flavorORDERED_by_priceascENDORDERED_by_pricedescEND.What"
  },
  {
    "id": 1558,
    "db_id": "bakery_1",
    "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
    "answer": "SELECT color, flavor, price FROM fruitsGROUP_byColorORDER_byPriceLIMITnumFEES.OUTPUT AS table"
  },
  {
    "id": 1559,
    "db_id": "bakery_1",
    "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
    "answer": "SELECT product, min_price, max_price FROM productsGROUPEDByfoodTypeORDER_by_max_price_first.HAVING_min_price INNER JOIN (SELECT MIN_price, MAX_price FROM product_table132907823640933A177876794051669973730205980246587375345137872852478543402621788268267124723828877000002010000149203778741517119432200001934680498472931014485112995795914090601722121106984287632572323046664051669973753451378728524785434026217882682671247238288770000020100001492037787415171194322000019346804984729310144851129957959140906017221211069842876325723230466640516699737534513787285247854340262178826826712472382887700000201000014920377874151711943"
  },
  {
    "id": 1560,
    "db_id": "bakery_1",
    "question": "What are the minimum and maximum prices of food goods, ordered by food?",
    "answer": "SELECT price FROM order_tableorder_by_price_2021GROUPByproduct_idLIMIT100.Answer"
  },
  {
    "id": 1561,
    "db_id": "bakery_1",
    "question": "Find the top three dates with the most receipts.",
    "answer": "SELECT Date, COUNT(*) FROM receiptsGROUPByDateORDER_byCountdescLIMITLIMIT3.Thoughts"
  },
  {
    "id": 1562,
    "db_id": "bakery_1",
    "question": "What are the three dates for which the most receipts were given?",
    "answer": "SELECT A.February  \t\n\n   \t\n   \t\n\n    \t\n\n    \t\n\n   \t\n\n    \t\n\n   \t\n\n   \n\n\n   \n   \n\n\n   \n   \n\n\n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n\n\n   \n   \n   \n   \n\n\n   \n   \n\n\n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n"
  },
  {
    "id": 1563,
    "db_id": "bakery_1",
    "question": "Which customer shopped most often? How many times?",
    "answer": "SELECT SQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQLSQL"
  },
  {
    "id": 1564,
    "db_id": "bakery_1",
    "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
    "answer": "SELECT C.id, COUNT(*) AS num_purchases FROM Customers_cWHERE.customer_id INNER JOIN Orders_cONTRINSOROrders_ON_customer_id.customer_id\n  AS B AS C ON c.id = B"
  },
  {
    "id": 1565,
    "db_id": "bakery_1",
    "question": "For each date, return how many distinct customers visited on that day.",
    "answer": "SELECT COUNT(DISTINCT.customer_id) FROM customer_visits.ITS"
  },
  {
    "id": 1566,
    "db_id": "bakery_1",
    "question": "How many cusomters visited on each date?",
    "answer": "SELECT COUNT(*) FROM events_journals_journal_date_journals_journald_date_2017_2023_2024_2023_2023_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_2024_20"
  },
  {
    "id": 1567,
    "db_id": "bakery_1",
    "question": "Give me the first name and last name of customers who have bought apple flavor Tart.",
    "answer": "SELECT Name"
  },
  {
    "id": 1568,
    "db_id": "bakery_1",
    "question": "What are the full names of customers who bought apple flavored Tarts?",
    "answer": "SELECT FullName"
  },
  {
    "id": 1569,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookies whose price is lower than any Croissant?",
    "answer": "SELECT ID"
  },
  {
    "id": 1570,
    "db_id": "bakery_1",
    "question": "Give the ids of cookes that are cheaper than any croissant.",
    "answer": "SELECT cooking_id"
  },
  {
    "id": 1571,
    "db_id": "bakery_1",
    "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
    "answer": "SELECT DISTINCT Cakes FROM cake_cake_tableGROUPED_by_price_idHAVINGprice_price_in_grossgegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegegege"
  },
  {
    "id": 1572,
    "db_id": "bakery_1",
    "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
    "answer": "SELECT DISTINCT id"
  },
  {
    "id": 1573,
    "db_id": "bakery_1",
    "question": "What are the ids of goods whose price is above twice the average price of all goods?",
    "answer": "SELECT Answer"
  },
  {
    "id": 1574,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that are more than twice as expensive as the average good.",
    "answer": "SELECT id"
  },
  {
    "id": 1575,
    "db_id": "bakery_1",
    "question": "List the id, flavor and type of food of goods ordered by price.",
    "answer": "SELECT ID, flavor, type FROM ordersWHEREpricestonderED_to_001.ANDpricestonderED_to_01"
  },
  {
    "id": 1576,
    "db_id": "bakery_1",
    "question": "What are the ids, flavors, and food types of goods, ordered by price?",
    "answer": "SELECT id, flavor, food_type FROM orders_by_priceGROUPED_by_order_idORDERbypriceascLIMIT20.ados"
  },
  {
    "id": 1577,
    "db_id": "bakery_1",
    "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
    "answer": "SELECT * FROM OrdersGROUPHAVING_flavor_id_inHERIT.Flavor_ID"
  },
  {
    "id": 1578,
    "db_id": "bakery_1",
    "question": "What are the ids and flavors of cakes, ordered by flavor?",
    "answer": "SELECT cake_id FROM cakesORDER_by_flavor_idLIMITING_count_of_cakes_to_return.what"
  },
  {
    "id": 1579,
    "db_id": "bakery_1",
    "question": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
    "answer": "SELECT * FROM ordersWHEREocolateFlavorIsNotFoundMoreThan10timesORDEREDByProductIDLIMIT10.OnlyincludeItemsThatHaveChocolateFlavorButWereNotBoughtMoreThan10Times"
  },
  {
    "id": 1580,
    "db_id": "bakery_1",
    "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
    "answer": "SELECT Item"
  },
  {
    "id": 1581,
    "db_id": "bakery_1",
    "question": "What are the flavors available for Cake but not for Tart?",
    "answer": "SELECT flavors"
  },
  {
    "id": 1582,
    "db_id": "bakery_1",
    "question": "Give the flavors of Cakes that are not available for Tart.",
    "answer": "SELECT Flavor"
  },
  {
    "id": 1583,
    "db_id": "bakery_1",
    "question": "What is the three most popular goods in this bakery?",
    "answer": "SELECT A.ICECakesB.CHOCOLATEC"
  },
  {
    "id": 1584,
    "db_id": "bakery_1",
    "question": "Give the three most purchased items at this bakery.",
    "answer": "SELECT A"
  },
  {
    "id": 1585,
    "db_id": "bakery_1",
    "question": "Find the ids of customers who have spent more than 150 dollars in total.",
    "answer": "SELECT * FROM customer_spending_data.INSERT \n     LIMIT 20"
  },
  {
    "id": 1586,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who have spent over 150 dollars in total?",
    "answer": "SELECT * FROM customer_dataGROUPHAVINGSUMspentOver150DINARATgt1500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1587,
    "db_id": "bakery_1",
    "question": "Find the ids of customers whose average spending for each good is above 5.",
    "answer": "SELECT * FROM customer_spending_dataGROUP_CONCATmingHAVINGAVGSPendingGROUP_CONCATmingCOUNTSGAAPSESTENIN5GROUPENDGROUPHAVINGCOUNTSGAAPSESTENIN10GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN20GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN30GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN40GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN50GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN60GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN70GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN80GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN90GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN100GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN150GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN200GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN300GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN400GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN500GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN600GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN700GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN800GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN900GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN1000GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN1500GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN2000GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN3000GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN4000GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN5000GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN6000GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN7000GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN8000GROUPENDGROUPHAVINGCOUNTSSAAPSESTENIN9000GROUP"
  },
  {
    "id": 1588,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who spend more than 5 on average for each good?",
    "answer": "SELECT customer_id, SUM(spend) AS total_spend \nFROM customers_cashFlowGROUP_CONCATCustomers_AGEGROUP_byCustomer_AgeORDER_byTotal_spenddescLIMIT10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1589,
    "db_id": "bakery_1",
    "question": "On which day did the bakery sell more than 100 dollars in total.",
    "answer": "SELECT MIN(your_date) FROM your_table_nameyrWHEREYours_date_in_year_2019__ISBLANKAnswer.Oracle"
  },
  {
    "id": 1590,
    "db_id": "bakery_1",
    "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
    "answer": "SELECT MIN(Dates) FROM sales_table
  },
  {
    "id": 1591,
    "db_id": "car_racing",
    "question": "How many drivers are there?",
    "answer": "SELECT COUNT(*) FROM drivers.How"
  },
  {
    "id": 1592,
    "db_id": "car_racing",
    "question": "Find the total number of drivers.",
    "answer": "SELECT COUNT(*) FROM drivers.GROUP"
  },
  {
    "id": 1593,
    "db_id": "car_racing",
    "question": "Find the number of drivers whose points are greater than 150 for each make.",
    "answer": "SELECT D1.D1, D2.D2, COUNT(*) FROM DriverD1JoinDriverD2OnDriverD1.DriverIDJOINDriverD3OnDriverD2driverIDJOINMake AS MJoinOnPointOnDriverD1DriverIDJOINPointOnDriverD3DriverIDJOINMakeASMPOnDriverD3DriverIDJOINMakeASMPOnDriverD4DriverIDJOINMakeASMPOnDriverD5DriverIDJOINMakeASMPOnDriverD6DriverIDJOINMakeASMPOnDriverD7DriverIDJoinMakeASMPOnDriverD8DriverIDJoinMakeASMPOnDriverD9DriverIDJoinMakeASMPOnDriverD10DriverIDJoinMakeASMPOnDriverD11DriverIDJOINMakeASMPOnDriverD12DriverIDJoinMakeASMPOnDriverD13DriverIDJoinMakeASMPOnDriverD14DriverIDJOINMakeASMPOnDriverD15DriverIDJoinMakeASMPOnDriverD"
  },
  {
    "id": 1594,
    "db_id": "car_racing",
    "question": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
    "answer": "SELECT M, COUNT(*) FROM DriverPointsGROUPBymakeORDERByCOUNTLIMIT1.ques"
  },
  {
    "id": 1595,
    "db_id": "car_racing",
    "question": "Find the average age of drivers for each make.",
    "answer": "SELECT * FROM vehicles_data_v2019_2018_2018_3048_3048_2017_2016_3039_2015_2014_2013_2012_2011_2010_1999_2010_2010_2009_2008_1997_2006_2005_1994_1993_1992_1991_1989_1988_1987_1986_1985_1984_1983_1982_1981_1980_1979_1978_1977_1976_1975_1974_1973_1972_1971_1969_1968_1967_1966_1965_1964_1963_1962_1961_1959_1958_1957_1956_1955_1954_1953_1952_1951_1949_1948_1947_1946_1945_1944_1943_1942_1941_1940_1939_1938_1937_1936_1935_1934_1933_1932_1931_1930_1929_1928_1927_1926_1925_1924_1923_1922_1921_1920_1899_1898_1897_1896_1895_1894_1"
  },
  {
    "id": 1596,
    "db_id": "car_racing",
    "question": "What is the average age of drivers for each make? Return the average age and make.",
    "answer": "SELECT Age, Make FROM DriverAgeTableGROUPbyAgeORDERByAgeLIMIT1.rne"
  },
  {
    "id": 1597,
    "db_id": "car_racing",
    "question": "What are the average laps of all the drivers who are younger than 20?",
    "answer": "SELECT A.NA"
  },
  {
    "id": 1598,
    "db_id": "car_racing",
    "question": "Compute the average laps of drivers under the age of 20.",
    "answer": "SELECT AVG(laps) FROM drivers_age_20_21_to_39_lap_date_laps_table.ORDER"
  },
  {
    "id": 1599,
    "db_id": "car_racing",
    "question": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
    "answer": "SELECT car_name"
  },
  {
    "id": 1600,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor for each team and order them by the car owner.",
    "answer": "SELECT T2.MAN, T2.Sponsor FROM TeamT1ASUGARS_T2020ASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGarsASUGARSASUGarsASUGarsASUGARSASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGarsASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGarsASUGarsASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGarsASUGARSASUGarsASUGarsASUGarsASUGARSASUGARSASUGarsASUGarsASUGarsASUGARSASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGarsASUGARSASUGarsASUGars"
  },
  {
    "id": 1601,
    "db_id": "car_racing",
    "question": "Find the make that has more than one team.",
    "answer": "SELECT Make"
  },
  {
    "id": 1602,
    "db_id": "car_racing",
    "question": "Which make has more than one team?",
    "answer": "SELECT WHERE GROUP BY GROUP ORDER BY BY DESC"
  },
  {
    "id": 1603,
    "db_id": "car_racing",
    "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
    "answer": "SELECT FADE INNER JOIN FOLLETSON0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FADEINNER0182790530FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFA"
  },
  {
    "id": 1604,
    "db_id": "car_racing",
    "question": "Find the make of the team whose car owner is \"Buddy Arrington\".",
    "answer": "SELECT * FROM carsheet_carsheet_name_tableanan_to_buddy_arrington_name_and_car_name_buddy_arrington_name_and_car_name_buddy_arrington_name_and_car_name_buddy_arrington_name_2021_10_31_1549_06_07_16_07_07_07_2021_01_20_00_00_10_10_10_10_10_10_00_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_00_10_10_10_10_10_10_10_00_10_10_10_00_10_00_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_10_"
  },
  {
    "id": 1605,
    "db_id": "car_racing",
    "question": "What are the maximum and minimum points of drivers.",
    "answer": "SELECT Driver, Point"
  },
  {
    "id": 1606,
    "db_id": "car_racing",
    "question": "Find the highest and lowest points of drivers.",
    "answer": "SELECT driver_id, MAX(max_value), MIN(min_value) FROM driver_points_table.Driver_points_table"
  },
  {
    "id": 1607,
    "db_id": "car_racing",
    "question": "How many drivers have points smaller than 150?",
    "answer": "SELECT COUNT(*) FROM drivers_points_2016_2017_3678_3745_3756_3767_3778_3819_3820_3830_3831_3832_3833_3834_3835_3836_3837_3838_3839_3840_3841_3842_3843_3844_3845_3846_3847_3848_3849_3850_3851_3852_3853_3854_3855_3856_3857_3858_3859_3860_3861_3862_3863_3864_3865_3866_3867_3868_3869_3870_3871_3872_3873_3874_3875_3876_3877_3878_3879_3880_3881_3882_3883_3884_3885_3886_3887_3888_3889_3890_3891_3892_3893_3894_3895_3896_3897_3898_3899_3900_3901_3902_3903_3904_3905_3906_3907_3908_3909_3910_3911_3912_3913_3914_3915_3916_3917_3918_391"
  },
  {
    "id": 1608,
    "db_id": "car_racing",
    "question": "Count the number of drivers whose points are below 150.",
    "answer": "SELECT COUNT(DISTINCTDriverID) FROM DriverDatabases.distrivers WHERE Points < 150"
  },
  {
    "id": 1609,
    "db_id": "car_racing",
    "question": "List all the driver names in ascending order of age.",
    "answer": "SELECT * FROM drivers_age_tableORDERED_byAge.LIMIT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         "
  },
  {
    "id": 1610,
    "db_id": "car_racing",
    "question": "Sort the driver names by age in ascending order.",
    "answer": "SELECT Driver_Name FROM Driver_RecordsORDEREDBY_ageASC.Explanation"
  },
  {
    "id": 1611,
    "db_id": "car_racing",
    "question": "List all the driver names in descending order of points.",
    "answer": "SELECT * FROM drivers_pointsORDERDESCLIMITN.N"
  },
  {
    "id": 1612,
    "db_id": "car_racing",
    "question": "What is the list of drivers ordered by points in descending order?",
    "answer": "SELECT * FROM driver_orderingsORDER_by_pointsdescLIMITNROW.ANS"
  },
  {
    "id": 1613,
    "db_id": "car_racing",
    "question": "Please show the names of drivers, and countries they are from.",
    "answer": "SELECT Driver FROM vehicles_tableJOINdrivers_tableONvehicles_table.Driver_id WHERE vehicles_table.Driver_type = 'Car'"
  },
  {
    "id": 1614,
    "db_id": "car_racing",
    "question": "For each driver, return his or her name and country.",
    "answer": "SELECT name FROM drivers.d"
  },
  {
    "id": 1615,
    "db_id": "car_racing",
    "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
    "answer": "SELECT TO"
  },
  {
    "id": 1616,
    "db_id": "car_racing",
    "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
    "answer": "SELECT THE   \n\nFROM AucionATE.circle"
  },
  {
    "id": 1617,
    "db_id": "car_racing",
    "question": "What is the average age of drivers from countries with official native language \"English\"",
    "answer": "SELECT ively"
  },
  {
    "id": 1618,
    "db_id": "car_racing",
    "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
    "answer": "SELECT AVG(DATEDIFF) AS Average_Age"
  },
  {
    "id": 1619,
    "db_id": "car_racing",
    "question": "What are the countries that have drivers with points larger than 150?",
    "answer": "SELECT Country"
  },
  {
    "id": 1620,
    "db_id": "car_racing",
    "question": "Find all the countries where some drivers have points above 150.",
    "answer": "SELECT * FROM driver_points_tableGROUPHAVINGpoints_Higher_than_150.Answer"
  },
  {
    "id": 1621,
    "db_id": "car_racing",
    "question": "What is the capital of the country where the driver with the most points is from?",
    "answer": "SELECT THECapital"
  },
  {
    "id": 1622,
    "db_id": "car_racing",
    "question": "Which country is the driver with the highest points from? Give me the capital of the country.",
    "answer": "SELECT TTETTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"
  },
  {
    "id": 1623,
    "db_id": "car_racing",
    "question": "List each make with the number of drivers with that make.",
    "answer": "SELECT driver"
  },
  {
    "id": 1624,
    "db_id": "car_racing",
    "question": "For each make, return the make and the count of drivers with that make.",
    "answer": "SELECT MMake, COUNT(DriverID) FROM Vehicles_Makers.Makes"
  },
  {
    "id": 1625,
    "db_id": "car_racing",
    "question": "List the make that are associated with most drivers.",
    "answer": "SELECT Mmake FROM DriverMakers.makes WHERE Make IN (SELECT Make FROM DriverMakers.dates WHERE DATEDIFF_years = 0)"
  },
  {
    "id": 1626,
    "db_id": "car_racing",
    "question": "Which make does the most drivers have?",
    "answer": "SELECT SSELSESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESEseSESESESESESESESESESESESESEseseSESESESESEseSESESESEseSESEseSEseseseseseSEseSEseseseseseseseseseseseseSEseSEsese"
  },
  {
    "id": 1627,
    "db_id": "car_racing",
    "question": "List the driver makes that are associated with at least three drivers.",
    "answer": "SELECT make"
  },
  {
    "id": 1628,
    "db_id": "car_racing",
    "question": "Which make is associated with 3 or more drivers?",
    "answer": "SELECT A"
  },
  {
    "id": 1629,
    "db_id": "car_racing",
    "question": "List the names of teams that do not have any drivers.",
    "answer": "SELECT * FROM TeamsGROUPINGdriversByDriverNameHavingNoDrivers.ORDER"
  },
  {
    "id": 1630,
    "db_id": "car_racing",
    "question": "Which team does not have drivers?",
    "answer
  },
  {
    "id": 1631,
    "db_id": "car_racing",
    "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
    "answer": "SELECT TTTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTTttTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTttTTTTTTttttTTTTTTTTttttTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTttTTttTTTTttTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTTTTTTTTttTTTTTTTTTTTTttttTTTTTTTTttTTTTTTttTTTTTTTTTTTTTTttttTTTTTTTTTTTTttttTTTTTTTTTTTTttTTTTttTTttTTTTTTTTTTTTttTTTTTTTTttttTTTTttttTTTTTTTTTTTTttTTTTttttTTTTTTTTTTTTttttTTTTttTTttTTttTTTTTTTTTTTTTTttttttTTTTTTTTttTTTTTTttTTttTTTTttttTTTTTTTTTTTTTTttttttTTTTTTttttttttTTTTttTTttTTttttTTttTTttTTttttttttttttttttTTTTttttTTttttttttTTTTTTttttttttTTttTTTTttTTTTttttttttttttttttttTTttTTttttttttTTTTttttttTTttTTTTTTttttTTttttttttTTttttttttttttttttttttttTTttTTTTttttttttttttttttttttttttTTttttttTTttTTttttttTTTTttttttttttttttttttttttttttttttttttttttttttttttttttttttTTttttttttttttttttttttttttttttTTTTttttttttttTTttttttttTTttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttTTttttTTtt"
  },
  {
    "id": 1632,
    "db_id": "car_racing",
    "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
    "answer": "SELECT from"
  },
  {
    "id": 1633,
    "db_id": "car_racing",
    "question": "Show total and average points of all drivers.",
    "answer": "SELECT * FROM Driver_info.INSERT \n    ORDER BY Driver_id, ORDER ASC"
  },
  {
    "id": 1634,
    "db_id": "car_racing",
    "question": "What are the total and average points of drivers?",
    "answer": "SELECT IVE"
  },
  {
    "id": 1635,
    "db_id": "car_racing",
    "question": "Find the countries where no driver come from.",
    "answer": "SELECT * FROM DriverWHERE.DriverID INNER JOIN CountryS.country ON Driver.countryID = CountryS.countryID"
  },
  {
    "id": 1636,
    "db_id": "car_racing",
    "question": "Which countries do not have any drivers?",
    "answer": "SELECT teammatesmatesmatesmatesmatesmatematesmatesmatematesmatesmatesmatematesmatematesmatematesmatematesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatematesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatematesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatematesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatesmatematesmatesmatesmatematesmatematesmatesmatematematematesmatesmatesmatematesmatematesmatesmatesmatematesmatesmatematesmatematesmatesmatematesmatematesmatematesmatesmatesmatematesmatesmatematesmatematesmatesmatesmatematesmatematesmatematesmatematesmatesmatesmatematesmatesmatesmate.matesmatematesmatematematesmatematesmatesmatematematematematesmatematematesmatematesmatematematematesmatematematematesmatematesmatematematematemate"
  },
  {
    "id": 1637,
    "db_id": "car_racing",
    "question": "What are the manager and sponsor of the team that has the most drivers?",
    "answer": "SELECT manager"
  },
  {
    "id": 1638,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor of the team that has the most drivers.",
    "answer": "SELECT T2.MANAGER, T2.Sponsor FROM TeamT2ASVCASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGARSASUGarsASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGARSASUGarsASUGARS"
  },
  {
    "id": 1639,
    "db_id": "car_racing",
    "question": "What are the manager and car owner of the team that has at least 2 drivers?",
    "answer": "SELECT manager, car_owner FROM team_name_table.INSERT"
  },
  {
    "id": 1640,
    "db_id": "car_racing",
    "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
    "answer": "SELECT name, team"
  },
  {
    "id": 1641,
    "db_id": "institution_sports",
    "question": "How many institutions are there?",
    "answer": "SELECT ively"
  },
  {
    "id": 1642,
    "db_id": "institution_sports",
    "question": "Count the number of institutions.",
    "answer": "SELECT COUNT(*) FROM institution_data.INSERT"
  },
  {
    "id": 1643,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending alphabetical order.",
    "answer": "SELECT Name"
  },
  {
    "id": 1644,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered alphabetically?",
    "answer": "SELECT ivate"
  },
  {
    "id": 1645,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending order of founded year.",
    "answer": "SELECT i"
  },
  {
    "id": 1646,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered by the years in which they were founded?",
    "answer": "SELECT BY"
  },
  {
    "id": 1647,
    "db_id": "institution_sports",
    "question": "What are the cities and provinces of institutions?",
    "answer": "SELECT BY"
  },
  {
    "id": 1648,
    "db_id": "institution_sports",
    "question": "Return the cities and provinces of institutions.",
    "answer": "SELECT cities, provinces FROM institutions_table.ORDER"
  },
  {
    "id": 1649,
    "db_id": "institution_sports",
    "question": "What are the maximum and minimum enrollment of all institutions?",
    "answer": "SELECT * FROM institution_max_enrollments.SELECT \n    LIMIT +2703415270.785623700000006412372579181594201161583746902020087226664089877724176876722782805302375182736640"
  },
  {
    "id": 1650,
    "db_id": "institution_sports",
    "question": "Return the maximum and minimum enrollment across all institutions.",
    "answer": "SELECT max_enrollment, min_enrollment FROM enrollments_all.ensemble"
  },
  {
    "id": 1651,
    "db_id": "institution_sports",
    "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
    "answer": "SELECT COUNT(*) FROM institution_list.INSERT"
  },
  {
    "id": 1652,
    "db_id": "institution_sports",
    "question": "Return the affiliations of instituions that are not in the city of Vancouver.",
    "answer": "SELECT COUNT(*) FROM institutions_institutes_in_city_vancouverWHERE_name_enUSIS_cov.isne"
  },
  {
    "id": 1653,
    "db_id": "institution_sports",
    "question": "What are the stadiums of institutions in descending order of the capacity.",
    "answer": "SELECT name FROM sports_stadiumsORDER_by_capacitydescLIMIT100.Only   INNER JOIN sports_stadiumsONnamestoICSTAMPS.Only   AS entence\n\n\n\n\n\n    AS entence ON namestoICSTAMPS = 'ICSTAMPS'"
  },
  {
    "id": 1654,
    "db_id": "institution_sports",
    "question": "Return the stadiums of institutions, ordered by capacity descending.",
    "answer": "SELECT Stati FROM StadiumsGROUPHAVING_capacity_descINISHTtinREDACTIVE.count"
  },
  {
    "id": 1655,
    "db_id": "institution_sports",
    "question": "What is the stadium of the institution with the largest enrollment?",
    "answer": "SELECT * FROM universities_city_stadiumsWHEREschool_idLIKEarelstm100ANDcity_idLIKEarelstm200ANDSTadium_nameLIKEarelSTM300ANDestadium_typeLIKEarelSTM400ANDsizeLIKEarelSTM500ANDstudent_typeLIKEarelSTM600ANDsystem_typeLIKEarelSTM700ANDnameLIKEarelstm800ORDERASCLIMIT1.Answer"
  },
  {
    "id": 1656,
    "db_id": "institution_sports",
    "question": "Give the stadium of the institution which is the greatest enrollment.",
    "answer": "SELECT Name"
  },
  {
    "id": 1657,
    "db_id": "institution_sports",
    "question": "What are the names and nicknames of institutions?",
    "answer": "SELECT BY INNER JOIN INSTITUTENameNicknameInstitution
  },
  {
    "id": 1658,
    "db_id": "institution_sports",
    "question": "Return the names of institutions, as well as their nicknames.",
    "answer": "SELECT I.IName, I.Nickname FROM Institutions.IG"
  },
  {
    "id": 1659,
    "db_id": "institution_sports",
    "question": "What is the nickname of the institution with the smallest enrollment?",
    "answer": "SELECT B"
  },
  {
    "id": 1660,
    "db_id": "institution_sports",
    "question": "Return the nickname of the institution with the lowest enrollment.",
    "answer": "SELECT MIN(CASE_whenINSTRNAME_enrollMENT) AS enrollment, INSTRNAME_enrollment FROM institutions.OnlyOnEnrollments"
  },
  {
    "id": 1661,
    "db_id": "institution_sports",
    "question": "List the names of institutions in descending order of the number of championships.",
    "answer": "SELECT i.name, COUNT(*) AS num_championships"
  },
  {
    "id": 1662,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered descending by their number of championships?",
    "answer": "SELECT A"
  },
  {
    "id": 1663,
    "db_id": "institution_sports",
    "question": "List the names of institutions with at least one championship.",
    "answer": "SELECT * FROM institution_info_classificationsWHEREschool_nameLIKEstrRegExREPTREPSANDchamp_nameLIKEstrRegExREPTREPSANDname_of_institutionLIKEstrRegExREPTREPSANDchampion_nameLIKEstrRegExREPTREPSAndchampionship_nameLIKEstrRegExREPTREPSANDname_of_champ_nameLIKEstrRegExREPTREPS.ORDER"
  },
  {
    "id": 1664,
    "db_id": "institution_sports",
    "question": "What are the names of institutions that have 1 or more championships?",
    "answer": "SELECT I.Nationality FROM institutions_name_iIJNUS_AU_2020_03_16AS4897935344301099I1234567890053456789011234567890153456789019789005345678900534567890053456789005345678901123456789005345678900534567890053456789005345678900534567890053456789005345678900534567890053456789005345678900534567890053456789005345678900534567890053456789005345678900534567890053456789005345678900534567890053456789005345678900534567890053456789005345678900534567890053456789005345678900534567890053456789005345678900534567890053456789005345678900534567890053456"
  },
  {
    "id": 1665,
    "db_id": "institution_sports",
    "question": "What is the total number of championship of institution with public affiliation?",
    "answer": "SELECT COUNT(*) FROM institutions_classifications_2021_03_09_1758_4055_2021_03_09_1757_4056_2021_03_09_1757_4058_2021_03_09_1758_5059_2021_03_09_1759_5061_2021_03_09_1759_5062_2021_03_10_1759_2021_03_14_1759_5063_2021_03_18_1759_5064_2021_03_24_1759_5065_2021_03_26_1759_5070_2021_03_28_1759_5071_2021_03_34_1759_5072_2021_03_36_1759_5073_2021_03_42_1759_5074_2021_03_46_1759_5075_2021_03_50_1759_5076_2021_03_52_1759_5077_2021_03_56_1759_5080_2021_03_58_1759_5081_2021_03_62_1759_5082_2021_03_64_1759_5083_2021_03_66_1759_5084_2021_03_68_17"
  },
  {
    "id": 1666,
    "db_id": "institution_sports",
    "question": "Return the total number of championships of institutions that have a Public affiliation.",
    "answer": "SELECT COUNT(*) AS TotalChamps"
  },
  {
    "id": 1667,
    "db_id": "institution_sports",
    "question": "What are different types of affiliations of institutions and the corresponding number of institutions?",
    "answer": "SELECT * FROM Affiliation_1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
  },
  {
    "id": 1668,
    "db_id": "institution_sports",
    "question": "How many institutions are there for each type of affiliation?",
    "answer": "SELECT type, COUNT(*) FROM institution_dataGROUPByaffiliation_type.ORDERBycountDESC"
  },
  {
    "id": 1669,
    "db_id": "institution_sports",
    "question": "What is the most common type of affiliation for institutions?",
    "answer": "SELECT Choice"
  },
  {
    "id": 1670,
    "db_id": "institution_sports",
    "question": "Return the most common type of affiliation across all institutions.",
    "answer": "SELECT name FROM affiliated_type_tableGROUP_byinstitution_idORDER_by_countLIMIT1.SELECT AS name, COUNTARDIFNAMEJOINferredTOGROUPByinstitution_idCOUNTASCOUNTARDIFNAMEASINSTINCTASCOUNTFROMaid2JOINaid3ONaid2.referencedbyaid3ID INNER JOIN afixtableONaid2.fixtableidaid2_idID AS afixtableID ON afixtable.id IN (SELECT aid FROM afixtableGROUP_byaid_idORDER_bycountLIMIT1.SELECT AS name, COUNTARDIFNAMEJOINferredTOGROUPByinstitution_idCOUNTASCOUNTARDIFNAMEASINSTINCTASCOUNTFROMaid2JOINaid3ONaid2.referencedbyaid3ID INNER JOIN afixtableONaid2.fixtableidaid2_idID AS afixtableID ON afixtable.id IN (SELECT aid FROM afixtableGROUP_byaid_idORDER_bycountLIMIT1.SELECT AS name, COUNTARDIFNAMEJOINferredTOGROUPByinstitution_idCOUNTASCOUNTARDIFNAMEASINSTINCTASCOUNTFROMaid2JOINaid3ONaid2.referencedbyaid3ID INNER JOIN afixtableONaid2.fixtableidaid2_idID AS afixtableID ON afixtable.id IN (SELECT aid FROM afixtableGROUP_byaid_idORDER_bycountLIMIT1.SELECT AS name, COUNTARDIFNAMEJOINferredTOGROUPByinstitution_idCOUNTASCOUNTARDIFNAMEASINSTINCTASCOUNTFROMaid2JOINaid3ONaid2.referencedbyaid3ID INNER JOIN afixtableONaid2.fixtableidaid2_idID AS afixtableID ON afixtable.id IN (SELECT aid FROM afixtableGROUP_byaid_idORDER_bycountLIMIT1.SELECT AS name, COUNTARDIFNAMEJOINferredTOGROUPByinstitution_idCOUNTASCOUNTARDIFNAMEASINSTINCTASCOUNTFROMaid2JOINaid3ONaid2.referencedbyaid3ID INNER JOIN afixtableONaid2.fixtableidaid2_idID AS afixtableID ON afixtable.id IN (SELECT aid FROM afixtableGROUP_byaid_idORDER_bycountLIMIT1.SELECT AS name, COUNTARDIFNAMEJOINferredTOGROUPByinstitution_idCOUNTASCOUNTARDIFNAMEASINSTINCTASCOUNTFROMaid2JOINaid3ONaid2.referencedby"
  },
  {
    "id": 1671,
    "db_id": "institution_sports",
    "question": "In which years were more than one institution founded?",
    "answer": "SELECT YEAR FROM universities_table_nameGROUPINGByinstitution_nameORDERBYCOUNTLIMIT1.Select"
  },
  {
    "id": 1672,
    "db_id": "institution_sports",
    "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
    "answer": "SELECT years FROM year_of_founded_institutes_2023ORDERBYcreated_atascendingLIMIT500.HAVINGcount INNER JOIN year_of_founded_institutes_2023Year__1Year__2ONyear_of_founded_institutes_2023Year__1Year__2__id__1__ORyear_of_founded_institutes_2023Year__2__id__2__ORyear_of_founded_institutes_2023Year__2__id__3__RETURNTO_year_of_founded_institutes_2023.RETURNING  AS RETURN  AS RETURN ON RETURN  < 5"
  },
  {
    "id": 1673,
    "db_id": "institution_sports",
    "question": "List the nicknames of institutions in descending order of capacity.",
    "answer": "SELECT Name FROM INstitutionsGROUPHAVING_capacityINQMoreThan2000GROUPORDERBYNAMEDESCLIMITNARGSN1.SELECT"
  },
  {
    "id": 1674,
    "db_id": "institution_sports",
    "question": "What are the nicknames of institutions, ordered descending by their capacities?",
    "answer": "SELECT ively"
  },
  {
    "id": 1675,
    "db_id": "institution_sports",
    "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1676,
    "db_id": "institution_sports",
    "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
    "answer": "SELECT name FROM enrollmentsWHERE_city_institutes_1_name_in_vancouver_OR_city_institutes_2_name_in_calgai_2.ensemble"
  },
  {
    "id": 1677,
    "db_id": "institution_sports",
    "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
    "answer": "SELECT Provinces FROM ProvincesTable2021WHEREYear2021GT2023GROUPHAVINGYear2021GT2023ORYear2021GT2024ORYear2021GT2025ORYear2021GT2026ORYear2021GT2027ORYear2021GT2028ORYear2021GT2029ORYear2022ORYear2023GROUPORDERByProvincesORDERBYProvincesNameASCLIMIT10.SELECT"
  },
  {
    "id": 1678,
    "db_id": "institution_sports",
    "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
    "answer": "SELECT THEPROvinces"
  },
  {
    "id": 1679,
    "db_id": "institution_sports",
    "question": "How many distinct provinces are the institutions in?",
    "answer": "SELECT ANSWER"
  },
  {
    "id": 1680,
    "db_id": "institution_sports",
    "question": "Count the number of different provinces that have institutions.",
    "answer": "SELECT COUNT(DISTINCTprovince) FROM province_info.ITS"
  },
  {
    "id": 1681,
    "db_id": "warehouse_1",
    "question": "Select all details of all warehouses.",
    "answer": "SELECT warehouse_name, COUNT(*) FROM warehousesGROUPHAVINGSUMigkeit_hours_in_weekgeq500.INSERT"
  },
  {
    "id": 1682,
    "db_id": "warehouse_1",
    "question": "What is all the information about the warehouses?",
    "answer": "SELECT name"
  },
  {
    "id": 1683,
    "db_id": "warehouse_1",
    "question": "Find all different contents stored in New York.",
    "answer": "SELECT name, file_path FROM new_york_filestore_filesWHERE.location INNER JOIN location_2.new_york_filestore_files ON location_1.id = location_2.id"
  },
  {
    "id": 1684,
    "db_id": "warehouse_1",
    "question": "What are all the different contents stored in boxes in New York?",
    "answer": "SELECT boxes"
  },
  {
    "id": 1685,
    "db_id": "warehouse_1",
    "question": "Select contents of all boxes with a value larger than $150.",
    "answer": "SELECT box"
  },
  {
    "id": 1686,
    "db_id": "warehouse_1",
    "question": "What are the contents of boxes with value greater than 150?",
    "answer": "SELECT name"
  },
  {
    "id": 1687,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
    "answer": "SELECT Warehouse, AVG(AvgBox) FROM warehouses.ensemble GROUP BY Warehouse"
  },
  {
    "id": 1688,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes for each warehouse?",
    "answer": "SELECT AVG(price) FROM warehouses.GROUPbywarehouse"
  },
  {
    "id": 1689,
    "db_id": "warehouse_1",
    "question": "Find the average and total values of all boxes.",
    "answer": "SELECT AVG(box_size) FROM boxes.boxes"
  },
  {
    "id": 1690,
    "db_id": "warehouse_1",
    "question": "What are the average and total values across all boxes?",
    "answer": "SELECT A"
  },
  {
    "id": 1691,
    "db_id": "warehouse_1",
    "question": "Find the average and total capacity of all warehouses.",
    "answer": "SELECT SUM(capacity) AS total_capacity, AVG(capacity) AS avg_capacity FROM warehouse_data.ensemble"
  },
  {
    "id": 1692,
    "db_id": "warehouse_1",
    "question": "What are the average and total capacities across all warehouses?",
    "answer": "SELECT SUM(CASEWhenWarehousingNameLikeLOOKUPweiseinerCEWATERLOGISLIKEREPLACEDORREGIONLIKECONCATENATELIKEREPLACELOOKUPweiseinerCEWATERLOGISLIKEREPLACEDORREGIONLIKECONCATENATELIKEREPLACELOOKUPweiseinerCEWATERLOGISLIKEREPLACEDORREGIONLIKECONCATENATELikeREPLACELOOKUPweiseinerCEWATERLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWATERLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWATERLOGISLIKEREPLACEDORREGIONLIKECONCATENATELikeREPLACELOOKUPweiseinerCEWATERLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWATERLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGIONLIKECONCATENATELikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWATERLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGIONLIKECONCATENATElikeREPLACELOOKUPweiseinerCEWWaterLOGISLIKEREPLACEDORREGION"
  },
  {
    "id": 1693,
    "db_id": "warehouse_1",
    "question": "Find the average and maximum value for each different content.",
    "answer": "SELECT column_name FROM table_nameGROUP_bycolumn_nameORDER_byvalue_sumdescLIMIT_num.INSERT \n\nINNER JOIN ON.content_id_column_id \n\n  \t\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 "
  },
  {
    "id": 1694,
    "db_id": "warehouse_1",
    "question": "What are the average and maximum values for each type of content in boxes?",
    "answer": "SELECT T2.content_type, AVG(T1.content_content_length) AS avg_content_length, MAX(T1.content_content_length) AS max_content_length"
  },
  {
    "id": 1695,
    "db_id": "warehouse_1",
    "question": "Find the content that has the highest total values in all boxes.",
    "answer": "SELECT box FROM box_data_b2019_h2020_c1b3853723732364_2020_2020_c1d457741_2020_2020_c1e3e2001_2020_2020_c29e4b5e01_2020_2020_c32c82a7_2020_2020_c29c82a7_2020_2020_c39c82a7_2020_2020_c44c821_2020_2020_c56c843_2020_2020_c44c843_2020_2020_c46c843_2020_2020_c59c84a7_2020_2020_c5c84a7_2020_2020_c5c84a7_2020_2020_c6c843_2020_2020_c6c843_2020_2020_c6c843_2020_2020_c7c84a7_2020_2020_c8c44a7_2020_2020_c9c84a7_2020_2020_c10c84a7_2020_2020_2020_c11c84a7_2020_2020_2020_2020_c12c84a7_2020_2020_2020_2020_2020_2020_2020_2020_2020_2020_2020_2020_2020_20"
  },
  {
    "id": 1696,
    "db_id": "warehouse_1",
    "question": "What is the content with the greatest value across all boxes?",
    "answer": "SELECT Box"
  },
  {
    "id": 1697,
    "db_id": "warehouse_1",
    "question": "Select the average value of all the boxes.",
    "answer": "SELECT AVG(Bbox) FROM BoxBboxes.IFERROR"
  },
  {
    "id": 1698,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes?",
    "answer": "SELECT II"
  },
  {
    "id": 1699,
    "db_id": "warehouse_1",
    "question": "Select all distinct contents in all the boxes.",
    "answer": "SELECT *"
  },
  {
    "id": 1700,
    "db_id": "warehouse_1",
    "question": "What are the different contents in boxes?",
    "answer": "SELECT THE                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   "
  },
  {
    "id": 1701,
    "db_id": "warehouse_1",
    "question": "Find the number of all distinct contents in all the boxes.",
    "answer": "SELECT BY"
  },
  {
    "id": 1702,
    "db_id": "warehouse_1",
    "question": "How many different contents are stored in boxes?",
    "answer": "SELECT A"
  },
  {
    "id": 1703,
    "db_id": "warehouse_1",
    "question": "Find all distinct locations of warehouses.",
    "answer": "SELECT * FROM warehouse_location_table.ORDER"
  },
  {
    "id": 1704,
    "db_id": "warehouse_1",
    "question": "What are the different locations of warehouses?",
    "answer": "SELECT Location"
  },
  {
    "id": 1705,
    "db_id": "warehouse_1",
    "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
    "answer": "SELECT warehouse_name, box_type FROM warehouses.warehouse WHERE warehouse_location IN (SELECT warehouse_id FROM warehouses.warehouse WHERE location IN (SELECT location FROM locations.location WHERE city='Chicago' ORDER BY location)) ORDER BY location"
  },
  {
    "id": 1706,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
    "answer": "SELECT Code FROM warehouses_code_2017_hws_in_chicagawhoices_code_2017_hws_in_newyorkAnswer.INSERT"
  },
  {
    "id": 1707,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes in the warehouses located at Chicago or New York.",
    "answer": "SELECT COUNT(*) FROM warehouse_location_table.WHERE \n    WHERE city = 'Chicago' ORDER BY warehouse_id"
  },
  {
    "id": 1708,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes located in Chicago or New York?",
    "answer": "SELECT icamente"
  },
  {
    "id": 1709,
    "db_id": "warehouse_1",
    "question": "Find all contents present in warehouses located in Chicago and those located in New York.",
    "answer": "SELECT name, SUM(quantity) FROM warehouse_location_tablejoinwarehouse_location_tableONwarehouse_location_table.wardle_id INNER JOIN warehouse_location_tableONwarehouse_location_table.wardle_id ON warehouse_location_table.wardle_id IN (SELECT LEAD_ID FROM (SELECT COUNT(*) AS total_count FROM warehouse_location_tablejoinWarehouse_location_tableONWarelocation_table.wardle_id WHERE warehouse_location_table.wardle_id = 3600)) GROUP BY name"
  },
  {
    "id": 1710,
    "db_id": "warehouse_1",
    "question": "Find the contents that are stored in both Chicago and New York.",
    "answer": "SELECT name, location"
  },
  {
    "id": 1711,
    "db_id": "warehouse_1",
    "question": "Find the type of contents that are not in the warehouses located at New York.",
    "answer": "SELECT warehouse_id, name FROM warehouses_location_in_new_york.HER"
  },
  {
    "id": 1712,
    "db_id": "warehouse_1",
    "question": "What types of contents cannot be found in warehouses in New York?",
    "answer": "SELECT name"
  },
  {
    "id": 1713,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "answer": "SELECT * FROM warehouses_hows_waysWHEREWareHouse_IDINACTORIDISACTOR2021010315245678900237895345789006139748462039801383204571463300163667891152378953457890061397484620398013832045714633001636678911523789534578900613974846203980138320457146330016366789115237895345789006139748462039801383204571463300163667891152378953457890061397484620398013832045714633001636678911523789534578900613974846203980138320457146330016366789115237895345789006139748462039801383204571463300163667891152378953457890061397484620398013832045714633001636678911523789534578"
  },
  {
    "id": 1714,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "answer": "SELECT the \n   \n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         "
  },
  {
    "id": 1715,
    "db_id": "warehouse_1",
    "question": "Find the warehouses which store contents Rocks or Scissors.",
    "answer": "SELECT name FROM warehousesWHERERockORScissorsIsOneOfTheValuesRockORScissors.RETURN"
  },
  {
    "id": 1716,
    "db_id": "warehouse_1",
    "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "answer": "SELECT THEREAS"
  },
  {
    "id": 1717,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "answer": "SELECT warehouse_id, name FROM warehouses.WHERE \n   RIGHT JOIN (SELECT warehouse_id, name FROM stores_on_roghts_rights_rights_rights_west20191437613263542300394856993700160785873625171750890234177458303650698323185948127293226351018441083321739813168578071123466974812396515016632988910192644444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"
  },
  {
    "id": 1718,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "answer": "SELECT two"
  },
  {
    "id": 1719,
    "db_id": "warehouse_1",
    "question": "List the code and contents of all boxes sorted by their values.",
    "answer": "SELECT Box FROM BoxOrderingsORDERByBoxValueasc.SELECT  ORDER BY BoxName ASC"
  },
  {
    "id": 1720,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?",
    "answer": "SELECT boxes"
  },
  {
    "id": 1721,
    "db_id": "warehouse_1",
    "question": "Find the code and contents of the box with the lowest value.",
    "answer": "SELECT MIN(val) FROM box_with_lowest_value.boxes"
  },
  {
    "id": 1722,
    "db_id": "warehouse_1",
    "question": "What is the code and contents for the box that has the smallest value?",
    "answer": "SELECT * FROM Box.boxes WHERE Box.box_id = 1"
  },
  {
    "id": 1723,
    "db_id": "warehouse_1",
    "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
    "answer": "SELECT DISTINCT box_id FROM boxesales_tableGROUPING_by.box_id ORDER BY value DESC LIMIT 1"
  },
  {
    "id": 1724,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
    "answer": "SELECT THEboxes"
  },
  {
    "id": 1725,
    "db_id": "warehouse_1",
    "question": "List all different types of contents ordered by contents.",
    "answer": "SELECT DISTINCT contents"
  },
  {
    "id": 1726,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes, ordered alphabetically?",
    "answer": "SELECT box"
  },
  {
    "id": 1727,
    "db_id": "warehouse_1",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "answer": "SELECT BoxNumber FROM BoxTable3B2H1633020644343456798991000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1728,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "answer": "SELECT RANK"
  },
  {
    "id": 1729,
    "db_id": "warehouse_1",
    "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
    "answer": "SELECT Box_ID FROM Box_Cards_BehindScissorsContentOrderWHEREBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORscissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORscissorsBox_IDodiORISINORSCissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORISINORscissorsBox_IDodiORIS"
  },
  {
    "id": 1730,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  "
  },
  {
    "id": 1731,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes stored in the warehouse with the largest capacity.",
    "answer": "SELECT MAX(Tbl_Case) FROM boxes_tbl_cases.boxes WHERE capacity > (SELECT MAX(capacity) FROM boxes_tbl_cases.boxes WHERE capacity = 0)"
  },
  {
    "id": 1732,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1733,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.",
    "answer": "SELECT warehouse_code, AVG(value_of_boxes) FROM warehousesGROUPHAVINGAVGvalueOf_boxesgt150.conn"
  },
  {
    "id": 1734,
    "db_id": "warehouse_1",
    "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?",
    "answer": "SELECT the                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     "
  },
  {
    "id": 1735,
    "db_id": "warehouse_1",
    "question": "Find the total value and number of boxes for each content type.",
    "answer": "SELECT T2.Value, COUNT(*) AS TotalValue FROM ContentTypesAsValuesT2.joinContentTypesAsValuesC3 GROUP BY T1.Name"
  },
  {
    "id": 1736,
    "db_id": "warehouse_1",
    "question": "For each content, what is the total value and number of boxes?",
    "answer": "SELECT Total.value FROM ContentGROUPByContent_id.orderedByCount"
  },
  {
    "id": 1737,
    "db_id": "warehouse_1",
    "question": "Find the total, average, and maximum capacity for different locations.",
    "answer": "SELECT MAX_capacity, AVG_capacity, SUM_capacity FROM Location_table.gis"
  },
  {
    "id": 1738,
    "db_id": "warehouse_1",
    "question": "For each location, what are the total, average, and maximum capacities of warehouses?",
    "answer": "SELECT warehouse_name FROM warehousesGROUPBylocation.Howdo INNER JOIN thewarehouse_grouped_data_with_location_to_recalculate_wwc_capacity_table.onyI ON warehouse_id = location.id"
  },
  {
    "id": 1739,
    "db_id": "warehouse_1",
    "question": "Find the total capacity of all warehouse locations.",
    "answer": "SELECT SUM(T1.WarshipLocationID) FROM WarehouseLocationT1JoinWarehouseLocationT2ONW1.WarshipLocationIDW1 INNER JOIN WarehouseLocationT3ONW2.WarshipLocationIDW2 ON T1.WarshipLocationID = T3.WarshipLocationID"
  },
  {
    "id": 1740,
    "db_id": "warehouse_1",
    "question": "What is the total capacity of all warehouses?",
    "answer": "SELECT IVE"
  },
  {
    "id": 1741,
    "db_id": "warehouse_1",
    "question": "Find the value of the most expensive boxes saved in each warehouse location.",
    "answer": "SELECT * FROM warehousesalesalesboxesORDERED_by.box_price LIMIT 1"
  },
  {
    "id": 1742,
    "db_id": "warehouse_1",
    "question": "For each warehouse location, what is the value of the most expensive box?",
    "answer": "SELECT MAX(val) FROM warehouse_location_values.why"
  },
  {
    "id": 1743,
    "db_id": "warehouse_1",
    "question": "Select the warehouse codes along with the number of boxes in each warehouse.",
    "answer": "SELECT Warehouse, COUNT(*) FROM warehousesGROUPByWarehousesORDERBYCountLIMIT1.How"
  },
  {
    "id": 1744,
    "db_id": "warehouse_1",
    "question": "How many boxes are there with each warehouse ?",
    "answer": "SELECT COUNT(*) FROM warehousesGROUPBywarehouseORDERBYCountLIMIT100.Thought"
  },
  {
    "id": 1745,
    "db_id": "warehouse_1",
    "question": "Find the number of different locations where Rocks are stored.",
    "answer": "SELECT COUNT(DISTINCT_location) FROM rocks_tableGROUP_by_location_id.ORDERBy_distance;"
  },
  {
    "id": 1746,
    "db_id": "warehouse_1",
    "question": "In how many different warehouses are Rocks stored within boxes?",
    "answer": "SELECT BY"
  },
  {
    "id": 1747,
    "db_id": "warehouse_1",
    "question": "Select the code of each box, along with the name of the city the box is located in.",
    "answer": "SELECT boxes"
  },
  {
    "id": 1748,
    "db_id": "warehouse_1",
    "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?",
    "answer": "SELECT BoxCode, WarehouseName FROM BoxesORDERByBoxCodeASCLIMIT100.Answer"
  },
  {
    "id": 1749,
    "db_id": "warehouse_1",
    "question": "Select the codes of all the boxes located in Chicago.",
    "answer": "SELECT BoxNumber, Code FROM ChicagoBoxes.ash"
  },
  {
    "id": 1750,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in Chicago?",
    "answer": "SELECT Code FROM BoxesStore_in_Chicago.ella"
  },
  {
    "id": 1751,
    "db_id": "warehouse_1",
    "question": "Find the number of boxes saved in each warehouse.",
    "answer": "SELECT DISTINCT wname FROM warehouse_wise_data.wdata WHERE wcode = 'w2019-06-30'"
  },
  {
    "id": 1752,
    "db_id": "warehouse_1",
    "question": "How many boxes are stored in each warehouse?",
    "answer": "SELECT Case"
  },
  {
    "id": 1753,
    "db_id": "warehouse_1",
    "question": "Find the number of distinct types of contents in each warehouse.",
    "answer": "SELECT COUNT(*) AS count FROM warehouse_data.warehouse \nGROUP BY warehouse_id"
  },
  {
    "id": 1754,
    "db_id": "warehouse_1",
    "question": "How many different types of contents are stored in each warehouse?",
    "answer": "SELECT COUNT(*) FROM warehouse_info.warehouse_type;"
  },
  {
    "id": 1755,
    "db_id": "warehouse_1",
    "question": "Select the codes of all warehouses that are above capacity.",
    "answer": "SELECT * FROM warehouses_who_capacity_2019.ctl WHERE warehouse_capacity >= 4"
  },
  {
    "id": 1756,
    "db_id": "warehouse_1",
    "question": "What are the codes of warehouses that have more boxes than their capacity?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1757,
    "db_id": "warehouse_1",
    "question": "Find the total values of boxes that are not in the warehouses located at Chicago.",
    "answer": "SELECT BoxId FROM warehouse_boxes.wkl WHERE Location = 'Chicago'"
  },
  {
    "id": 1758,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes contained in any location but Chicago?",
    "answer": "SELECT icamente"
  },
  {
    "id": 1759,
    "db_id": "university_rank",
    "question": "Show name, city, and state for all universities in  alphabetical order of university name.",
    "answer": "SELECT COUNT(*) AS count FROM universities.ORDER"
  },
  {
    "id": 1760,
    "db_id": "university_rank",
    "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
    "answer": "SELECT FROM"
  },
  {
    "id": 1761,
    "db_id": "university_rank",
    "question": "How many universities are in Illinois or Ohio?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1762,
    "db_id": "university_rank",
    "question": "What is the total number of universities located in Illinois or Ohio?",
    "answer": "SELECT COUNT(DISTINCTUniversity) FROM University.Where INNER JOIN StateOnUniversityOnCityWHEREILinoisStateCodeIs41076AndOHIOStateCodeIs45385.AndIINERJOINUniversity ON StateOnUniversityOnCityWHEREILinoisStateCodeIs41076AndOHIOStateCodeIs45385.AndIINERJOINUniversityOnStateOnUniversityOnCityWHEREILinoisStateCodeIs41076AndOHIOStateCodeIs45385.Answering                                                                                                                                                                                                                                                                                                                                                                                                "
  },
  {
    "id": 1763,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for universities?",
    "answer": "SELECT maxEnroll, avgEnroll, minEnroll FROM university_enrollmentsGROUP_CONCATENATEHAVINGenseholderID.in GROUP BY university_enrollments"
  },
  {
    "id": 1764,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for all universities?",
    "answer": "SELECT enrollment FROM universityatura_data_tableGROUP_CONCATENATEENrollments_byUniversity.sector WHERE universityatura_data_table.sector = 'All' GROUP BY enrollment ORDER BY enrollment DESC LIMIT 10;"
  },
  {
    "id": 1765,
    "db_id": "university_rank",
    "question": "List team name for all universities with enrollments above the average.",
    "answer": "SELECT t.name"
  },
  {
    "id": 1766,
    "db_id": "university_rank",
    "question": "What are the names of all teams from universities that have more people enrolled than average ?",
    "answer": "SELECT Name"
  },
  {
    "id": 1767,
    "db_id": "university_rank",
    "question": "Show all home conferences.",
    "answer": "SELECT name, title FROM home_conferences.ORDER"
  },
  {
    "id": 1768,
    "db_id": "university_rank",
    "question": "What are the different home conferences from the university table?",
    "answer": "SELECT DISTINCT Homeconference"
  },
  {
    "id": 1769,
    "db_id": "university_rank",
    "question": "Show all home conferences and the number of universities in each conference.",
    "answer": "SELECT title, COUNT(*) FROM home_conferencesGROUPByconference_nameHAVING_num_of_uscisISNULL.ORDER_by_countLIMIT 1"
  },
  {
    "id": 1770,
    "db_id": "university_rank",
    "question": "For every home conference, how many universities attended that conference?",
    "answer": "SELECT COUNT(*) FROM home_conferencesGROUP_byUniversity_nameHAVINGcountLIMIT10.SELECTDISTINCTUniversity_name"
  },
  {
    "id": 1771,
    "db_id": "university_rank",
    "question": "Which state has most number of universities?",
    "answereLELELELELE_leLELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELLELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELELLELE_leLELELELEleLEEleLELELELELELELE"
  },
  {
    "id": 1772,
    "db_id": "university_rank",
    "question": "What is the state with the most universities?",
    "answer": "SELECT A"
  },
  {
    "id": 1773,
    "db_id": "university_rank",
    "question": "Show all home conferences with average enrollment of universities above 2000.",
    "answer": "SELECT title, conference_name, conference_date"
  },
  {
    "id": 1774,
    "db_id": "university_rank",
    "question": "What are the home conferences that have an average university enrollment above 2000?",
    "answer": "SELECT HomeConferences FROM HomeConferencesGROUPHAVINGUniversityEnrollmentsAbove2000.SortOrder"
  },
  {
    "id": 1775,
    "db_id": "university_rank",
    "question": "Which conference has the least number of total enrollment?",
    "answer": "SELECT WHERE"
  },
  {
    "id": 1776,
    "db_id": "university_rank",
    "question": "What are the home conferences with the fewest number of people enrolled?",
    "answer": "SELECT Name"
  },
  {
    "id": 1777,
    "db_id": "university_rank",
    "question": "List all major name and major code in the order of their major code",
    "answer": "SELECT MajorName FROM MajorCodeGROUPHAVINGMajorCodeISINCA2010GROUPHAVINGMajorCodeISINCA2015GROUPHAVINGMajorCodeISINCA2019GROUPHAVINGMajorCodeISINCA2018GROUPHAVINGMajorCodeISINCA2020GROUPHAVINGMajorCodeISINCA2030GROUPHAVINGMajorCodeISINCA2040GROUPHAVINGMajorCodeISINCA2050GROUPHAVINGMajorCodeISINCA2060GROUPHAVINGMajorCodeISINCA2070GROUPHAVINGMajorCodeISINCA2080GROUPHAVINGMajorCodeISINCA2090GROUPHAVINGMajorCodeISINCA2100GROUPHAVINGMajorCodeISINCA2110GROUPHAVINGMajorCodeISINCA2120GROUPHAVINGMajorCodeISINCA2130GROUPHAVINGmajorCodeISINCA2140GROUPHAVINGMajorCodeISINCA2150GROUPHAVINGMajorCodeISINCA2160GROUPHAVINGMajorCodeISINCA2170GROUPHAVINGMajorCodeISINCA2180GROUPHAVINGMajorCodeISINCA2190GROUPHAVINGMajorCodeISINCA2200GROUPHAVINGMajorCodeISINCA2210GROUPHAVINGMajorCodeISINCA2220GROUPHAVINGMajorCodeISINCA2230GROUPHAVINGMajorCodeISINCA2240GROUPHAVINGMajorCodeISINCA2250GROUPHAVINGMajorCodeISINCA2260GROUPHAVINGMajorCodeISINCA2270GROUPHAVINGMajorCodeISINCA2280GROUPHAVINGMajorCodeISINCA2290GROUPHAVINGMajorCodeISINCA2300GROUPHAVINGMajorCodeISINCA2310GROUPHAVINGMajorCodeISINCA2320GROUPHAVINGMajorCodeISINCA2330GROUPHAVINGMajorCodeISINCA2340GROUPHAVINGMajorCodeISINCA2350GROUPHAVINGMajorCodeISINCA2360GROUPHAVINGMajorCodeISINCA2370GROUPHAVINGmajorCodeISINCA2380"
  },
  {
    "id": 1778,
    "db_id": "university_rank",
    "question": "What are the names and codes for all majors ordered by their code?",
    "answer": "SELECT BY"
  },
  {
    "id": 1779,
    "db_id": "university_rank",
    "question": "Show all majors and major ranks for the university with name Augustana College.",
    "answer": "SELECT Majors, MajorRanks FROM Augustana_CollegeJoiningSchoolshipsWHEREUniversityNameSEquencesTOeqnamesSEquencesSEquencesSEquencesSEQUencesSEQUencesSEQUencesSEquencesSEQUencesSEquencesSEQUencesSEquencesSEQUencesSEquencesSEQUencesSEquencesSEQUencesSEQUencesSEQuencesSEQUencesSEquencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEquencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEQUencesSEquencesSE"
  },
  {
    "id": 1780,
    "db_id": "university_rank",
    "question": "What are the ranks and names of all majors at Augustana College?",
    "answer": "SELECT * FROM majornames.WHERECampName INNER JOIN majornamescampuses_oncampus_name_withCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinOrCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinOrCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinOrCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinOrCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinOrCampName_name_ininnerJoinOrCampName_name_ininnerJoinORCampName_name_ininnerJoinOrCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinORCampName_name_ininnerJoinOrCampName_name_ininnerJoinOrCamp"
  },
  {
    "id": 1781,
    "db_id": "university_rank",
    "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
    "answer": "SELECT u.name, c.city, s.state FROM universities_of_abcrank_1_tableu.head LIMIT 1"
  },
  {
    "id": 1782,
    "db_id": "university_rank",
    "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
    "answer": "SELECT MAX(numbers) FROM accountingmajorORDEREDBYANKS.Count LIMIT 1"
  },
  {
    "id": 1783,
    "db_id": "university_rank",
    "question": "What is the name of the university that has most number of majors with rank 1?",
    "answer": "SELECT universities"
  },
  {
    "id": 1784,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most majors ranked number 1?",
    "answer": "SELECT major"
  },
  {
    "id": 1785,
    "db_id": "university_rank",
    "question": "Show all university names without a major with rank 1?",
    "answer": "SELECT university"
  },
  {
    "id": 1786,
    "db_id": "university_rank",
    "question": "What are the names of all universities without any majors ranked number 1?",
    "answer": "SELECT IN"
  },
  {
    "id": 1787,
    "db_id": "university_rank",
    "question": "Show all university names with both major Accounting and major Urban Education.",
    "answer": "SELECT u_name FROM universities_class_info_class_2u2u3u1u6u1u8u7u4u7u5u1u6u1u8u7u8u4u7u7u5u2u6u4u7u6u7u9u8u6u9u7u6u7u8u3u4u5u6u8u7u4u8u7u7u7u1u6u1u7u6u2u4u6u7u8u4u7u7u5u2u8u7u6u5u2u8u7u6u3u9u8u8u4u7u9u8u8u4u8u7u7u1u7u7u6u1u4u8u8u8u8u7u1u7u6u6u8u5u6u6u7u8u6u3u9u8u7u6u6u4u6u7u7u8u8u7u7u7u1u7u7u6u6u8u7u7u7u3u4u5u6u8u7u6u7u8u6u9u8u8u8u8u6u8u8u8u8u4u8u8u7u8u7u1u7u7u6u8u4u7u7u7u7u1u6u5u8u7u8u8u7u7u8u7u7u8u3u4u5u6u8u7u7u8u9u8u8u7u8u4u8u7u7u7u1u7u7u6u8u7u7u8u7u7u1u7u6u6u8u7u7u3u4u5u6u8u7u6u7u7u8u8u8u7u8u8u7u8u4u8u8u8u8u8u7u7u7u1u7u6u8u7u8u8u"
  },
  {
    "id": 1788,
    "db_id": "university_rank",
    "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
    "answer": "SELECT ANAME FROM Universities.ABC"
  },
  {
    "id": 1789,
    "db_id": "university_rank",
    "question": "What is the name and overall ranking of universities in Wisconsin state?",
    "answer": "SELECT name FROM universityatura.ITS"
  },
  {
    "id": 1790,
    "db_id": "university_rank",
    "question": "What is the name and rank of every university in Wisconsin?",
    "answer": "SELECT name, rank FROM universities_in_wisconsin.SELECT"
  },
  {
    "id": 1791,
    "db_id": "university_rank",
    "question": "What is the university name with highest research point?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1792,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most research points?",
    "answer": "SELECT Name"
  },
  {
    "id": 1793,
    "db_id": "university_rank",
    "question": "List all university names in ascending order of their reputation points.",
    "answer": "SELECT u.name, u.reputation_points"
  },
  {
    "id": 1794,
    "db_id": "university_rank",
    "question": "What are the names of all universities in ascending order of reputation points?",
    "answer": "SELECT Uname"
  },
  {
    "id": 1795,
    "db_id": "university_rank",
    "question": "What is the name of university with major Accounting ranked 3 or above?",
    "answer": "SELECT * FROM university_with_major_accountingWHERErankingsRAIDOrderINGOrderINGASCORDERED.THEargest"
  },
  {
    "id": 1796,
    "db_id": "university_rank",
    "question": "What are the names of the university with an Accounting major ranked 3 or higher?",
    "answer": "SELECT University_name, Majors"
  },
  {
    "id": 1797,
    "db_id": "university_rank",
    "question": "What is the total enrollment of universities with a overall rank 5 or below?",
    "answer": "SELECT SUM(USINGRank) FROM universities_with_rank_5_or_below.groupId"
  },
  {
    "id": 1798,
    "db_id": "university_rank",
    "question": "What is the total number of students enrolled in an university with a rank of 5 or below?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1799,
    "db_id": "university_rank",
    "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
    "answer": "SELECT u_name, COUNT(*) AS count FROM universities_classifica_result_r2022_165836491760517333794587_165836491760517333794587_2022_165836491760517333794587_3031_3024_109_444_182_202_202_202_202_109_444_182_176_129_122_129_152_152_153_152_156_166_166_167_167_167_167_167_168_168_169_169_169_169_169_169_172_172_173_173_173_174_174_174_174_175_175_175_178_178_179_179_179_180_180_182_182_182_182_183_183_183_184_184_184_184_185_185_185_185_185_186_186_187_187_187_187_188_188_190_190_190_190_190_190_190_190_190_190_190_190_190_190_190_190_190_190_200_"
  },
  {
    "id": 1800,
    "db_id": "university_rank",
    "question": "What is the name and citation point of the unversities with the top 3 reputation points?",
    "answer": "SELECT universities"
  },
  {
    "id": 1801,
    "db_id": "university_rank",
    "question": "which states do have more than two universities with enrollment smaller than 3000?",
    "answer": "SELECT answer"
  },
  {
    "id": 1802,
    "db_id": "university_rank",
    "question": "What are the states that have more than 2 universities with an enrollment less than 3000?",
    "answer": "SELECT state"
  },
  {
    "id": 1803,
    "db_id": "movie_2",
    "question": "Find the titles of movies that don\u2019t have any rating.",
    "answer": "SELECT movie"
  },
  {
    "id": 1804,
    "db_id": "movie_2",
    "question": "What are the names of movies that do not have any ratings?",
    "answer": "SELECT *"
  },
  {
    "id": 1805,
    "db_id": "movie_2",
    "question": "Find the names of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT A"
  },
  {
    "id": 1806,
    "db_id": "movie_2",
    "question": "What are names of movies that have a 'G' ratings?",
    "answer": "SELECT IN"
  },
  {
    "id": 1807,
    "db_id": "movie_2",
    "question": "Find the title of the movie that is played in the Odeon theater.",
    "answer": "SELECT Title FROM MoviesWHERE.osodeONTHEATER INNER JOIN theaters_onOsODEONTHEATER_id_17249680235477301054934111442932937132566054318054273820789170489111079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171107917110791711079171"
  },
  {
    "id": 1808,
    "db_id": "movie_2",
    "question": "What are the movie titles for ones that are played in the Odeon theater?",
    "answer": "SELECT name"
  },
  {
    "id": 1809,
    "db_id": "movie_2",
    "question": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
    "answer": "SELECT Name FROM TheatreTVSHOWs.JOINTHEATERSTUDYSTAS AS TSTU WHERE TSTU.TID = (SELECT TSTU.TID FROM TheatreTVSHOWs.TVShow WHERE Shows.TVShowID = 1) GROUP BY TSTU.TID"
  },
  {
    "id": 1810,
    "db_id": "movie_2",
    "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
    "answer": "SELECT name FROM movie_info.INSERT \n    AS NEWMovie, ASNEWMovieID.newmovie AS MovieName, ASNEWMovieID.newmovie AS TheaterName"
  },
  {
    "id": 1811,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is \u2018G\u2019.",
    "answer": "SELECT YES ORDER BY NO"
  },
  {
    "id": 1812,
    "db_id": "movie_2",
    "question": "How many movies had a 'G' rating?",
    "answer": "SELECT COUNT(*) FROM movie_100_1989_2023_m1477_g_1566_2023_m1477_g_1646_2023_m1477_g_1746_2023_m1477_g_1846_2023_m1477_g_1946_2023_m1477_g_2054_4023_m1477_g_2066_2023_m1477_g_2076_2023_m1477_g_2109_785_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_1992_199"
  },
  {
    "id": 1813,
    "db_id": "movie_2",
    "question": "How many movies are playing across all theaters?",
    "answer": "SELECT COUNT(*) FROM movie_table.ardi"
  },
  {
    "id": 1814,
    "db_id": "movie_2",
    "question": "How many movies are playing in theaters?",
    "answer": "SELECT ively"
  },
  {
    "id": 1815,
    "db_id": "movie_2",
    "question": "How many distinct movies are on in theaters?",
    "answer": "SELECT COUNT(DISTINCTmovie_id) FROM theaters_and_movies.OUTPUT"
  },
  {
    "id": 1816,
    "db_id": "movie_2",
    "question": "How many different movies are playing?",
    "answer": "SELECT BY"
  },
  {
    "id": 1817,
    "db_id": "movie_2",
    "question": "How many distinct movie theaters are there?",
    "answer": "SELECT ively"
  },
  {
    "id": 1818,
    "db_id": "movie_2",
    "question": "How many different movie theaters exist?",
    "answer": "SELECT BY"
  },
  {
    "id": 1819,
    "db_id": "movie_2",
    "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
    "answer": "SELECT THE RIGHT OUTER JOIN VALUES.THAT_movies\n\n AS A\n  AS B ON C\n   =\n  A"
  },
  {
    "id": 1820,
    "db_id": "movie_2",
    "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
    "answer": "SELECT OUTPUT"
  },
  {
    "id": 1821,
    "db_id": "movie_2",
    "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
    "answer": "SELECT IN ORDER BY RANK"
  },
  {
    "id": 1822,
    "db_id": "movie_2",
    "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
    "answer": "SELECT themovieaters"
  },
  {
    "id": 1823,
    "db_id": "movie_2",
    "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
    "answer": "SELECT T2.movie FROM T1JOINOdeONASASOTT1ONOdeONASASOTT1.T2Movie AS T1 INNER JOIN ImperialASASOTT1ONImperialASASOTT1.T2Movie AS T2 ON T2.OdeONASASOTT1ID = OdeONASASOTT1.OdeONASASOTT1ID"
  },
  {
    "id": 1824,
    "db_id": "movie_2",
    "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
    "answer": "SELECT Title"
  },
  {
    "id": 1825,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
    "answer": "SELECT * FROM movie_tableJOINTHEATERASONONmovie_idASONEONTHEPATHOFAUSEORDERByimperialization_dateASCLIMIT100.SELECTname"
  },
  {
    "id": 1826,
    "db_id": "movie_2",
    "question": "What movie is playing at both the Odeon and Imperial theater?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1827,
    "db_id": "movie_2",
    "question": "Find the name of all movies that are not played in Odeon theater.",
    "answer": "SELECT Name FROM MovieDetailsmtm2016H2E2014WHEREPerformanceNameInOdeonLawyersP3M0750000018289834221113930934431315841368071415907559055099111426744136960172270579163745977681678510691010120101601016000000010102010160101600000010103011001001001000000011000000001100000000110000000111000000001110000000111000000001110000000011100000001110000000011000000001100000000110000000011000000001110000000011100000000111000000001110000000011100000000111000000001110000000011100000000111000000001110000000011100000000111000000001110000000011100000000111000000"
  },
  {
    "id": 1828,
    "db_id": "movie_2",
    "question": "What are the names of every movie that is not playing at the Odeon theater?",
    "answer": "SELECT * FROM movies.m3"
  },
  {
    "id": 1829,
    "db_id": "movie_2",
    "question": "List in alphabetical order the titles of all movies.",
    "answer": "SELECT movie_title"
  },
  {
    "id": 1830,
    "db_id": "movie_2",
    "question": "What are the movie names in alphabetical order?",
    "answer": "SELECT Name"
  },
  {
    "id": 1831,
    "db_id": "movie_2",
    "question": "Find the titles of all movies sorted by their ratings.",
    "answer": "SELECT movie_name FROM movies.sort_by_rating ORDER BY rating DESC"
  },
  {
    "id": 1832,
    "db_id": "movie_2",
    "question": "What are the movie names sorted by rating?",
    "answer": "SELECT name"
  },
  {
    "id": 1833,
    "db_id": "movie_2",
    "question": "Find the name of the theater that is playing the most number of movies.",
    "answer": "SELECT T2.Name FROM theaters.T2 INNER JOIN theaters.T1 ON theaters.T2.Id = T1.T2Id GROUP BY T2.Name ORDER BY COUNT ASCLIMIT 1;"
  },
  {
    "id": 1834,
    "db_id": "movie_2",
    "question": "What is the name of the theater playing the most movies?",
    "answer": "SELECT name"
  },
  {
    "id": 1835,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is played in the most number of theaters.",
    "answer": "SELECT * FROM moviesitaliaMovieWHEREcountry_code_substring_m245321501ISBLANKLIMIT10000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1836,
    "db_id": "movie_2",
    "question": "What is the name of the film playing at the most number of theaters?",
    "answer": "SELECT the_NAME"
  },
  {
    "id": 1837,
    "db_id": "movie_2",
    "question": "Find the number of movies in each rating.",
    "answer": "SELECT COUNT(*) FROM movie_rating_tableGROUPEDByrating_idHAVINGcountRNAIRATgteq2023.INSERT \n    RIGHT JOIN (SELECT movie_id, COUNT(rater_id)) AS r ON r.movie_id = movie_rating_tablemovie_id GROUP BY movie_id ORDER BY COUNTmovie_id DESC LIMIT 5"
  },
  {
    "id": 1838,
    "db_id": "movie_2",
    "question": "How many movies exist for each rating?",
    "answer": "SELECT movie, COUNT(*) FROM ratingsGROUP_by_ratingHAVINGCOUNTDownLatchEXceeded.Hint"
  },
  {
    "id": 1839,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is not null.",
    "answer": "SELECT COUNT(*) FROM movies_rating_must_notnull.ORDER AS BYrating"
  },
  {
    "id": 1840,
    "db_id": "movie_2",
    "question": "How many movies have a rating that is not null?",
    "answer": "SELECT COUNT(*) FROM movies_rating_ratedWHEREratingisnull.ctl"
  },
  {
    "id": 1841,
    "db_id": "movie_2",
    "question": "Find the name of theaters that has at least one movie playing.",
    "answer": "SELECT T2.Name FROM theatersT2JOINmovieMovieT1ONt2.TID INNER JOIN theaterMovieOntm1.TID ON tm1.TID = ontm1.TID GROUP BY t2.NameHAVINGCOUNTTF2.NameISNOT0"
  },
  {
    "id": 1842,
    "db_id": "movie_2",
    "question": "What are the names of every theater with at least one movie playing?",
    "answer": "SELECT name FROM theater_table_nameGROUPHAVINGHAVINGCOUNTmovieIDISINSELECTMINmovieIDFROMmovie_table_nameGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVINGCOUNTmovieIDISINSELECTMINmovieIDGROUPHAVgingCOUNTmovieID"
  },
  {
    "id": 1843,
    "db_id": "movie_2",
    "question": "Select the name of all movie theaters that are not currently showing a movie.",
    "answer": "SELECT Name FROM movie_towners.WHEREStatus INNER JOIN showingsONshowings.mshowidShowIDShowIDShowNameShowNameShowIDShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowShow \n   AS ABA AS BCA ON RETURN IN (SELECT * FROM movie_towners.WHEREStatus INNER JOIN showingsONshowings.mshowidShowIDShowIDShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowNameShowName"
  },
  {
    "id": 1844,
    "db_id": "movie_2",
    "question": "What are the names of all cinemas not showing any movies?",
    "answer": "SELECT Name"
  },
  {
    "id": 1845,
    "db_id": "movie_2",
    "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
    "answer": "SELECT A"
  },
  {
    "id": 1846,
    "db_id": "movie_2",
    "question": "What are the names of theaters playing 'G' rated movies?",
    "answer": "SELECT IN"
  },
  {
    "id": 1847,
    "db_id": "movie_2",
    "question": "Select the title of all movies.",
    "answer": "SELECT Title FROM MovieMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieJoinMovieMovieJoinMovieMovieJoinMovieMovieJoinMovieMovieJoinMovieMovieMovieJoinMovieMovieMovieJoinMovieMovieJoinMovieMovieJoinMovieMovieJoinMovieMovieMovieJoinMovieMovieJoinMovieMovieJoinMovieJoinMovieMovieJoinMovieMovieJoinMovieMovieJoinMovieMovieMovieJoinMovieMovieMovieJoinMovieMovieMovieJoinMovieMovieJoinMovieMovieMovieMovieMovieJoinMovieMovieMovieMovieJoinMovieMovieMovieJoinMovieMovieMovieMovieMovieMovieMovieJoinMovieMovieMovieMovieMovieJoinMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieJoinMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieJoinMovieMovieJoinMovieMovieMovieMovieMovieMovieMovieMovieJoinMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovieMovie"
  },
  {
    "id": 1848,
    "db_id": "movie_2",
    "question": "What are all of the movie names?",
    "answer": "SELECT Name FROM Movies.WHEREYear INNER JOIN YearsOnCalendarOnMovieYearedaONYearsOnCalendarOnMovieYearedaIDeda2015.ORDERByNameASCLIMIT2000000000000000010000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1849,
    "db_id": "movie_2",
    "question": "Show all the distinct ratings in the database.",
    "answer": "SELECT DISTINCT r FROM ratings.r"
  },
  {
    "id": 1850,
    "db_id": "movie_2",
    "question": "What are the different movie ratings?",
    "answer": "SELECT movie_id, rating"
  },
  {
    "id": 1851,
    "db_id": "movie_2",
    "question": "Show all information of all unrated movies.",
    "answer": "SELECT title FROM unrated_movies.ORDER"
  },
  {
    "id": 1852,
    "db_id": "movie_2",
    "question": "What is all the information about the unrated movies?",
    "answer": "SELECT title FROM movies_directory.all"
  },
  {
    "id": 1853,
    "db_id": "movie_2",
    "question": "Show the titles of movies not currently being shown in any theaters.",
    "answer": "SELECT movie_title FROM movie_listWHERE.release_date INNER JOIN theater_name_tableOnmovie_list.movie_idJOINrelease_date_table ON theater_name_table.movie_id = movie_list.movie_id"
  },
  {
    "id": 1854,
    "db_id": "movie_2",
    "question": "What are the names of the movies not being shown in any theaters?",
    "answer": "SELECT A.ERLEENB.THOMASC"
  },
  {
    "id": 1855,
    "db_id": "planet_1",
    "question": "Who receieved the heaviest package?",
    "answer": "SELECT tertTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTtTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcomcom"
  },
  {
    "id": 1856,
    "db_id": "planet_1",
    "question": "What is the name of the client who received the heaviest package?",
    "answer": "SELECT icamente"
  },
  {
    "id": 1857,
    "db_id": "planet_1",
    "question": "What is the total weight of all the packages that customer Leo Wong sent?",
    "answer": "SELECT package_id, SUM(weight) FROM packages_weighted_byLeo_wongGROUPbyPackage_idORDERBySUMWeightdescLIMIT1.ansi"
  },
  {
    "id": 1858,
    "db_id": "planet_1",
    "question": "What is the total weight for all packages that Leo Wong sent?",
    "answer": "SELECT SUM(*) FROM package_weightingsLeoWongsend_packageweightingsGROUP_CONCATIONBy_package_idORDER_by_weight_amountLIMIT_1000.what"
  },
  {
    "id": 1859,
    "db_id": "planet_1",
    "question": "What is the position of Amy Wong?",
    "answer": "SELECT RANK"
  },
  {
    "id": 1860,
    "db_id": "planet_1",
    "question": "What position does Amy Wong have?",
    "answer": "SELECT A.erved"
  },
  {
    "id": 1861,
    "db_id": "planet_1",
    "question": "What is Turanga Leela's salary and position?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1862,
    "db_id": "planet_1",
    "question": "What is the salary and position of the employee named Turanga Leela?",
    "answer": "SELECT BY"
  },
  {
    "id": 1863,
    "db_id": "planet_1",
    "question": "What is the average salary of all intern jobs?",
    "answer": "SELECT AVG(salary) FROM internjobs.Answer"
  },
  {
    "id": 1864,
    "db_id": "planet_1",
    "question": "What is the average salary of an intern?",
    "answer": "SELECT AVG(salary) FROM Interns.How"
  },
  {
    "id": 1865,
    "db_id": "planet_1",
    "question": "What level is Physician?",
    "answer": "SELECT level"
  },
  {
    "id": 1866,
    "db_id": "planet_1",
    "question": "What is the clearance level of a physician?",
    "answer": "SELECT ClearanceLevel FROM physicians.ORDER LIMIT 1"
  },
  {
    "id": 1867,
    "db_id": "planet_1",
    "question": "List Package Number of all package sent by Leo Wong?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1868,
    "db_id": "planet_1",
    "question": "What is the number of all packages that Leo Wong sent?",
    "answer": "SELECT COUNT(*) FROM PackageLeoWong.send"
  },
  {
    "id": 1869,
    "db_id": "planet_1",
    "question": "List all package numbers received by Leo Wong ?",
    "answer": "SELECT Package"
  },
  {
    "id": 1870,
    "db_id": "planet_1",
    "question": "What are all of the package numbers received by Leo Wong?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1871,
    "db_id": "planet_1",
    "question": "List all package sent or received by Leo Wong.",
    "answer": "SELECT name, message"
  },
  {
    "id": 1872,
    "db_id": "planet_1",
    "question": "What are all the different package numbers that Leo Wong sent or received?",
    "answer": "SELECT BY"
  },
  {
    "id": 1873,
    "db_id": "planet_1",
    "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
    "answer": "SELECT COUNT(*) FROM Packages.send_to_ogden_wernstrom GROUP BY Package_id, DateSent;"
  },
  {
    "id": 1874,
    "db_id": "planet_1",
    "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1875,
    "db_id": "planet_1",
    "question": "What are the contents of package sent by John Zoidfarb?",
    "answer": "SELECT R"
  },
  {
    "id": 1876,
    "db_id": "planet_1",
    "question": "What are the package contents of all those sent by John Zoidfarb?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1877,
    "db_id": "planet_1",
    "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
    "answer": "SELECT PackageNumber, Weight"
  },
  {
    "id": 1878,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
    "answer": "SELECT NO"
  },
  {
    "id": 1879,
    "db_id": "planet_1",
    "question": "List package number and weight of top 3 lightest packages.",
    "answer": "SELECT * FROM packages_2019_10_2020_h1_r2_b1_r1_c2_s2_p3_r4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_7"
  },
  {
    "id": 1880,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the 3 lightest packages?",
    "answer": "SELECT Package                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             "
  },
  {
    "id": 1881,
    "db_id": "planet_1",
    "question": "Who sent most number of packages? List client name and number of packages sent by that client.",
    "answer": "SELECT prioritTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETEteTETETETETETETETETETETETETETETETETETETETETTETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETETEte
  },
  {
    "id": 1882,
    "db_id": "planet_1",
    "question": "What is the name of the client who sent the most packages and how many were there?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1883,
    "db_id": "planet_1",
    "question": "Who received least number of packages ? List client name and number of packages received by that client .",
    "answer": "SELECT clasSESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESEseSESESESESESESESESESESESESESESESESESESESEseSESESESEseseSESESESESEseSESESESEseSESEseSEseseSESESEseSEseSESESESESESESESESESESESEseSEseseseSESEseSESESESEseSESESESESESESESESESESESEseSESESESESEseSESESESEseSESESESESESEseseseseseSEseseseseSESESESESESESEseseSESESESESESESEseseSESEseseseSESeSEseSEseSESESESESESESEseseseseseSEseseseSEseseSESESESESEseseseSESESESESESESESEseSEseseSEseSEseSEseSEseSESEseseSESEseseseseseSEseseseseseseseseseseseseseseseseseseeseseseseseseseseseseseseseseseseseseSESEseSEseseseseseseseseSEseseseseseseseseseSEseSEseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseSEseseseseseSEseseseeseenseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseSEseseseseseseseseseseseseseseseseseseseseseseseseseseseseesesesesese"
  },
  {
    "id": 1884,
    "db_id": "planet_1",
    "question": "What is the smallest number of packages received and by whom ?",
    "answer": "SELECT package_number, recipient"
  },
  {
    "id": 1885,
    "db_id": "planet_1",
    "question": "Who sent more than one packages? List the client's name.",
    "answer": "SELECT lists"
  },
  {
    "id": 1886,
    "db_id": "planet_1",
    "question": "What is the name of all clients who sent more than one package?",
    "answer": "SELECT * FROM OrdersWHEREPackageQuantityMoreThan10000000.Answer"
  },
  {
    "id": 1887,
    "db_id": "planet_1",
    "question": "What are the Coordinates of planet Mars?",
    "answer": "SELECT BY"
  },
  {
    "id": 1888,
    "db_id": "planet_1",
    "question": "What are the coordinates of the planet named Mars?",
    "answer": "SELECT BY"
  },
  {
    "id": 1889,
    "db_id": "planet_1",
    "question": "List all Planets' names and coordinates in alphabetical order of name.",
    "answer": "SELECT name, coord"
  },
  {
    "id": 1890,
    "db_id": "planet_1",
    "question": "What are the names and coordinates of all planets in alphabetical order by name?",
    "answer": "SELECT name, coord FROM PlanetsORDER_NAMEASCLIMIT100.Explanation"
  },
  {
    "id": 1891,
    "db_id": "planet_1",
    "question": "List all shipment id under Phillip J. Fry's management.",
    "answer": "SELECT DISTINCT shipment_id"
  },
  {
    "id": 1892,
    "db_id": "planet_1",
    "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?",
    "answer": "SELECT Shipment_ID FROM deliveries_jfr_20180731.INSERT"
  },
  {
    "id": 1893,
    "db_id": "planet_1",
    "question": "List the dates of all shipments.",
    "answer": "SELECT DATEADD_month, DATEADD_year, DATEADDiento, DAY FROM shipments.HER"
  },
  {
    "id": 1894,
    "db_id": "planet_1",
    "question": "What are the dates of every shipment in the database?",
    "answer": "SELECT DISTINCT shriestrchnumber FROM shipmentsshriestrchnumber.Only"
  },
  {
    "id": 1895,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars.",
    "answer": "SELECT ID FROM ShipmentID.INSERT"
  },
  {
    "id": 1896,
    "db_id": "planet_1",
    "question": "What are the shipment ids for the planet Mars?",
    "answer": "SELECT A._________"
  },
  {
    "id": 1897,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela.",
    "answer": "SELECT shipment_id FROM shipments_turanga_leela_2021_09_30_to_2021_12_31_2021_06_31_2021_08_31_2021_09_17_2021_09_10_2021_04_03_2021_05_01_2021_09_21_2021_08_02_2021_09_25_2021_09_29_2021_11_03_2021_04_06_2021_07_04_2021_09_21_2021_08_05_2021_09_27_2021_11_03_2021_08_06_2021_09_28_2021_09_29_2021_10_04_2021_08_05_2021_08_06_2021_09_07_2021_08_03_2021_08_04_2021_08_07_2021_08_08_2021_08_05_2021_09_08_2021_08_09_2021_08_09_2021_09_10_2021_04_03_2021_05_01_2021_09_21_2021_08_02_2021_09_25_2021_09_29_2021_11_03_2021_04_06_2021_07_0"
  },
  {
    "id": 1898,
    "db_id": "planet_1",
    "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?",
    "answer": "SELECT id FROM shippers_turanga_leela_2019_05_24_Hours_of_Storage_365_375_385_395_405_415_425_435_445_455_465_475_485_495_505_515_525_535_545_555_565_575_585_595_605_615_625_635_645_655_665_675_685_695_705_715_725_735_745_755_765_775_785_795_805_815_825_835_845_855_865_875_885_895_905_915_925_935_945_955_965_975_985_995_1000_1010_1020_1030_1040_1050_1060_1070_1080_1090_1100_1110_1120_1130_1140_1150_1160_1170_1180_1190_1200_1210_1220_1230_1240_1250_1260_1270_1280_1290_1300_1310_1320_1330_1340_1350_1360_1370_1380_1390_1400_1410"
  },
  {
    "id": 1899,
    "db_id": "planet_1",
    "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela.",
    "answer": "SELECT id FROM shipments_2018_04_30T09Z16H3Z32Z27H3Z32Z27H3Z32Z15H3Z32Z18H3Z32Z18H3Z32Z15H3Z32Z17H3Z32Z15H3Z32Z09Z16H3Z32Z09Z16H3Z32Z17H3Z32Z17H3Z32Z17H3Z32Z09Z16H3Z32Z09Z16H3Z32Z18H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z15H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z17H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z16H3Z32Z09Z"
  },
  {
    "id": 1900,
    "db_id": "planet_1",
    "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?",
    "answer": "SELECT id FROM deliveriesTurangaLeela_mars_mars_id__2022_01_01T00Z_2022_01_08T00Z___2023_01_01T23Z_2023_01_09T23Z___2024_01_01T00Z___2025_01_01T00Z___2026_01_01T00Z_2027_01_01T23Z_2028_01_01T23Z___2029_01_01T23Z_2030_01_01T00Z___2031_01_01T00Z__2032_01_01T00Z___2033_01_01T00Z_2034_01_01T00Z___2035_01_01T00Z___2036_01_01T00Z___2037_01_01T00Z_2038_01_01T23Z_2039_01_01T23Z_2040_01_01T00Z___2041_01_01T00Z_2042_01_01T00Z___2043_01_01T00Z_2044_01_01T00Z___2045_01_01T00Z___2046_01_01T00Z__2047_01_01T23Z_2048_01_01T23Z___2049_01_01T23Z_2050_01_01T00Z___2051_01_01T00Z_"
  },
  {
    "id": 1901,
    "db_id": "planet_1",
    "question": "What is the total shipments in each planet? List the planet name and total shipments.",
    "answer": "SELECT planet, SUM(shipment)"
  },
  {
    "id": 1902,
    "db_id": "planet_1",
    "question": "How many shipments take place on each planet?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1903,
    "db_id": "planet_1",
    "question": "Which planet has most shipments? List the planet name.",
    "answer": "SELECT PER"
  },
  {
    "id": 1904,
    "db_id": "planet_1",
    "question": "What is the name of the planet with the most shipments?",
    "answer": "SELECT planet"
  },
  {
    "id": 1905,
    "db_id": "planet_1",
    "question": "List the manger's name and number of shipments under his management.",
    "answer": "SELECT name, num_ships FROM manager_mangers_name_and_num_ships.INSERT"
  },
  {
    "id": 1906,
    "db_id": "planet_1",
    "question": "What are the number of shipments managed and names of each manager?",
    "answer": "SELECT * FROM shipment_data_mgrs.thead WHERE status = 'M'"
  },
  {
    "id": 1907,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped on Mars.",
    "answer": "SELECT COUNT(*) AS TotalWeight FROM PackageShipments.WHERE \n    FULL JOIN (SELECT * FROM MarsPackageships.FinalPackage) ON PackageShipments.PackageID = MarsPackageships.FinalPackage.PackageID"
  },
  {
    "id": 1908,
    "db_id": "planet_1",
    "question": "what is the total weight of all packages shipped on Mars?",
    "answer": "SELECT ively"
  },
  {
    "id": 1909,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped in each planet . show the name of each planet .",
    "answer": "SELECT PlanetName FROM PackageWeightedPlanetSummary.OrderByPlanetName"
  },
  {
    "id": 1910,
    "db_id": "planet_1",
    "question": "what is the total package weight for each planet, list its name ?",
    "answer": "SELECT Planet FROM PackagesPandas.Planets GROUP BY Planet"
  },
  {
    "id": 1911,
    "db_id": "planet_1",
    "question": "Which planet has total weight of shipment greater than 30? List planet name.",
    "answer": "SELECT lists"
  },
  {
    "id": 1912,
    "db_id": "planet_1",
    "question": "What are the names of all planets tjat have a total shipment weight greater than 30?",
    "answer": "SELECT PlanetName"
  },
  {
    "id": 1913,
    "db_id": "planet_1",
    "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.",
    "answer": "SELECT p.ppackage_number, COUNT(*) AS package_count"
  },
  {
    "id": 1914,
    "db_id": "planet_1",
    "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1915,
    "db_id": "planet_1",
    "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
    "answer": "SELECT Package"
  },
  {
    "id": 1916,
    "db_id": "planet_1",
    "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1917,
    "db_id": "planet_1",
    "question": "Which packages have weight between 10 and 30? List the package number and weight.",
    "answer": "SELECT Liste"
  },
  {
    "id": 1918,
    "db_id": "planet_1",
    "question": "What are the package numbers and weights that are between 10 and 30?",
    "answer": "SELECT * FROM products.packages WHERE product_id IN (SELECT product_id FROM products.packages WHERE size <= 25) GROUP BY size"
  },
  {
    "id": 1919,
    "db_id": "planet_1",
    "question": "Which employees do not have clearance in Mars? List employee's name.",
    "answer": "SELECT SSE"
  },
  {
    "id": 1920,
    "db_id": "planet_1",
    "question": "What are the names of all employees who don't have clearance on Mars?",
    "answer": "SELECT A.DEAN"
  },
  {
    "id": 1921,
    "db_id": "planet_1",
    "question": "Which employees have clearance in Omega III? List employees' name.",
    "answer": "SELECT list"
  },
  {
    "id": 1922,
    "db_id": "planet_1",
    "question": "What are the names of all employees with clearance on Omega III?",
    "answer": "SELECT FROM"
  },
  {
    "id": 1923,
    "db_id": "planet_1",
    "question": "Which planets that have exact one employee has clearance? List planets' name.",
    "answer": "SELECT SC"
  },
  {
    "id": 1924,
    "db_id": "planet_1",
    "question": "What are the names of all planets with one employee that has clearance?",
    "answer": "SELECT Name"
  },
  {
    "id": 1925,
    "db_id": "planet_1",
    "question": "Which employees have salaries between 5000 and 10000? List employees' name.",
    "answer": "SELECT RueSESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESEseSESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESEseSESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESE"
  },
  {
    "id": 1926,
    "db_id": "planet_1",
    "question": "What are the employees's names for those that have salaries between 5000 and 10000?",
    "answer": "SELECT ONE"
  },
  {
    "id": 1927,
    "db_id": "planet_1",
    "question": "Find the name of employees whose salary is above the average salary or more than 5000.",
    "answer": "SELECT name FROM EmployeesGROUPBysalaryORDERLIMIT1.ais"
  },
  {
    "id": 1928,
    "db_id": "planet_1",
    "question": "What are the names of all employees who have a salary greater than average or more than 5000?",
    "answer": "SELECT employee_name FROM employeesalary_tableGROUPHAVINGsalarygeqaverage_ormore_than_5000.ctl"
  },
  {
    "id": 1929,
    "db_id": "planet_1",
    "question": "Find the number of employees who do not have clearance in Mars .",
    "answer": "SELECT employee_name, COUNT(*) FROM employees_tableGROUPbyemployee_nameORDERByCOUNTLIMIT1.ERS"
  },
  {
    "id": 1930,
    "db_id": "planet_1",
    "question": "What is the number of employees that do not have clearance on Mars ?",
    "answer": "SELECT problem"
  },
  {
    "id": 1931,
    "db_id": "video_game",
    "question": "How many games are there?",
    "answer": "SELECT BY"
  },
  {
    "id": 1932,
    "db_id": "video_game",
    "question": "Count the number of games.",
    "answer": "SELECT COUNT(*) FROM games.GROUP"
  },
  {
    "id": 1933,
    "db_id": "video_game",
    "question": "List the Title and Developers of all games ordered by units sold from large to small.",
    "answer": "SELECT * FROM orders.order_id WHERE order_date >= DATE_SUBScrFTchronY    ORDER BY quantity DESC"
  },
  {
    "id": 1934,
    "db_id": "video_game",
    "question": "What are the titles and developers of all games, sorted by units sold descending?",
    "answer": "SELECT Title FROM GamesORDEREDBYUnits_soldDESC.ister"
  },
  {
    "id": 1935,
    "db_id": "video_game",
    "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
    "answer": "SELECT product"
  },
  {
    "id": 1936,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
    "answer": "SELECT AVG(total_sales) FROM games_not_nordiamed_games_subcategoriesGROUPHAVINGgame_type_iddisjointFromgame_type_idnordiamed_games_subcategoriesORDERBytotal_salesASCLIMIT1.SELECTSUMtotal_sales AS avg_sales"
  },
  {
    "id": 1937,
    "db_id": "video_game",
    "question": "What are the names and market districts of all platforms?",
    "answer": "SELECT II"
  },
  {
    "id": 1938,
    "db_id": "video_game",
    "question": "Return all platform names and corresponding market districts.",
    "answer": "SELECT platforms.name, markets.marketingdistrict FROM platforms_inmarketdistricts_table.Join \n                   \t                     \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t                   \t"
  },
  {
    "id": 1939,
    "db_id": "video_game",
    "question": "What are the names and id of platforms whose download rank is 1?",
    "answer": "SELECT only"
  },
  {
    "id": 1940,
    "db_id": "video_game",
    "question": "Return the names and ids of all platforms with the download rank of 1.",
    "answer": "SELECT platform, id FROM platform_downloads.all WHERE rank = 1"
  },
  {
    "id": 1941,
    "db_id": "video_game",
    "question": "What are the maximum and minimum rank of the year of players.",
    "answer": "SELECT MAX(year), MIN(year) FROM players.SELECT RIGHT JOIN yearsOn_players.RIGHT ON yearsOn_players.RIGHT = players.year;"
  },
  {
    "id": 1942,
    "db_id": "video_game",
    "question": "Give the maximum and minimum rank of the year across all players.",
    "answer": "SELECT MAX(Rank) FROM PlayersYearRanksGROUPBYPlayerID.ORDER RIGHT JOIN PlayersYearRanksByYearRanksRANKSORDER.WITHIN AS RANKSORDER\n     AS T2 ON T1.yearRanksRANKS = R2.yearRanksRANKS"
  },
  {
    "id": 1943,
    "db_id": "video_game",
    "question": "How many players have rank of the year smaller than 3?",
    "answer": "SELECT COUNT(*) FROM players_ranks_2019WHERE_year_rank_in_2019NOTINilkSTAMPTO3GROUP_CONCATENATEORDER_by_year_rank_in_2019ASCLIMIT_1.ait"
  },
  {
    "id": 1944,
    "db_id": "video_game",
    "question": "Count the number of players that have a rank of year of at most 3.",
    "answer": "SELECT COUNT(*) FROM players_year_2015_to_2024_2020_2020_2021_2022_2022_2023_2023_2024_2025_2026_2027_2028_2029_2030_2031_2032_2033_2034_2035_2036_2037_2038_2039_2040_2041_2042_2043_2044_2045_2046_2047_2048_2049_2050_2051_2052_2053_2054_2055_2056_2057_2058_2059_2060_2061_2062_2063_2064_2065_2066_2067_2068_2069_2070_2071_2072_2073_2074_2075_2076_2077_2078_2079_2080_2081_2082_2083_2084_2085_2086_2087_2088_2089_2090_2100_2101_2102_2103_2104_2105_2106_2107_2108_2109_2110_2111_2112_2113_2114_2115_2116_2117_2118_2119_2120_21"
  },
  {
    "id": 1945,
    "db_id": "video_game",
    "question": "List all player names in ascending alphabetical order.",
    "answer": "SELECT * FROM PlayersORDERASC.players"
  },
  {
    "id": 1946,
    "db_id": "video_game",
    "question": "What are the names of all players in alphabetical order?",
    "answer": "SELECT A"
  },
  {
    "id": 1947,
    "db_id": "video_game",
    "question": "List names and colleges of all players in descending order of rank of the year.",
    "answer": "SELECT name, college FROM players_class_2021_rankings_highestOrder_of_years.na"
  },
  {
    "id": 1948,
    "db_id": "video_game",
    "question": "What are the names and colleges of all players, ordered by rank of year descending?",
    "answer": "SELECT Name, College FROM PlayersOrderByRankDesc.ORDER"
  },
  {
    "id": 1949,
    "db_id": "video_game",
    "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
    "answer": "SELECT Players"
  },
  {
    "id": 1950,
    "db_id": "video_game",
    "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
    "answer": "SELECT those \nINNER JOIN JOINNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinNJoinN"
  },
  {
    "id": 1951,
    "db_id": "video_game",
    "question": "Show the distinct developer of games played by players that go to college \"Auburn\".",
    "answer": "SELECT Developer FROM CollegeGameDB.com WHERE CollegeName = 'Auburn'"
  },
  {
    "id": 1952,
    "db_id": "video_game",
    "question": "What are the different developers of games that are played by players that attend Auburn college?",
    "answer": "SELECT DISTINCT developer"
  },
  {
    "id": 1953,
    "db_id": "video_game",
    "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
    "answer": "SELECT AVG(UnitsSold) FROM PlayersGuardedGROUPByPosition.Answer"
  },
  {
    "id": 1954,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions among games played by players who have the position Guard.",
    "answer": "SELECT AVGUnitCount FROM PlayersGuardGROUPHAVINGGuardPositionID_in_gamed_0001352976547874334531750083336047193091077484585762992020058170814878202013612410048046866563906081799210131131131131131131111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
  },
  {
    "id": 1955,
    "db_id": "video_game",
    "question": "Please list the title and platform name of games.",
    "answer": "SELECT titles FROM gamedata_games_table.SELECT \n    AS title, AS.platform_name, ASgame_idFROMgamesgaming_table.JOIN \n    AS game \n    LEFT JOIN gamedata_games_ongame_idONgame_id_gamedata_id.id AS g ON game.id = gamedata_game_id.id \n    GROUP BY AStitle"
  },
  {
    "id": 1956,
    "db_id": "video_game",
    "question": "What are the titles and platform names of all games?",
    "answer": "SELECT BY"
  },
  {
    "id": 1957,
    "db_id": "video_game",
    "question": "Please list the title of games with platforms that have market district in Asia or USA.",
    "answer": "SELECT game"
  },
  {
    "id": 1958,
    "db_id": "video_game",
    "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
    "answer": "SELECT titles"
  },
  {
    "id": 1959,
    "db_id": "video_game",
    "question": "List the name of each franchise and the number of games belonging to that franchise.",
    "answer": "SELECT franchise, COUNT(games) FROM franchises_tableGROUPByFranchiseORDERBYGameCountLIMIT10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1960,
    "db_id": "video_game",
    "question": "How many games are there from each Franchise?",
    "answer": "SELECT Franchise FROM Games_Game_13590_2022_7_60567_13590_2022_4_32890_2022_7_60567_13590_2022_7_60567_13590_2022_4_32890_2022_7_60567_13590_2022_4_32890_2022_7_60567_2022_4_32890_2022_7_60567_13590_2022_4_32890_2022_7_60567_13590_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_32890_2022_4_328"
  },
  {
    "id": 1961,
    "db_id": "video_game",
    "question": "List the name of franchise that have the most number of games.",
    "answer": "SELECT franchise"
  },
  {
    "id": 1962,
    "db_id": "video_game",
    "question": "Which franchise has the most games?",
    "answer": "SELECT SSELTE"
  },
  {
    "id": 1963,
    "db_id": "video_game",
    "question": "List the names of franchises that have at least two games.",
    "answer": "SELECT franchise"
  },
  {
    "id": 1964,
    "db_id": "video_game",
    "question": "What are the names of franchises that have two or more games?",
    "answer": "SELECT A.SELECT\nFROM B.SELECT"
  },
  {
    "id": 1965,
    "db_id": "video_game",
    "question": "List the name of players that do not play any game.",
    "answer": "SELECT T2.player_name FROM PlayersT2JOINames
  },
  {
    "id": 1966,
    "db_id": "video_game",
    "question": "What are the names of players who do not play any games?",
    "answer": "SELECT BY"
  },
  {
    "id": 1967,
    "db_id": "video_game",
    "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
    "answer": "SELECT titles"
  },
  {
    "id": 1968,
    "db_id": "video_game",
    "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
    "answer": "SELECT DISTINCT GameTitle"
  },
  {
    "id": 1969,
    "db_id": "video_game",
    "question": "Show all distinct franchises of games.",
    "answer": "SELECT * FROM frastos_game_t12_2018_05_23_to_2021_04_30frastos_game_t2017_10_09frastos_game_t2017_11_16frastos_game_t2017_12_25frastos_game_t2018_05_16frastos_game_t2018_06_24frastos_game_t2018_10_30frastos_game_t2018_11_35frastos_game_t2018_12_30frastos_game_t2019_01_03frastos_game_t2019_01_04frastos_game_t2019_01_05frastos_game_t2019_01_06frastos_game_t2019_01_07frastos_game_t2019_01_08frastos_game_t2019_01_09frastos_game_t2019_01_10frastos_game_t2019_01_11frastos_game_t2019_01_12frastos_game_t2019_01_13frastos_game_t2019_01_14frastos_game_t2019_01_15frastos_game_t2019_01_16frastos_game_t2019_01_17frastos_game_t2019_01_18frastos_game_t2019_01_19frastos_game_t2019_01_20frastos_game_t2019_02_04frastos_game_t2019_03_05frastos_game_t2019_04_06frastos_game_t2019_05_07frastos_game_t2019_06_08frastos_game_t20"
  },
  {
    "id": 1970,
    "db_id": "video_game",
    "question": "What are all the distinct franchises?",
    "answer": "SELECT ives"
  },
  {
    "id": 1971,
    "db_id": "video_game",
    "question": "Show the title of games that are not played by any player who is in the Guard position.",
    "answer": "SELECT T2.name FROM GamesGTGGTGTSIGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG"
  },
  {
    "id": 1972,
    "db_id": "video_game",
    "question": "What are the titles of games not played by any players who play the Guard position?",
    "answer": "SELECT Title"
  },
  {
    "id": 1973,
    "db_id": "book_press",
    "question": "list all the names of press in descending order of the profit of the year.",
    "answer": "SELECT * FROM Press_2021_01_01.ORDER LIMIT 3"
  },
  {
    "id": 1974,
    "db_id": "book_press",
    "question": "Sorted all the press by year profits in descending order, and return press names.",
    "answer": "SELECT name"
  },
  {
    "id": 1975,
    "db_id": "book_press",
    "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?",
    "answer": "SELECT publisher"
  },
  {
    "id": 1976,
    "db_id": "book_press",
    "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.",
    "answer": "SELECT Press_Name"
  },
  {
    "id": 1977,
    "db_id": "book_press",
    "question": "what are the average and maximum profit of a year for all presses?",
    "answer": "SELECT press_id, AVG(profit) AS avg_profit, MAX(profit) AS max_profit"
  },
  {
    "id": 1978,
    "db_id": "book_press",
    "question": "Find the average and maximum yearly profit for each press.",
    "answer": "SELECT PR, MAX(AvgProfit), MIN(AveragedProfit)\nFROM PressesPLANSGROUPEDByYearPPLANSORDERBYMaxProfitLIMIT10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1979,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest.",
    "answer": "SELECT publisher_name FROM monthly_profit_tableGROUP_by_monthly_profit_idHAVINGmaxmonthly_profit_value_per_month_columnHAVINGmin_monthly_profit_value_per_month_columnISnullLIMIT1.SELECTpublisher_name"
  },
  {
    "id": 1980,
    "db_id": "book_press",
    "question": "Which press has the largest monthly profit? Give me the press name.",
    "answer": "SELECT southernmost"
  },
  {
    "id": 1981,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
    "answer": "SELECT publisher"
  },
  {
    "id": 1982,
    "db_id": "book_press",
    "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
    "answer": "SELECT payments"
  },
  {
    "id": 1983,
    "db_id": "book_press",
    "question": "how many authors are under age 30?",
    "answer": "SELECT COUNT(*)"
  },
  {
    "id": 1984,
    "db_id": "book_press",
    "question": "Count the number of authors of age below 30.",
    "answer": "SELECT author"
  },
  {
    "id": 1985,
    "db_id": "book_press",
    "question": "find the average age of authors for each gender.",
    "answer": "SELECT AVG(age) FROM authorsGROUPBygender.ordered"
  },
  {
    "id": 1986,
    "db_id": "book_press",
    "question": "For each gender, return gender and the average age of authors.",
    "answer": "SELECT gender, AVG(age) AS avg_age"
  },
  {
    "id": 1987,
    "db_id": "book_press",
    "question": "find the number of authors who are older than 30 for each gender.",
    "answer": "SELECT T2.name, COUNT(*) AS num_authors"
  },
  {
    "id": 1988,
    "db_id": "book_press",
    "question": "How many authors are of age above 30 for each gender?",
    "answer": "SELECT author, age"
  },
  {
    "id": 1989,
    "db_id": "book_press",
    "question": "List all book titles in the order of their release date from the most recent to the past.",
    "answer": "SELECT * FROM books_order_by_release_date.ORDER"
  },
  {
    "id": 1990,
    "db_id": "book_press",
    "question": "Sort all the books in descending order of release date, and return the book titles.",
    "answer": "SELECT title FROM books.sort_by_release_date ORDER BY released_date DESC LIMIT 1"
  },
  {
    "id": 1991,
    "db_id": "book_press",
    "question": "Find the number of books for each series.",
    "answer": "SELECT * FROM booksseries_tableGROUP_by_series_idhaving_count_in_bookgroup_id_in_10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 1992,
    "db_id": "book_press",
    "question": "How many books does each book series have? Return the counts and book series.",
    "answer": "SELECT COUNT(*) FROM book_seriesGROUP_byseries_idHAVINGCOUNTsisINEXISCAZRETURNINGORDERBYseries_nameLIMIT1000.How"
  },
  {
    "id": 1993,
    "db_id": "book_press",
    "question": "Find the titles and publish dates of the top 5 best sale books.",
    "answer": "SELECT title, publishing_date FROM book_sales_table.ORDER LIMIT 5"
  },
  {
    "id": 1994,
    "db_id": "book_press",
    "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates.",
    "answer": "SELECT FROM_sales"
  },
  {
    "id": 1995,
    "db_id": "book_press",
    "question": "Find the book series that have some book selling more than 1000 and some book less 500.",
    "answer": "SELECT T1.name FROM T2JOINT3ONT2.t_idT3idT1 INNER JOIN T4ONT2.idT4idT1 ON T3.t_idT3idT1=IDT4.id INNER JOIN T5ONT2.t_idT5idT1 ON T6.t_idT6idT1=IDT5.id INNER JOIN T7ONT2.idT7idT1 ON T8.idT8idT1=IDT7.id GROUP BY T1"
  },
  {
    "id": 1996,
    "db_id": "book_press",
    "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?",
    "answer": "SELECT AND"
  },
  {
    "id": 1997,
    "db_id": "book_press",
    "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
    "answer": "SELECT authors"
  },
  {
    "id": 1998,
    "db_id": "book_press",
    "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
    "answer": "SELECT batt"
  },
  {
    "id": 1999,
    "db_id": "book_press",
    "question": "Find the name and age of the authors who do not have any book in the record.",
    "answer": "SELECT name, age FROM authors_table.WHERE ORDER BY author_id"
  },
  {
    "id": 2000,
    "db_id": "book_press",
    "question": "Which authors in the record have not published any books ? Give me their names .",
    "answer": "SELECT T"
  },
  {
    "id": 2001,
    "db_id": "book_press",
    "question": "Find the names of authors who have more than one book in the database.",
    "answer": "SELECT name FROM authors_tableGROUPHAVINGCOUNTINCTnameNOTINSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVINGCOUNTINCTnameISBLANKSELECTnameFROMbooks_tableGROUPHAVING"
  },
  {
    "id": 2002,
    "db_id": "book_press",
    "question": "Which authors have published more than 1 book according to the database? Give me their names.",
    "answer": "SELECT SALE"
  },
  {
    "id": 2003,
    "db_id": "book_press",
    "question": "Find the title, author name, and publisher name for the top 3 best sales books.",
    "answer": "SELECT Title, AuthorName, PublisherName FROM SalesBooksORDERED_bySalePriceASCLIMITLIMIT_booksCOUNTASLIMIT_2000000000000000010000000001000000000000000001000000000100000000010000000000000000000000000000100000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 2004,
    "db_id": "book_press",
    "question": "What are the 3 best selling books? Show their titles, author names, and press names.",
    "answer": "SELECT * FROM book_sales.WHEREYear INNER JOIN (SELECT Year FROM sales_tableyr2017349975248637275421704203123181189174352599744064080297140621539677852675272736729935847525667514481249040235257672736700120135847525667514481249040235257672736700120135847525667514481249040235257672736700120135847525667514481249040235257672736700120135847525667514481249040235257672736700120135847525667514481249040235257672736700120135847525667514481249040235257672736700120135847525667514481249040235257672736700120135847525667514481249040235257672736700120135847525"
  },
  {
    "id": 2005,
    "db_id": "book_press",
    "question": "Find the name and total book sale amount of each press.",
    "answer": "SELECT * FROM presses_2018_2020.ash"
  },
  {
    "id": 2006,
    "db_id": "book_press",
    "question": "What are the name and total book sale amount of each press?",
    "answer": "SELECT P.Name, SUM(T1.PressPrice) AS TotalBookSale"
  },
  {
    "id": 2007,
    "db_id": "book_press",
    "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well.",
    "answer": "SELECT p.publisher_name, COUNT(*) AS num_books_sold"
  },
  {
    "id": 2008,
    "db_id": "book_press",
    "question": "For each press, return its name and the number of books that have sale amount above 1000.",
    "answer": "SELECT p.name, COUNT(*) AS book_count"
  },
  {
    "id": 2009,
    "db_id": "book_press",
    "question": "What is the name of the author of best selling book?",
    "answer": "SELECT THE_books"
  },
  {
    "id": 2010,
    "db_id": "book_press",
    "question": "Who wrote the best selling book? Give me the author name.",
    "answer
  },
  {
    "id": 2011,
    "db_id": "book_press",
    "question": "find the name and gender of the author who published the most books.",
    "answer": "SELECT T1.author_name, T1.gender FROM Books.T1 INNER JOIN Authors.Auds ON Books.T1.author_id = Authors.Auds.author_id INNER JOIN Books.T2 ON Books.T2.author_id = Authors.Auds.author_id INNER JOIN Author.Genders AS G ON authors.Auds.gender_id = G.gender_id INNER JOIN Books.T3 ON Books.T3.author_id = G.author_id INNER JOIN T4_books_tableON_books.T1author_id AS T4_books_id ON T4_books_table.author_id = T4_books_id INNER JOIN T1_books_tableONBooks.T2Author_id AS T1_books_id ON T1_books_table.author_id = T1_books_id ORDER BY T3.author_date DESC LIMIT 1"
  },
  {
    "id": 2012,
    "db_id": "book_press",
    "question": "Who wrote the largest number of books? Give me the author name and gender.",
    "answer": "SELECT HighlandsSESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESEseSESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESESEseSESEseseseeseseseseseseseseseSESESESESESESESESESEseSEseseseseSESEseSESEseSESESESESESESESESESEseSEseseseseseSESEseseseSESESEseSESESEseseseseseSEseseseseseseseseseseseSEseSESEseseseseseseseSESESESESE"
  },
  {
    "id": 2013,
    "db_id": "book_press",
    "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
    "answer": "SELECT a"
  },
  {
    "id": 2014,
    "db_id": "book_press",
    "question": "Which authors have never published under the \"Accor\" press? Give me their names.",
    "answer": "SELECT categor"
  },
  {
    "id": 2015,
    "db_id": "book_press",
    "question": "Find the name and the yearly profit in billion for press that published more than two books.",
    "answer": "SELECT p.name, p.yearprofit FROM press_pubs_press_info_p2021WHEREYEARISBECAUSE.month INNER JOIN (SELECT year FROM press_yearly_tableyrlyyear2021GROUP_CONCAT.year ORDER BY y) AS j2 ON p.year = j2.yearGROUP BY p.name"
  },
  {
    "id": 2016,
    "db_id": "book_press",
    "question": "Find the press that published more than two books, and return its name and yearly profit in billion.",
    "answer": "SELECT * FROM press_table_name_2023_1_12_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29_30_31_32_33_34_35_36_37_38_39_40_41_42_43_44_45_46_47_48_49_50_51_52_53_54_55_56_57_58_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_110_120_130_140_150_160_170_180_190_200_210_220_230_240_250_260_270_280_290_300_310_320_330_340_350_360_370_380_390_400_410_420_430_440_450_460_470_480_490_500_510_520_530_540_550_560_570_580"
  },
  {
    "id": 2017,
    "db_id": "cre_Doc_Workflow",
    "question": "How many authors do we have?",
    "answer": "SELECT COUNT(*) FROM authors.Question"
  },
  {
    "id": 2018,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names.",
    "answer": "SELECT author"
  },
  {
    "id": 2019,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and other details for all authors.",
    "answer": "SELECT name FROM authors.ORDER"
  },
  {
    "id": 2020,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the other details for the author Addison Denesik.",
    "answer": "SELECT INstitUTIVE"
  },
  {
    "id": 2021,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of documents.",
    "answer": "SELECT COUNT(*) FROM documents.why"
  },
  {
    "id": 2022,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document with id 4?",
    "answer": "SELECT answersSSETTES.T.SSTETTETTSTTETTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  },
  {
    "id": 2023,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document \"Travel to Brazil\"?",
    "answer": "SELECT kelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkelkalkelkelkelkelkelkelkelkelkel"
  },
  {
    "id": 2024,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents does has the author Era Kerluke written?",
    "answer": "SELECT COUNT(*) FROM documents_age_era_kerluke_year2019_having_age_56_to_70_years_2019_having_age_86_to_90_years_2019_having_age_91_to_105_years_2019_having_age_106_to_107_years_2019_having_age_108_to_110_years_2019_having_age_111_to_113_years_2019_having_age_114_to_115_years_2019_having_age_116_to_117_years_2019_having_age_118_to_118_years_2019_having_age_119_to_120_years_2019_having_age_121_to_123_years_2019_having_age_124_to_125_years_2019_having_age_126_to_127_years_2019_having_age_128_to_129_years_2019_having_age_130_to_131_years_2019_having_age_132_to_133_years_2019_having_age_133_to_134_years_2019_having_age_134_to_135_years_2019_having_age_136_to_137_years_2019_having_age_138_to_138_years_2019_having_age_139_to_140_years_2019_having_age_141_to_142_years_2019_having_age_143_to_144_years_2019_having_age_144_to_145_years_2019_having_age_145_to_146_years_2019_having_age_147_to_148_years_2019_having_age_149_to_150_years_2019_h"
  },
  {
    "id": 2025,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and descriptions for all documents.",
    "answer": "SELECT document_name, document_description FROM documents.ash"
  },
  {
    "id": 2026,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and names for all documents by author Bianka Cummings.",
    "answer": "SELECT doc_id, name FROM documents_by_author_biankahua_id_2021.who"
  },
  {
    "id": 2027,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the author name and details for the document \"Travel to China\".",
    "answer": "SELECT title"
  },
  {
    "id": 2028,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names and number of documents corresponding to each.",
    "answer": "SELECT A1, COUNT(*) AS num_of_files FROM author_table_name236201815207724460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 2029,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the name of the author with most number of documents?",
    "answer": "SELECT A"
  },
  {
    "id": 2030,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names for authors with at least two documents.",
    "answer": "SELECT A1, COUNT(*) AS num_of_books FROM authors_table3A2B6345678901234456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234"
  },
  {
    "id": 2031,
    "db_id": "cre_Doc_Workflow",
    "question": "How many business processes do we have?",
    "answer": "SELECT COUNT(*) FROM BusinessProcess.anneer"
  },
  {
    "id": 2032,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the next process id, process name, process description for process with id 9.",
    "answer": "SELECT p2.next_id FROM process_p2p1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234"
  },
  {
    "id": 2033,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the next process of the process with id 9?",
    "answer": "SELECT T1.id FROM ProcessPPTT1T1PPTT1T2PPTT2PPTT3PPTT4PPTT5PPTT6PPT7PPT8PPT9PPT10PPT11PPT12PPT13PPT14PPT15PPT16PPT17PPT18PPT19PPT20PPT21PPT22PPT23PPT24PPT25PPT26PPT27PPT28PPT29PPT30PPT31PPT32PPT33PPT34PPT35PPT36PPT37PPT38PPT39PPT40PPT41PPT42PPT43PPT44PPT45PPT46PPT47PPT48PPT49PPT50PPT51PPT52PPT53PPT54PPT55PPT56PPT57PPT58PPT59PPT60PPT61PPT62PPT63PPT64PPT65PPT66PPT67PPT68PPT69PPT70PPT71PPT72PPT73PPT74PPT75PPT76PPT77PPT78PPT79PPT80PPT81PPT82PPT83PPT84PPT85PPT86PPT87PPT88PPT89PPT90PPT91PPT92PPT93PPT94PPT95PPT96PPT97PPT98PPT99PPT100PPT101PPT102PPT103PPT104PPT105PPT106PPT107PPT108PPT109PPT110PPT111PPT112PPT113PPT114PPT115PPT116PPT1"
  },
  {
    "id": 2034,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process outcomes.",
    "answer": "SELECT COUNT(*) FROM ProcessOutcomes.INSERT"
  },
  {
    "id": 2035,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process outcomes.",
    "answer": "SELECT code, description FROM process_outcomes.orderedByDate"
  },
  {
    "id": 2036,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for the process outcome code working?",
    "answer": "SELECT process_id"
  },
  {
    "id": 2037,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process status.",
    "answer": "SELECT COUNT(*) FROM p_status_table.thead"
  },
  {
    "id": 2038,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process status.",
    "answer": "SELECT process_id, description"
  },
  {
    "id": 2039,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for process status code ct?",
    "answer": "SELECT process_status_code"
  },
  {
    "id": 2040,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff do we have?",
    "answer": "SELECT A"
  },
  {
    "id": 2041,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and details for all staff.",
    "answer": "SELECT id, details FROM staffs.Only"
  },
  {
    "id": 2042,
    "db_id": "cre_Doc_Workflow",
    "question": "What are the details for the staff member with id 100.",
    "answer": "SELECT *"
  },
  {
    "id": 2043,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of staff roles.",
    "answer": "SELECT COUNT(*) FROM staff_role.INSERT"
  },
  {
    "id": 2044,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all staff roles.",
    "answer": "SELECT RoleName, Description FROM StaffRoleTable.ajar"
  },
  {
    "id": 2045,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for staff role code HR?",
    "answer": "SELECT istrANSITION"
  },
  {
    "id": 2046,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents have a process?",
    "answer": "SELECT COUNT(*) FROM process_files.ORDER_bycreated_at"
  },
  {
    "id": 2047,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with a document.",
    "answer": "SELECT process_id FROM documents_20180309_16141576_1016_20180309_16141736_1016_20180309_16141857_1016_20180309_16141969_1016_20180309_16141980_1016_20180309_16141990_1016_20180310_16141911_1016_20180311_1016_20180312_1016_20180313_1016_20180314_1016_20180315_1016_20180316_1016_20180317_1016_20180318_1016_20180319_1016_20180320_1016_20180321_1016_20180322_1016_20180323_1016_20180324_1016_20180325_1016_20180326_1016_20180327_1016_20180328_1016_20180329_1016_20180330_1016_20180331_1016_20180332_1016_20180333_1016_20180334_1016_2"
  },
  {
    "id": 2048,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all document ids without a process.",
    "answer": "SELECT id FROM doc_count.Only"
  },
  {
    "id": 2049,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with no document.",
    "answer": "SELECT DISTINCT PPN FROM ProcessPgnlsPnPsPgnlsPgnlsPnPsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnlsPgnls"
  },
  {
    "id": 2050,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process outcome description and process status description for the document with id 0?",
    "answer": "SELECT D1.Name FROM DocumentD1D2ASD0.Using INNER JOIN ASD0.Using ON DocumentD1D2ASD0.DocumentID = ASD0.DocumentID"
  },
  {
    "id": 2051,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the document \"Travel to Brazil\"?",
    "answer": "SELECT Name FROM DocumentTable.INSERT"
  },
  {
    "id": 2052,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all process ids and the number of documents in each process.",
    "answer": "SELECT id, count FROM process_id_tableGROUPByprocess_id_id.count"
  },
  {
    "id": 2053,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff are the document with id 0 and process with id 9.",
    "answer": "SELECT staff_id"
  },
  {
    "id": 2054,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff ids and the number of document processes for each staff.",
    "answer": "SELECT StaffId, NumberOfDocumentProcess"
  },
  {
    "id": 2055,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff role codes and the number of document processes for each role.",
    "answer": "SELECT role, countProcess FROM staff_role_code_t2023_2019_HKWEU_BENHIGNZT2023_2019_HKWEU_MFREERLSYNSLDSSTF8KMSJJSNSLSKMSMSSMSSMSSSMDSMSSSMDSMSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS"
  },
  {
    "id": 2056,
    "db_id": "cre_Doc_Workflow",
    "question": "How many different roles does the staff with id 3 have?",
    "answer": "SELECT COUNT(DISTINCTrole_id) FROM staffs_with_id_3WHEREid_3isson_id_3.isnull"
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "question": "How many agencies do we have?",
    "answer": "SELECT COUNT(*) FROM agencies.WHEREAgency_NAME INNER JOIN agencies_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785347424283838348814_2016_839785"
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "question": "Count the number of agencies.",
    "answer": "SELECT COUNT(*) FROM agencies.GROUP"
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details.",
    "answer": "SELECT agency_id FROM agencies_info_table.INSERT"
  },
  {
    "id": 2060,
    "db_id": "advertising_agencies",
    "question": "What are all the agency ids and details?",
    "answer": "SELECT AgencyID FROM agency_id_table.INSERT"
  },
  {
    "id": 2061,
    "db_id": "advertising_agencies",
    "question": "Show the number of clients.",
    "answer": "SELECT COUNT(*) FROM Clients.why"
  },
  {
    "id": 2062,
    "db_id": "advertising_agencies",
    "question": "How many clients are there?",
    "answer": "SELECT COUNT(*) FROM clients.How"
  },
  {
    "id": 2063,
    "db_id": "advertising_agencies",
    "question": "List all client ids and client details.",
    "answer": "SELECT Client_ID, Client_NAME FROM ClientDetailsClientIdClientDetailsclient_id_client_detailsinnerjoin_on.ClientID INNER JOIN ClientDetailsClientDetailsinnerjoin_on.ClientName ON ClientDetailsClientDetailsinnerjoin_on.ClientIDInnerJoin_on.ClientName = ClientDetailsClientIdinnerjoin_on.ClientIDInnerJoin_on.ClientName"
  },
  {
    "id": 2064,
    "db_id": "advertising_agencies",
    "question": "What are all the client ids and details?",
    "answer": "SELECT client_id FROM clients.all"
  },
  {
    "id": 2065,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and the number of clients for each agency.",
    "answer": "SELECT COUNT(*) AS client_count, agency_id FROM agency_info.ITS"
  },
  {
    "id": 2066,
    "db_id": "advertising_agencies",
    "question": "How many clients does each agency have?",
    "answer": "SELECT COUNT(*) FROM clients.GROUPINGByAgency"
  },
  {
    "id": 2067,
    "db_id": "advertising_agencies",
    "question": "What is the agency id and details with most number of clients?",
    "answer": "SELECT * FROM ClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoJoinClientInfoYouViewFromTodayMostNumOfClients.SELECT"
  },
  {
    "id": 2068,
    "db_id": "advertising_agencies",
    "question": "Return the agency id and details for the agency with the greatest number of clients.",
    "answer": "SELECT a.id, a.name, a.address, a.city, a.state FROM agencies.id AS a INNER JOIN clients.onClient_id AS c ON a.id = c.id GROUP BY a.id"
  },
  {
    "id": 2069,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and details with at least 2 clients.",
    "answer": "SELECT agency_id, name, contact_info FROM clients.c"
  },
  {
    "id": 2070,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and details agencies with at least 2 clients?",
    "answer": "SELECT AAgency_ID, A.Affiliation, COUNT(*) AS COUNT FROM agency_id_AFFiliation_listA1A3A4A5B6C7D8E9F10A11A12A13A14B15A16A17A18B19A20B21A22B23A24B25A26B27A28B29A30B31A32A33A34A35A36B37A38B39A40A41A42A43A44A45A46A47A48A49A50A51A52A53A54A55A56A57A58A59A60A61A62A63A64A65A66A67A68A69A70A71A72A73A74A75A76A77A78A79A80A81A82A83A84A85A86A87A88A89A90A91A92A93A94A95A96A97A98A99A10A11A12A13A14B15A16A17A18A19A20A21A22A23A24A25A26A27A28A29A30A31A32A33A34A35A36B37A38B39A40A41A42A43A44A45A46A47A48A49A50A51A52A53A54A55A56A57A58A59A60A61A62A63A64A65A66A67A68A69A70A71A72A"
  },
  {
    "id": 2071,
    "db_id": "advertising_agencies",
    "question": "Show agency details for client with detail 'Mac'.",
    "answer": "SELECT *"
  },
  {
    "id": 2072,
    "db_id": "advertising_agencies",
    "question": "What are the agency details for clients with the detail Mac?",
    "answer": "SELECT MAC"
  },
  {
    "id": 2073,
    "db_id": "advertising_agencies",
    "question": "Show details for all clients and the details of their corresponding agents.",
    "answer": "SELECT DISTINCT name, phone_number, email_address FROM clients_and_agent_boards.INSERT;"
  },
  {
    "id": 2074,
    "db_id": "advertising_agencies",
    "question": "What are the client details for each client and the corresponding details of their agencies?",
    "answer": "SELECT DISTINCT * FROM clients_and_agienciesWHEREclients_id_column_NAMEINEXPedlyHDRUPFILESELECTagiencies_id_column_NAMEFROMagiencies.Only"
  },
  {
    "id": 2075,
    "db_id": "advertising_agencies",
    "question": "Show all sic codes and the number of clients with each code.",
    "answer": "SELECT sic_code, COUNT(*) FROM sic_code_to_client_info_crs2015_137802409630170136620190910191910321855343215867329091019091026548292932747676767676767676767676767777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777"
  },
  {
    "id": 2076,
    "db_id": "advertising_agencies",
    "question": "How many clients are there for each sic code?",
    "answer": "SELECT COUNT(*) FROM sic_code_info.licences"
  },
  {
    "id": 2077,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and details with sic code \"Bad\".",
    "answer": "SELECT IV"
  },
  {
    "id": 2078,
    "db_id": "advertising_agencies",
    "question": "What are the client ideas and details for clients with the sic code Bad?",
    "answer": "SELECT A"
  },
  {
    "id": 2079,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details for agencies with a client.",
    "answer": "SELECT A.client_id, A.name, A.address FROM agencies_AllowsWHERE_client_id_inACTOR_ID_inACTOR_ID_inACTOR_ID_inACTOR_ID_inACTOR_ID_inACTOR_ID_inACTOR_ID_inACTOR_ID_inACTOR_ID_inACTOR_ID_inACTOR_ID_inACTOR_ID_inACTOR_id_inACTOR_ID_inACTOR_ID_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inActor_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inACTOR_id_inActor_id_inACTor_id_inACTOR_id_inACTOR_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inActor_id_inACTor_id_inACTor_id_inActor_id_inACTor_id_inACTor_id_inActor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inActor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inActor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACTor_id_inACT"
  },
  {
    "id": 2080,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and agency details for all agencies who have a client?",
    "answer": "SELECT A.Aid, A.Aid, A.Name FROM Agency_Aids_Agencies_Accessors_2021Aigles_2021AIGles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_2021Aigles_20"
  },
  {
    "id": 2081,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids without any client.",
    "answer": "SELECT agency_id FROM agency_table_2016_05_30_c1c239d2a8676424b6e46e60c7df74318672e51ca31215871b6591ea965673c713a016808a016a79d08a016b9989b7c43fa06c6f4dd2318023242458000001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010000100001000010"
  },
  {
    "id": 2082,
    "db_id": "advertising_agencies",
    "question": "What are ids of agencies that do not have any clients?",
    "answer": "SELECT id FROM agency_id_table.INSERT"
  },
  {
    "id": 2083,
    "db_id": "advertising_agencies",
    "question": "How many invoices do we have?",
    "answer": "SELECT COUNT(*) FROM Invoices.ardi"
  },
  {
    "id": 2084,
    "db_id": "advertising_agencies",
    "question": "Count the number of invoices.",
    "answer": "SELECT COUNT(*) FROM invoices.ITION"
  },
  {
    "id": 2085,
    "db_id": "advertising_agencies",
    "question": "Show ids, status codes, and details for all invoices for clients.",
    "answer": "SELECT COUNT(*) FROM invoices_invoicing_client_id_order_id_invoice_id_amount_t2t1_amount_t2t2_id_invoice_id_amount_t3_id_invoice_id_amount_t4_id_amount_t5_id_amount_t6_id_amount_t7_id_amount_t8_id_amount_t9_id_amount_t10_id_amount_t11_id_amount_t12_id_amount_t13_id_amount_t14_id_amount_t15_id_amount_t16_id_amount_t17_id_amount_t18_id_amount_t19_id_amount_t20_id_amount_t21_id_amount_t22_id_amount_t23_id_amount_t24_id_amount_t25_id_amount_t26_id_amount_t27_id_amount_t28_id_amount_t29_id_amount_t30_id_amount_t31_id_amount_t32_id_amount_t33_id_amount_t34_id_amount_t35_id_amount_t36_id_amount_t37_id_amount_t38_id_amount_t39_id_amount_t40_id_amount_t41_id_amount_t42_id_amount_t43_id_amount_t44_id_amount_t45_id_amount_t46_id_amount_t47_id_amount_t48_id_amount_t49_id_amount_t50_id_amount_t51_id_amount_t52_id_amount_t53_id_amount_t54_id_amount_t55_id_amount_t56_id_amount_t57_id_amount_t58_id_amount_t59_id_amount_t60_id_amount_t61_id_amount_t62_id_amount_t63_id_amount_t64_id_amount_t65_id_amount_t66_id_amount_t67_id_amount_t68_id_amount_t69_id_amount_t70_id_amount_t71_id_amount_t72_id_amount_t73_id_amount_t74_id_amount_t75_id_amount_t76_id_amount_t77_id_amount_t78_id_amount_t79_id_amount_t80_id_amount_t8"
  },
  {
    "id": 2086,
    "db_id": "advertising_agencies",
    "question": "What are the ids, statuses, and details for all invoices?",
    "answer": "SELECT id, status, details FROM invoices.ash"
  },
  {
    "id": 2087,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and the number of invoices for each client.",
    "answer": "SELECT COUNT(*) AS client_count, COUNT(*) AS invoice_count FROM client_id_table.pher"
  },
  {
    "id": 2088,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each client id?",
    "answer": "SELECT COUNT(*) FROM clients_id_invoices.ardi"
  },
  {
    "id": 2089,
    "db_id": "advertising_agencies",
    "question": "List the client id and detail with most number of invoices.",
    "answer": "SELECT COUNT(*) AS total_invoices, client_id FROM invoice_client_details_tableJOINinvoice_client_details_tableONinvoice_client_details_table.client_id_id INNER JOIN invoice_client_details_tableONinvoice_client_details_table.id_id_id ON invoice_client_details_table.id_id_id_id = invoice_client_details_table.id_id_id"
  },
  {
    "id": 2090,
    "db_id": "advertising_agencies",
    "question": "What are the client id and details for the client with the most invoices?",
    "answer": "SELECT MAX(INvo) FROM Invoices.ORDER AS INVO"
  },
  {
    "id": 2091,
    "db_id": "advertising_agencies",
    "question": "What are client ids for clients with at least 2 invoices.",
    "answer": "SELECT client_id"
  },
  {
    "id": 2092,
    "db_id": "advertising_agencies",
    "question": "Return the client ids for clients with two or more invoices?",
    "answer": "SELECT Client_id FROM InvoicesClientJoinERJoinerWHEREINvoice_idINNOWSINBLANK12345678901234567890234567890345678904567890567890678907789077890878908789097890101112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345"
  },
  {
    "id": 2093,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and the number of invoices with each status.",
    "answer": "SELECT *\nFROM invoices_status_code_table20160317049843740143757684242426321291427856303389728687804215806321336466002722722707563123350603174864784234206119292151408648487688820800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "id": 2094,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each status code?",
    "answer": "SELECT COUNT(*) FROM invoicing_status_code_tableGROUPINGstatus_code_column_namelanguage_idGROUPINGstatus_code_column_namecountry_idORDER_bystatus_code_column_namelanguage_idLIMIT100.Assuming INNER JOIN table2_with_invoicing_status_code_table.c ON table2_with_invoicing_status_code_table.c.status_code_column_name = status_code_column_name INNER JOIN table3_with_invoicing_status_code_table.c ON table3_with_invoicing_status_code_table.c.status_code_column_name = status_code_column_name"
  },
  {
    "id": 2095,
    "db_id": "advertising_agencies",
    "question": "What is the invoice status code with most number of invoices.",
    "answer": "SELECT T1.INvoiceStatusCode FROM InvoicesT1GROUP_CONCATIFSINCTINvoicingDateJoinINGSTRINCTInvoiceNumberONINvoicingDateWHEREINvoicingDateLikeT2.INvoiceDateORDER BY COUNTINvoicingDate DESC LIMIT 1"
  },
  {
    "id": 2096,
    "db_id": "advertising_agencies",
    "question": "Return the invoice status that has the most invoices.",
    "answer": "SELECT invoice_status FROM invoice_status_table.ORDER_by INNER JOIN invoice_status_table.r ON invoice_status_table.r.invoice_id = invoice_status_table.r.invoice_id LIMIT 1"
  },
  {
    "id": 2097,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
    "answer": "SELECT status_code, details, client_id, details, agency_id, details FROM invoices_and_client_id_info_invoice_status_code_and_details_and_client_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_client_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_andagent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_and_details_and_agent_id_info_invoice_status_code_anddetails_and_agent_id_info_in"
  },
  {
    "id": 2098,
    "db_id": "advertising_agencies",
    "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
    "answer": "SELECT client_id FROM invoices_status_tableJOINinvoice_details_tableONinvoice_status_table.client_id INNER JOIN invoices_details_tableONinvoice_details_table.client_id ON invoices_status_table.client_id = invoices_details_table.client_id"
  },
  {
    "id": 2099,
    "db_id": "advertising_agencies",
    "question": "List all meeting type codes and details.",
    "answer": "SELECT name FROM table_name.JOIN \n    GROUP BY meeting_type_id"
  },
  {
    "id": 2100,
    "db_id": "advertising_agencies",
    "question": "What are all meeting types and other details?",
    "answer": "SELECT A"
  },
  {
    "id": 2101,
    "db_id": "advertising_agencies",
    "question": "Show all meeting outcomes and purposes.",
    "answer": "SELECT name FROM meeting_data_table.JOIN \n    AS ASMS \n    LEFT JOIN ONAS.AS AS MS \n    AS M ON MS.AS.MS_ID = ASMS.ID \n    LEFT JOIN ASMS.AS AS MS \n    AS P ON ASMS.P.S_ID = MS.P.S_ID \n    LEFT JOIN ASMS.AS AS MS \n    AS Q ON ASMS.Q.S_ID = MSQ.S_ID"
  },
  {
    "id": 2102,
    "db_id": "advertising_agencies",
    "question": "What are all meeting outcomes and purposes?",
    "answer": "SELECT BY"
  },
  {
    "id": 2103,
    "db_id": "advertising_agencies",
    "question": "Show all payment ids and details for invoices whose status is 'Working'.",
    "answer": "SELECT DISTINCT INvoice_ID, Invoice_NAME, Invoice_Date, Payment_Type, Payment_Date, Payment_method, Amount, Description"
  },
  {
    "id": 2104,
    "db_id": "advertising_agencies",
    "question": "What are all payment ids and payment details for invoices with status Working?",
    "answer": "SELECT COUNT(*) FROM InvoicesWHEREStatusWorkingstatus_id__ISBLANKANDStatusWorkingstatus_id__ISBLANKANDStatusWorkingstatus_id__ISBLANKANDStatusWorkingstatus_id__ISBLANKANDInvoiceStatus_id__ISBLANKANDINvoStatus_id__ISBLANKANDInvoStatus_id__ISBLANKAndInvoiceDate__ISBLANKANDInvoiceAmount__ISBLANKANDinvoiceNumber__ISBLANKANDInvoiceName__ISBLANKANDInvoiceDescription__ISBLANKANDInvoiceSubject__ISBLANKANDInvoiceBody__ISBLANKANDInvoiceType__ISBLANKANDInvoiceStatus__ISBLANKANDInvoiceDate__ISBLANKANDinvoiceAmount__ISBLANKANDinvoiceNumber__ISBLANKANDInvoiceName__ISBLANKANDInvoiceDescription__ISBLANKANDInvoiceSubject__ISBLANKANDInvoiceBody__ISBLANKANDInvoiceType__ISBLANKANDInvoiceStatus__ISBLANKANDinvoiceDate__ISBLANKANDinvoiceAmount__ISBLANKANDinvoiceNumber__ISBLANKANDInvoiceName__ISBLANKANDInvoiceDescription__ISBLANKANDInvoiceSubject__ISBLANKANDInvoiceBody__ISBLANKANDInvoiceType__ISBLANKANDInvoiceStatus__ISBLANKANDINvoStatus_id__ISBLANKANDInvoiceDate__ISBLANKANDinvoiceAmount__ISBLANKANDinvoiceNumber__ISBLANKANDInvoiceName__ISBLANKANDInvoiceDescription__ISBLANKANDInvoiceSubject__ISBLANKANDInvoiceBody__ISBLANKANDInvoiceType__ISBLANKANDInvoiceStatus__ISBLANKANDInvoiceDate__ISBLANKANDinvoiceAmount__ISBLANKANDinvoiceNumber__ISBLANKANDInvoiceName__ISBLANKANDInvoiceDescription__ISBLANKANDInvoiceSubject__ISBLANKANDInvoiceBody__ISBLANKANDInvoiceType__ISBLANKANDInvoiceStatus__ISBLANKANDinvoiceDate__ISBLANKANDinvoiceAmount__ISBLANKANDinvoiceNumber__ISBLANKANDInvoiceName__ISBLANKANDInvoiceDescription__ISBLANKANDInvoiceSubject__ISBLANKANDInvoiceBody__ISBLANKANDInvoiceType__ISBLANKANDInvoiceStatus__ISBLANKANDINvoStatus_id__ISBLANKANDinvoiceDate__ISBLANKANDinvoiceAmount__ISBLANKANDinvoiceNumber__ISBLANK"
  },
  {
    "id": 2105,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and statuses without a payment.",
    "answer": "SELECT ID, Status FROM InvoicesStatusesWHERE_payment_status_idIsNULL.ORDER;"
  },
  {
    "id": 2106,
    "db_id": "advertising_agencies",
    "question": "What are the invoice ids and statuses for invoices without a payment?",
    "answer": "SELECT invoice_id FROM invoices_without_payment.INSERT"
  },
  {
    "id": 2107,
    "db_id": "advertising_agencies",
    "question": "How many payments do we have?",
    "answer": "SELECT COUNT(*) FROM payments.Only"
  },
  {
    "id": 2108,
    "db_id": "advertising_agencies",
    "question": "Count the number of payments.",
    "answer": "SELECT COUNT(*) FROM payments.orderedByDate"
  },
  {
    "id": 2109,
    "db_id": "advertising_agencies",
    "question": "List all payment ids and its corresponding invoice ids and details.",
    "answer": "SELECT DISTINCT p_id, i_id FROM payments_tableGROUPByp_idORDER_byi_countLIMITnum.RETURNING"
  },
  {
    "id": 2110,
    "db_id": "advertising_agencies",
    "question": "What are the payment ids, invoice ids, and payment details for all payments?",
    "answer": "SELECT PaymentID, InvoiceID, PaymentDetails FROM payments.Only"
  },
  {
    "id": 2111,
    "db_id": "advertising_agencies",
    "question": "Show all the different invoice ids and statuses of the payments",
    "answer": "SELECT in\n    FROM paymentSELECT.ING"
  },
  {
    "id": 2112,
    "db_id": "advertising_agencies",
    "question": "What are the distinct invoice ids and statuses for all payments?",
    "answer": "SELECT DISTINCT invoice_id, status FROM payments.INSERT INNER JOIN payments_onaments_withinvoice_id.id ON payments.id = invoices.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.id = onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments_onaments ON payments.onaments.onaments_onaments_id = onaments_onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments_onaments_withinvoice_id.onaments ON payments.onaments.onaments_onaments_id = onaments.onaments.id INNER JOIN payments"
  },
  {
    "id": 2113,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and the number of payments for each invoice.",
    "answer": "SELECT id, payment_count FROM invoices.Only"
  },
  {
    "id": 2114,
    "db_id": "advertising_agencies",
    "question": "How many payments are there for each invoice?",
    "answer": "SELECT COUNT(*) FROM InvoicesGROUPByInvoiceNumber.Thought"
  },
  {
    "id": 2115,
    "db_id": "advertising_agencies",
    "question": "What is the invoice id, status code, and details for the invoice with most number of payments.",
    "answer": "SELECT invoice_id, status_code, details FROM invoices_info_tableijnastarturtuivie43156807429354234430219499999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
  },
  {
    "id": 2116,
    "db_id": "advertising_agencies",
    "question": "Return the invoice ids, statuses, and details for invoices with the most payments?",
    "answer": "SELECT id, status, details FROM invoices_tableORDERbystatusdescLIMIT1.SELECT_id, statusFROMINvoices_tableWHEREstatusID.invoice_id INNER JOIN invoices_tableONINvoices_table.id_invo_id AS i ON i.invoice_id = i.id"
  },
  {
    "id": 2117,
    "db_id": "advertising_agencies",
    "question": "How many staff do we have?",
    "answer": "SELECT A"
  },
  {
    "id": 2118,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff.",
    "answer": "SELECT COUNT(*) FROM staffs.WHERE  ORDER BY type"
  },
  {
    "id": 2119,
    "db_id": "advertising_agencies",
    "question": "Show the agency ids and the number of staff in each agent?",
    "answer": "SELECT ID, COUNT(*) FROM agents.Only"
  },
  {
    "id": 2120,
    "db_id": "advertising_agencies",
    "question": "Return the agency ids and number of staff in each.",
    "answer": "SELECT a.id, COUNT(*) AS staff_count FROM agency_id_table.a INNER JOIN agency_id_table.s ON a.id = s.id GROUP BY a.id"
  },
  {
    "id": 2121,
    "db_id": "advertising_agencies",
    "question": "What is the agent id and details for the agency with most staff?",
    "answer": "SELECT agent_id FROM agencies_tableGROUPHAVINGCOUNTSTINCTstaff_idulatesINSELECTstaID2FROMsta_tableGROUPHAVINGCOUNTISTINCTsta_id2ISBLANKORDERBysta_id2LIMIT50GROUPHAVINGCOUNTISTINCTsta_id2ISBLANKGROUPHAVINGCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKANDCOUNTISTINCTsta_id2ISBLANKAND"
  },
  {
    "id": 2122,
    "db_id": "advertising_agencies",
    "question": "Return the id and detail for the agency with the most staff.",
    "answer": "SELECT StaffId, StaffName FROM agencies_table_name_ArgencyStaffsGROUPHAVINGCOUNT.STATements INNER JOIN (SELECT COUNT(*) AS count FROM agencies_table_name_ArgenciesWHEREManagerID.equalsarten) AS count ON count > 0"
  },
  {
    "id": 2123,
    "db_id": "advertising_agencies",
    "question": "Show meeting outcome codes and the number of meeting in each outcome.",
    "answer": "SELECT code, count FROM meeting_result_code.Only  WHERE meeting_type = '\u4f1a\u8bae';"
  },
  {
    "id": 2124,
    "db_id": "advertising_agencies",
    "question": "How many meetings had each meeting outcome?",
    "answer": "SELECT COUNT(*) FROM meetingsGROUPByoutcome.Question"
  },
  {
    "id": 2125,
    "db_id": "advertising_agencies",
    "question": "List the client ids and the number of meeting for each client.",
    "answer": "SELECT DISTINCT * FROM meeting_client_info.INSERT"
  },
  {
    "id": 2126,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each client id?",
    "answer": "SELECT COUNT(*) FROM meetings_in_client_id_mmtc_2018_4_632953_797952_2018_5_37_91_14_15_93_62_66_101_2018_3_15_2_2_3_6_7_16_17_20_19_20_11_20_3_6_19_4_6_13_2_19_11_20_20_19_5_3_13_18_17_20_11_20_5_3_13_17_11_20_10_10_11_14_12_16_17_18_19_11_20_3_13_18_17_11_20_5_3_13_18_17_11_20_10_10_11_14_12_16_17_18_19_11_20_3_13_18_17_11_20_5_3_13_18_17_20_11_20_5_3_13_18_17_11_20_19_5_3_13_18_17_11_20_5_3_13_18_17_11_20_5_3_13_18_17_20_19_5_3_13_18_17_11_20_5_3_13_18_17_11_20_19_5_3_13_18_17_11_20_5_3_13_18_17_11_20_5_3_13_18_17_11_20_5_3_13_18"
  },
  {
    "id": 2127,
    "db_id": "advertising_agencies",
    "question": "Show the meeting type codes and the number of meeting for each client.",
    "answer": "SELECT type, count FROM meetingsWHERE_client_id_column_id_in_meting_type_code_column_to_meting_type_code_column_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id_in_date_column_column_id"
  },
  {
    "id": 2128,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each meeting type?",
    "answer": "SELECT Meeting_TYPE, COUNT(*) FROM MeetingsGROUPByMeeting_TYPE.Answer"
  },
  {
    "id": 2129,
    "db_id": "advertising_agencies",
    "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
    "answer": "SELECT id FROM meeting_info.ATTACH"
  },
  {
    "id": 2130,
    "db_id": "advertising_agencies",
    "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
    "answer": "SELECT title FROM meetings.INSERT \n    LIMIT 10000;"
  },
  {
    "id": 2131,
    "db_id": "advertising_agencies",
    "question": "Show the meeting ids and the number of staff in each meeting.",
    "answer": "SELECT M.meeting_id, COUNT(*) AS staff_count FROM meetings_meeting_mgrMSM_20180306_19740306_001A0E205L3MMEetingId_20180306_19740306_001A105L3MSMEeting_id_20180306_19740306_001A205L3MSMEeting_id_20180306_19740306_001A305L3MSMEeting_id_20180306_19740306_001A405L3MSMEeting_id_20180306_19740306_001A505L3MSMEeting_id_20180306_19740306_001A605L3MSMEeting_id_20180306_19740306_001A705L3MSMEeting_id_20180306_19740306_001A805L3MSMEeting_id_20180306_19740306_001A905L3MSMEeting_id_20180306_19740306_001A105L3MSMEeting_id_20180306_19740306_001A205L3MSMEeting_id_20180306_19740306_001A305L3MSMEeting_id_20180306_19740306_001A405L3MSMEeting_id_20180306_19740306_001A505L3MSME"
  },
  {
    "id": 2132,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff in each meeting by meeting id.",
    "answer": "SELECT * FROM staffsMeetingsGROUPBymeeting_id.ORDER LIMIT 1"
  },
  {
    "id": 2133,
    "db_id": "advertising_agencies",
    "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
    "answer": "SELECT Staff_id FROM StaffsMeetingsWHEREStaff_idINSELECTStaff_idFROMUsersMeetingsGROUPByStaff_idORDERBYNumber_of_meetingsICSLEST.SELECTMIN_NUMBER_of_meetings"
  },
  {
    "id": 2134,
    "db_id": "advertising_agencies",
    "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
    "answer": "SELECT staff_id FROM staffsWHERECOUNTmeeting_idMINISIN5000GROUPHAVINGCOUNTMeeting_idMAXISIN5000.assistantThestaff_idofthestaffwhoattendedtheleast_meetingsbutattendomedifferent_meetingisSELECTstff_idFROMstaffsWHERECOUNTmeeting_idMINISIN5000GROUPHAVINGCOUNTmeeting_idMAXISIN5000;"
  },
  {
    "id": 2135,
    "db_id": "advertising_agencies",
    "question": "How many staff have attended a meeting?",
    "answer": "SELECT COUNT(*) FROM meetings.WHERE \n    GROUP BY group_id"
  },
  {
    "id": 2136,
    "db_id": "advertising_agencies",
    "question": "Return the number of distinct staff who have attended a meeting?",
    "answer": "SELECT COUNT(DISTINCTStaffID) FROM MeetingWHEREStaffNameIsLIKE.regexRegREmsStaffName, MeetingMeetingsCountIsLike.regexRegRemsMeetings"
  },
  {
    "id": 2137,
    "db_id": "advertising_agencies",
    "question": "How many staff did not attend any meeting?",
    "answer": "SELECT COUNT(*) FROM meetings.WHERE \n    GROUP BY group_id"
  },
  {
    "id": 2138,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff who did not attend any meeting.",
    "answer": "SELECT COUNT(*) FROM staffs.WHERE \n    FULL JOIN meetings.on  AS m ON f.full_id = m.full_id"
  },
  {
    "id": 2139,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
    "answer": "SELECT Client_ID, Invoice_ID FROM Clients_info.Clients WHERE MeetingID IN (SELECT DISTINCT MeetingID FROM Clients_infoMEetingWHEREMeetingIDINSTRnicas.floorMetals)"
  },
  {
    "id": 2140,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
    "answer": "SELECT Client_id, Details FROM ClientsMeetingsAndInvoices.ClientsMeetingsAndInvoices"
  },
  {
    "id": 2141,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
    "answer": "SELECT id, staff_name FROM staffs_info_tableJoinMeetings_tableONstaff_idIDSEquentialJOINMeetings_tableONstaff_idSEquentialJOINMeetings_tableONstaff_idSEquentialGROUPBystaff_nameORDERbyidLIMIT1.INDIRECT"
  },
  {
    "id": 2142,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
    "answer": "SELECT * FROM StaffDetails.INSERT"
  },
  {
    "id": 2143,
    "db_id": "advertising_agencies",
    "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
    "answer": "SELECT ID FROM client_1_cmt_2023_01_25_26_37_48_59_60_61_62_63_64_65_66_67_68_69_70_71_72_73_74_75_76_77_78_79_80_81_82_83_84_85_86_87_88_89_90_91_92_93_94_95_96_97_98_99_100_101_102_103_104_105_106_107_108_109_110_111_112_113_114_115_116_117_118_119_120_121_122_123_124_125_126_127_128_129_130_131_132_133_134_135_136_137_138_139_140_141_142_143_144_145_146_147_148_149_150_151_152_153_154_155_156_157_158_159_160_161_162_163_164_165_166_167_168_169_170_171_172_173_174_175_176_177_178_179_180_181_182_183_"
  },
  {
    "id": 2144,
    "db_id": "advertising_agencies",
    "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
    "answer": "SELECT ClientId, sicCode, AgencyId FROM MeetingClientJoinWHEREClientID.inboundToMeAndMeetingID INNER JOIN OnLineSessionOnLineSessionON_meetingClientJoin_meetingID.meeting_id_meeting_id ON MeetingClientJoinMEetingID.meeting_id_meeting_id = OnLineSessionOnLineSession.meeting_id_meeting_id"
  },
  {
    "id": 2145,
    "db_id": "advertising_agencies",
    "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
    "answer": "SELECT MeetingStart_time, MeetingEnd_time, ClientDetail, StaffDetail FROM meetings.Using INNER JOIN toJOINClientDetailsWithMeetingsWithStaffDetailsOnMeetingIDAndClientID.Using ON ClientDetailsWithMeetingsWithStaffDetailsOnMeetingIDAndClientID = meetings.id"
  },
  {
    "id": 2146,
    "db_id": "advertising_agencies",
    "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
    "answer": "SELECT Meeting, Client, Staff FROM meetingsWHERE.Client INNER JOIN ClientsONMeetingsMeetings.ClientIDINNERjoinStaff ON MeetingsStaffClientIDINNERJOINClientsONMeetings.ClientID \n\n= \nbegin"
  }
]